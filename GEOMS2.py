# -*- coding: utf-8 -*-
"""
Created on Wed Sep 18 17:52:52 2013

@author: pedro.correia
"""

from __future__ import division
import numpy as np
import scipy.stats as st
import PIL as pil

import tempfile
import win32api
import os
import subprocess
import shutil
import webbrowser # To open webpages

import wx
import wx.lib.agw.floatspin as FS # This a floatSpin widget
import wx.lib.plot as wxplot
import wx.lib.scrolledpanel as scrolled
from wx.lib import sheet
import sys
# sys.setdefaultencoding may be deleted by site.py, 
# so bring it back:
#reload(sys) 
#if hasattr(sys,"setdefaultencoding"):
#    sys.setdefaultencoding("latin-1")
import wx.lib.agw.advancedsplash as AS

import libs.cerena_file_utils as cfile
import libs.hardworklib as hardwork

def do_splash():
    imagePath = "ART\\DEFAULT\\related\\splash_screen.png"
    bitmap = wx.Bitmap(imagePath, wx.BITMAP_TYPE_PNG)
    shadow = wx.GREEN
    splash = AS.AdvancedSplash(None, bitmap=bitmap, timeout=2000,
                               agwStyle=AS.AS_TIMEOUT |
                               AS.AS_CENTER_ON_PARENT |
                               AS.AS_SHADOW_BITMAP,
                               shadowcolour=shadow)

#import mayavi.mlab as maya
from mayavi import mlab as maya
#from mayavi.api import Engine
from traits.api import HasTraits, Instance
from traitsui.api import View, Item
#from mayavi.sources.api import ArraySource
#from mayavi.modules.api import IsoSurface
from mayavi.core.ui.api import MlabSceneModel, SceneEditor

import libs.cerena_object as cobj

import libs.cerena_plugins as plg
import libs.pympllibrary as pympl
import libs.pymayalibrary as pymaya
from matplotlib.mlab import PCA

class ART():
    def __init__(self,path = 'ART\\DEFAULT\\'):
        
        # THIS WILL APPEAR AS ICON FOR THE SOFTWARE (ICO)
        self.parent_frame_icon = path + 'related\\main.ico' #main_icon.ico'
        
        self.parent_frame_about = path + 'related\\face_image.png'
        
        #---------------------------------
        # THESE WILL APPEAR IN THE TOP MENUS (24px)
        
        self.topmenu_point_import_button = path + 'topmenu\\import_point.png'
        self.topmenu_grid_import_button =  path + 'topmenu\\import_grid.png'
        self.topmenu_surface_import_button = path + 'topmenu\\import_surface.png'
        self.topmenu_data_import_button = path + 'topmenu\\import_data.png'
        self.topmenu_project_import_button = path + 'topmenu\\import_project.png'
        self.topmenu_project_export_button = path + 'topmenu\\export_project.png'
        self.topmenu_project_save_button = path + 'topmenu\\save_project.png'
        
        self.topmenu_general_export_button = path + 'topmenu\\general_export.png'
        self.topmenu_quit_button = path + 'topmenu\\quit.png'
        
        self.topmenu_viewer_definitions_button = path + 'topmenu\\viewer_definitions.png'
        self.topmenu_empty_mesh_button = path + 'topmenu\\empty_grid.png'
        self.topmenu_empty_surf_button = path + 'topmenu\\empty_surface.png'
        self.topmenu_toolbox_button = path + 'topmenu\\toolbox.png'
        self.topmenu_export2object_button = path + 'topmenu\\export2object.png'
        
        self.topmenu_plugin_help_button = path + 'topmenu\\plugin_help.png'
        
        # PLUGINS (TRPMENU) --------------
        self.topmenu_import_similars_button = path + 'topmenu\\import_similars.png'
        self.topmenu_loadimage_button = path + 'topmenu\\load_image.png'
        self.topmenu_loadasciistl_button = path + 'topmenu\\load_ascii_stl.png'
        self.topmenu_distribution_maker_button = path + 'topmenu\\distribution_maker.png'
        
        self.topmenu_processing_button = path + 'topmenu\\processing.png'
        self.topmenu_wavelet_convolve_button = path + 'topmenu\\wavelet_convolve.png'
        self.topmenu_fracture_connect_button = path + 'topmenu\\fracture_connect.png'
        
        self.topmenu_seismic_inversion_button = path + 'topmenu\\seismic_inversion.png'
        self.topmenu_simulated_annealing_button = path + 'topmenu\\sim_annealing.png'
        self.topmenu_python_gsi_button = path + 'topmenu\\python_gsi.png'
        self.topmenu_dsip_button = path + 'topmenu\\DSIP.png'
        
        self.topmenu_simulation_button = path + 'topmenu\\simulation.png'
        self.topmenu_cbis_button = path + 'topmenu\\CBIS.png'
        self.topmenu_fracture_sim_button = path + 'topmenu\\fracture_sim.png'
        
        self.topmenu_synthetic_button = path + 'topmenu\\synthetic.png'
        self.topmenu_geological_mesh_button = path + 'topmenu\\geological_mesh.png'
        self.topmenu_property_maker_button = path + 'topmenu\\property_maker.png'
        self.topmenu_multiple_property_maker_button = path + 'topmenu\\multiple_property_maker.png'
        self.topmenu_wavelet_generation_button = path + 'topmenu\\wavelet_generation.png'
        self.topmenu_geometric_transform_button = path + 'topmenu\\geometric_transform.png'
        
        self.topmenu_parsers_button = path + 'topmenu\\parsers.png'
        self.topmenu_pseudo_dist_button = path + 'topmenu\\pseudo_dist.png'
        
        #---------------------------------
        # THESE WILL APPEAR IN THE TOOLBAR MENU (64px).
        
        self.toolbar_point_import_button = path + 'toolbar\\import_point.png'
        self.toolbar_grid_import_button  = path + 'toolbar\\import_grid.png'
        self.toolbar_surface_import_button = path + 'toolbar\\import_surface.png'
        self.toolbar_data_import_button = path + 'toolbar\\import_data.png'
        self.toolbar_project_import_button = path + 'toolbar\\import_project.png'
        
        self.toolbar_general_export_button = path + 'toolbar\\general_export.png'
        self.toolbar_quit_button = path + 'toolbar\\quit.png'
        
        self.toolbar_viewer_definitions_button = path + 'toolbar\\viewer_definitions.png'
        
        self.toolbar_empty_mesh_button = path + 'toolbar\\empty_grid.png'
        self.toolbar_empty_surf_button = path + 'toolbar\\empty_surface.png'
        
        self.toolbar_project_export_button = path + 'toolbar\\export_project.png'
        self.toolbar_project_save_button = path + 'toolbar\\save_project.png'
        
        self.toolbar_toolbox_button = path + 'toolbar\\toolbox.png'
        self.toolbar_export2object_button = path + 'toolbar\\export2object.png'
        self.toolbar_clean_button = path + 'toolbar\\clean_manager.png'
        
        self.toolbar_online_help_button = path + 'toolbar\\online_help.png'
        
        self.toolbar_about_button = path + 'toolbar\\about.png'
        
        #---------------------------------
        # THESE WILL APPEAR IN THE CONTEXT MENU (16px).
        
        self.contextmenu_point_import_button = path + 'contextmenu\\import_point.png'
        self.contextmenu_grid_import_button  = path + 'contextmenu\\import_grid.png'
        self.contextmenu_surface_import_button = path + 'contextmenu\\import_surface.png'
        self.contextmenu_data_import_button = path + 'contextmenu\\import_data.png'
        self.contextmenu_triangle_mesh_import_button = path + 'contextmenu\\import_triangle_mesh.png'
        
        self.contextmenu_view_button = path + 'contextmenu\\view_object.png'
        self.contextmenu_object_button = path + 'contextmenu\\object_specifics.png'
        self.contextmenu_definitions_button = path + 'contextmenu\\definitions.png'
        self.contextmenu_labelme_button = path + 'contextmenu\\labelme.png'
        self.contextmenu_zscale_button = path + 'contextmenu\\zscale.png'
        
        self.contextmenu_histogram_button = path + 'contextmenu\\histogram.png'
        self.contextmenu_scatterplot_button = path + 'contextmenu\\scatterplot.png'
        self.contextmenu_boxplot_button = path + 'contextmenu\\boxplot.png'
        self.contextmenu_lineplot_button = path + 'contextmenu\\lineplot.png'
        self.contextmenu_stereonet_button = path + 'contextmenu\\stereonet.png'
        self.contextmenu_densityplot_button = path + 'contextmenu\\densityplot.png'
        self.contextmenu_3dplots_button = path + 'contextmenu\\3dplots.png'
        self.contextmenu_2dplots_button = path + 'contextmenu\\2dplots.png'
        self.contextmenu_volumeview_button = path + 'contextmenu\\volume_view.png'
        self.contextmenu_volumeandslicesview_button = path + 'contextmenu\\volume_and_slices_view.png'
        self.contextmenu_bubbleplot_button = path + 'contextmenu\\bubbleplot.png'
        self.contextmenu_bubblenet_button = path + 'contextmenu\\bubblenet.png'
        self.contextmenu_fillplot_button = path + 'contextmenu\\fillplot.png'
        self.contextmenu_densitynet_button = path + 'contextmenu\\densitynet.png'
        self.contextmenu_4wayscatter_button = path + 'contextmenu\\4wayscatter.png'
        self.contextmenu_3dscatter_button = path + 'contextmenu\\3dscatter.png'
        
        self.contextmenu_variogram_button = path + 'contextmenu\\variogram.png'
        
        self.contextmenu_simulation_button = path + 'contextmenu\\simulation.png'
        self.contextmenu_gsi_button = path + 'contextmenu\\gsi.png'
        self.contextmenu_dss_button = path + 'contextmenu\\dss.png'
        self.contextmenu_sgs_button = path + 'contextmenu\\sgs.png'
        self.contextmenu_sis_button = path + 'contextmenu\\sis.png'
        
        self.contextmenu_estimation_button = path + 'contextmenu\\estimation.png'
        self.contextmenu_krig_button = path + 'contextmenu\\kriging.png'
        self.contextmenu_iwd_button = path + 'contextmenu\\iwd.png'
        self.contextmenu_grid_interpolation_button = path + 'contextmenu\\grid_interpolation.png'
        
        self.contextmenu_convert_button = path + 'contextmenu\\convert.png'
        
        # SURFACE RELATED BUTTONS
        self.contextmenu_surface_related_button = path + 'contextmenu\\surface_related.png'
        self.contextmenu_above_or_below_button = path + 'contextmenu\\above_or_below.png'
        self.contextmenu_between_button = path + 'contextmenu\\between.png'
        self.contextmenu_flatten_button = path + 'contextmenu\\flatten.png'
        self.contextmenu_unflatten_button = path + 'contextmenu\\unflatten.png'
        self.contextmenu_flatten_point_button = path + 'contextmenu\\flatten_point.png'
        self.contextmenu_unflatten_point_button = path + 'contextmenu\\unflatten_point.png'
        self.contextmenu_create_shape_button = path + 'contextmenu\\create_shape.png'
        self.contextmenu_shovel_button = path + 'contextmenu\\shovel.png'
        self.contextmenu_balanced_shovel_button = path + 'contextmenu\\balanced_shovel.png'
        self.contextmenu_slope_map_button = path + 'contextmenu\\slope_map.png'
        self.contextmenu_map2surf_button = path + 'contextmenu\\maptosurface.png'
        
        # POINT RELATED BUTTONS
        self.contextmenu_point_related_button = path + 'contextmenu\\point_related.png'
        self.contextmenu_add_from_mesh_button = path + 'contextmenu\\add_from_mesh.png'
        self.contextmenu_map2quiver_button = path + 'contextmenu\\map2quiver.png'
        self.contextmenu_map2streamline_button = path + 'contextmenu\\streamline.png'
        self.contextmenu_map2fracture_button = path + 'contextmenu\\fracture.png'
        self.contextmenu_convert2world_button = path + 'contextmenu\\worldview.png'
        self.contextmenu_map2graph_button = path + 'contextmenu\\map2graph.png'
        
        # MESH RELATED BUTTONS
        self.contextmenu_mesh_related_button = path + 'contextmenu\\mesh_related.png'
        self.contextmenu_attributes_button = path + 'contextmenu\\attributes.png'
        self.contextmenu_interpretation_button = path + 'contextmenu\\interpretation.png'
        self.contextmenu_create_point_set_button = path + 'contextmenu\\create_point_set.png'
        self.contextmenu_point_section_view_button = path + 'contextmenu\\point_section_view.png'
        self.contextmenu_generate_image_set_button = path + 'contextmenu\\generate_image_set.png'
        self.contextmenu_upscale_button = path + 'contextmenu\\upscale.png'
        
        # non-spatial DATA RELATED BUTTONS
        self.contextmenu_data_related_button = path + 'contextmenu\\data_related.png'
        self.contextmenu_pca_button = path + 'contextmenu\\pca.png'
        self.contextmenu_classify_button = path + 'contextmenu\\classify.png'
        self.contextmenu_discriminant_analysis_button = path + 'contextmenu\\discriminant_analysis.png'
        self.contextmenu_cluster_analysis_button = path + 'contextmenu\\cluster_analysis.png'

        # TRIANGLE MESH RELATED BUTTONS
        self.contextmenu_triangle_related_button = path + 'contextmenu\\triangle_related.png'
        self.contextmenu_add_triangle_variable_button = path + 'contextmenu\\add_triangle_variable.png'   
        
        ##################GENERAL###############################
        
        self.contextmenu_operations_button = path + 'contextmenu\\operations.png'
        self.contextmenu_mirror_button = path + 'contextmenu\\mirror.png'
        self.contextmenu_categorize_button = path + 'contextmenu\\categorize.png'
        self.contextmenu_crop_button = path + 'contextmenu\\crop.png'
        self.contextmenu_duplicate_button = path + 'contextmenu\\duplicate.png'
        self.contextmenu_linear_button = path + 'contextmenu\\linear.png'
       
        
        self.contextmenu_geometric_button = path + 'contextmenu\\geometric.png'
        self.contextmenu_pickle_button = path + 'contextmenu\\pickle.png'
        self.contextmenu_repeat_button = path + 'contextmenu\\repeat.png'
        self.contextmenu_expand_button = path + 'contextmenu\\expand.png'
        self.contextmenu_tile_button = path + 'contextmenu\\tile.png'
        self.contextmenu_transpose_button = path + 'contextmenu\\transpose.png'
        self.contextmenu_shift_button = path + 'contextmenu\\shift.png'
        self.contextmenu_flipy_button = path + 'contextmenu\\flip_vertical.png'
        self.contextmenu_flipx_button = path + 'contextmenu\\flip_horizontal.png'
        self.contextmenu_flipz_button = path + 'contextmenu\\flip_z.png'
        self.contextmenu_rotate_button = path + 'contextmenu\\rotate.png'
        self.contextmenu_swap_button = path + 'contextmenu\\swap.png'
        self.contextmenu_split_button = path + 'contextmenu\\split.png'
        self.contextmenu_pad_button = path + 'contextmenu\\pad.png'
        self.contextmenu_translation_button = path + 'contextmenu\\translation.png'
        
        self.contextmenu_calculator_button = path + 'contextmenu\\calculator.png'
        self.contextmenu_constant_calculator_button = path + 'contextmenu\\constant_calculator.png'
        self.contextmenu_object_calculator_button = path + 'contextmenu\\object_calculator.png'
        self.contextmenu_global_calculator_button = path + 'contextmenu\\global_calculator.png'
        
        self.contextmenu_manipulate_button = path + 'contextmenu\\manipulate.png'
        self.contextmenu_join_button = path + 'contextmenu\\join.png'
        
        self.contextmenu_move_button = path + 'contextmenu\\move.png'
        self.contextmenu_copy_button = path + 'contextmenu\\copy.png'
        self.contextmenu_cut_button = path + 'contextmenu\\cut.png'
        self.contextmenu_move_button = path + 'contextmenu\\move.png'
        self.contextmenu_export_button = path + 'contextmenu\\general_export.png'
        self.contextmenu_delete_button = path + 'contextmenu\\delete_object.png'
        
        
        ################### HARD WORKD ###################################
        
        self.topmenu_hardwork_button = path + 'topmenu\\hardwork.png'
        self.topmenu_tetris_button = path + 'topmenu\\tetris.png'
        self.topmenu_dodger_button = path + 'topmenu\\dodger.png'
        self.topmenu_maze_button = path + 'topmenu\\maze.png'
        
class CTX4wayscatterFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"4 way scatterplot editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        #page2 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variables = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(300,337),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,pieces[1],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variables = wx.ComboBox(page1,-1,pieces[1],(300,337),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.variablec.Disable()
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        
        self.matplotlib_colormaps = ['Accent','Blues','BrBG','BuGn','BuPu','Dark2',
                                     'GnBu','Greens','Greys','OrRd','Oranges','PRGn'
                                     ,'Paired','Pastel1','Pastel2','PiYG','PuBu','PuBuGn'
                                     ,'PuOr','PuRd','Purples','RdBu','RdGy','RdPu','RdYlBu'
                                     ,'RdYlGn','Reds','Set1','Set2','Set3','Spectral'
                                     ,'YlGn','YlGnBu','YlOrBr','YlOrRd','afmhot','autumn'
                                     ,'binary','bone','brg','bwr','cool','coolwarm'
                                     ,'copper','cubehelix','flag','gist_earth','gist_gray'
                                     ,'gist_heat','gist_ncar','gist_rainbow','gist_stern'
                                     ,'gist_yarg','gnuplot','gnuplot2','gray','hot'
                                     ,'hsv','jet','ocean','pink','prism','rainbow'
                                     ,'seismic','spectral','spring','summer','terrain'
                                     ,'winter']        
        
        self.colormapped = wx.CheckBox(page1,-1,' ',(20,60))
        #self.colormapped.Disable()
        self.colormap = wx.ComboBox(page1,-1,'jet',(45,57),(50,-1),choices=self.matplotlib_colormaps,style=wx.CB_READONLY)
        
        wx.StaticBox(page1,-1,'Technical parameters',(10,90),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,110))
        wx.StaticText(page1,-1,'Red:',(30,140))
        wx.StaticText(page1,-1,'Green:',(30,170))
        wx.StaticText(page1,-1,'Blue:',(30,200))
        wx.StaticText(page1,-1,'Alpha:',(30,230))
        self.my_color = wx.Button(page1,-1,'Choose',(100,105),(90,-1))
        #self.my_color.Disable()
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variablex.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100,137),(90,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100,167),(90,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100,197),(90,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100,227),(90,-1),min=0,max=255,initial=appex[3])
        #self.red.Disable()
        #self.green.Disable()
        #self.blue.Disable()
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,110))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,140))
        self.ylabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,170))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,200))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variablex.GetValue(),(280,107),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,self.variabley.GetValue(),(280,137),(90,-1))
        #self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,167),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,197),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()  
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,230))        
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,260),(380,110))
        self.marginal_hist = wx.CheckBox(page1,-1,'  Marginal hist',(30,280))
        self.hist_bins = wx.SpinCtrl(page1,-1,'',(120,277),(70,-1),min=2,max=100000,initial=30)        
        
        wx.StaticText(page1,-1,'Marker:',(30,310))
        wx.StaticText(page1,-1,'min/max size:',(30,340))
        self.marker_choice = ['Caret down','Caret left','Caret right','Caret up',
                              'Circle','Diamond','Hexagon 1','Hexagon 2','Underscore',
                              'Octagon','Pentagon','Pixel','Plus','Point','Square',
                              'Star','Thin diamond','Tick down','Tick left','Thick right',
                              'Tick up','Triangle down','Triangle left','Triangle right',
                              'Triangle up','Slash lines','X','Tri down','Tri left','Tri right',
                              'Tri up']
        self.marker = wx.ComboBox(page1,-1,'Circle',(100,307),(90,-1),choices=self.marker_choice, style=wx.CB_READONLY)
        self.marker.Disable()        
        self.size = wx.SpinCtrl(page1,-1,'',(100,337),(90,-1),min=2,max=10000,initial=50)
        self.size2 = wx.SpinCtrl(page1,-1,'',(200,337),(90,-1),min=2,max=10000,initial=500)
        
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(220,280))
        self.style_check.Disable()
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(290,277),(80,-1),choices = ['GeoMS','SGeMS'],style=wx.CB_READONLY)
        self.style_combo.Disable()        
        
        self.reg_check = wx.CheckBox(page1,-1,'  Do linear regression',(220,310))        
        
        wx.StaticText(page1,-1,'DPI:',(40,410))
        self.dpi = wx.SpinCtrl(page1,-1,'',(80,407),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot scatter4',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onplot(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check.GetValue()
        style = self.style_combo.GetValue()
        p1 = self.object.GetValue()
        p1x = self.variablex.GetValue()
        p1y = self.variabley.GetValue()
        p1c = self.variablec.GetValue()
        p1s = self.variables.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        size2  = self.size2.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        cmapflag = self.colormapped.GetValue()
        cmap = self.colormap.GetValue()
        h = pympl.common_scatter4_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,size2,hist_flag,rflag,cmapflag,cmap)
        if sflag:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                
        else:
            if frame.object_manager.object_type[p1]=='point':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
            elif frame.object_manager.object_type[p1]=='data':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data,frame.object_manager.object_list[p1].variable[p1s].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def onobjectvariablex(self,event):
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        self.xlabel.SetValue(self.variablex.GetValue())
        self.title.SetValue(self.object.GetValue())
        
    def onobjectvariabley(self,event):
        self.ylabel.SetValue(self.variabley.GetValue())
        #self.title.SetValue(self.object.GetValue())
            
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        
    def onobjectcombo(self,event):
        self.variablex.Clear()
        self.variabley.Clear()
        self.variablec.Clear()
        self.variables.Clear()
        self.variablex.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablex.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variabley.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variabley.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variablec.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablec.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variables.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variables.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
        
    def oncancel(self,event):
        self.Destroy()
        
class CTX3DscatterFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"3D Scatterplot editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        #page2 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,pieces[1],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        
        self.matplotlib_colormaps = ['Accent','Blues','BrBG','BuGn','BuPu','Dark2',
                                     'GnBu','Greens','Greys','OrRd','Oranges','PRGn'
                                     ,'Paired','Pastel1','Pastel2','PiYG','PuBu','PuBuGn'
                                     ,'PuOr','PuRd','Purples','RdBu','RdGy','RdPu','RdYlBu'
                                     ,'RdYlGn','Reds','Set1','Set2','Set3','Spectral'
                                     ,'YlGn','YlGnBu','YlOrBr','YlOrRd','afmhot','autumn'
                                     ,'binary','bone','brg','bwr','cool','coolwarm'
                                     ,'copper','cubehelix','flag','gist_earth','gist_gray'
                                     ,'gist_heat','gist_ncar','gist_rainbow','gist_stern'
                                     ,'gist_yarg','gnuplot','gnuplot2','gray','hot'
                                     ,'hsv','jet','ocean','pink','prism','rainbow'
                                     ,'seismic','spectral','spring','summer','terrain'
                                     ,'winter']        
        
        self.colormapped = wx.CheckBox(page1,-1,' ',(20,60))
        self.colormapped.SetValue(True)
        self.colormapped.Disable()
        self.colormap = wx.ComboBox(page1,-1,'jet',(45,57),(50,-1),choices=self.matplotlib_colormaps,style=wx.CB_READONLY)
        self.colormap.Disable()
        wx.StaticBox(page1,-1,'Technical parameters',(10,90),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,110))
        wx.StaticText(page1,-1,'Red:',(30,140))
        wx.StaticText(page1,-1,'Green:',(30,170))
        wx.StaticText(page1,-1,'Blue:',(30,200))
        wx.StaticText(page1,-1,'Alpha:',(30,230))
        self.my_color = wx.Button(page1,-1,'Choose',(100,105),(90,-1))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variablex.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100,137),(90,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100,167),(90,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100,197),(90,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100,227),(90,-1),min=0,max=255,initial=appex[3])
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,110))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,140))
        self.ylabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,170))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,200))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variablex.GetValue(),(280,107),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,self.variabley.GetValue(),(280,137),(90,-1))
        #self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,167),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,197),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()  
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,230))        
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,260),(380,110))
        self.marginal_hist = wx.CheckBox(page1,-1,'  Marginal hist',(30,280))
        self.hist_bins = wx.SpinCtrl(page1,-1,'',(120,277),(70,-1),min=2,max=100000,initial=30)        
        self.marginal_hist.Disable()
        self.hist_bins.Disable()
        wx.StaticText(page1,-1,'Marker:',(30,310))
        wx.StaticText(page1,-1,'Size:',(30,340))
        self.marker_choice = ['Caret down','Caret left','Caret right','Caret up',
                              'Circle','Diamond','Hexagon 1','Hexagon 2','Underscore',
                              'Octagon','Pentagon','Pixel','Plus','Point','Square',
                              'Star','Thin diamond','Tick down','Tick left','Thick right',
                              'Tick up','Triangle down','Triangle left','Triangle right',
                              'Triangle up','Slash lines','X','Tri down','Tri left','Tri right',
                              'Tri up']
        self.marker = wx.ComboBox(page1,-1,'Circle',(100,307),(90,-1),choices=self.marker_choice, style=wx.CB_READONLY)
        self.size = wx.SpinCtrl(page1,-1,'',(100,337),(90,-1),min=10,max=10000,initial=60)
        
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(220,280))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(290,277),(80,-1),choices = ['GeoMS','SGeMS','Basic','BasicX','Sober'],style=wx.CB_READONLY)
        self.style_combo.Disable()
        self.style_check.Disable()
        
        self.reg_check = wx.CheckBox(page1,-1,'  Do linear regression',(220,310))
        self.reg_check.Disable()
        
        wx.StaticText(page1,-1,'DPI:',(40,410))
        self.dpi = wx.SpinCtrl(page1,-1,'',(80,407),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot 3D scatter',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        """
        nb.AddPage(page2, "Multiple")
        wx.StaticBox(page2,-1,'Objects',(10,10),(380,290))
        wx.StaticText(page2,-1,'Number:',(30,30))
        self.number_of_objects = wx.SpinCtrl(page2,-1,'',(100,27),(90,-1),min=1,max=8,initial=1)
        self.Bind(wx.EVT_SPINCTRL,self.onnumberobjects,id=self.number_of_objects.GetId())        
        
        wx.StaticText(page2,-1,'Object 2:',(30,60))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,60))        
        self.object2 = wx.ComboBox(page2,-1,pieces[0],(100,57),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo2,id=self.object2.GetId())
        if len(pieces)==1:
            self.variable2x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable2y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable2x = wx.ComboBox(page2,-1,pieces[1],(247,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable2y = wx.ComboBox(page2,-1,pieces[1],(310,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
            
        wx.StaticText(page2,-1,'Object 3:',(30,90))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,90))        
        self.object3 = wx.ComboBox(page2,-1,pieces[0],(100,87),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo3,id=self.object3.GetId())
        if len(pieces)==1:
            self.variable3x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable3y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable3x = wx.ComboBox(page2,-1,pieces[1],(247,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable3y = wx.ComboBox(page2,-1,pieces[1],(310,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 4:',(30,120))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,120))        
        self.object4 = wx.ComboBox(page2,-1,pieces[0],(100,117),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo4,id=self.object4.GetId())
        if len(pieces)==1:
            self.variable4x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable4y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable4x = wx.ComboBox(page2,-1,pieces[1],(247,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable4y = wx.ComboBox(page2,-1,pieces[1],(310,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 5:',(30,150))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,150))        
        self.object5 = wx.ComboBox(page2,-1,pieces[0],(100,147),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo5,id=self.object5.GetId())
        if len(pieces)==1:
            self.variable5x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable5y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable5x = wx.ComboBox(page2,-1,pieces[1],(247,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable5y = wx.ComboBox(page2,-1,pieces[1],(310,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 6:',(30,180))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,180))        
        self.object6 = wx.ComboBox(page2,-1,pieces[0],(100,177),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo6,id=self.object6.GetId())
        if len(pieces)==1:
            self.variable6x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable6y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable6x = wx.ComboBox(page2,-1,pieces[1],(247,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable6y = wx.ComboBox(page2,-1,pieces[1],(310,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 7:',(30,210))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,210))        
        self.object7 = wx.ComboBox(page2,-1,pieces[0],(100,207),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo7,id=self.object7.GetId())
        if len(pieces)==1:
            self.variable7x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable7y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable7x = wx.ComboBox(page2,-1,pieces[1],(247,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable7y = wx.ComboBox(page2,-1,pieces[1],(310,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 8:',(30,240))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,240))        
        self.object8 = wx.ComboBox(page2,-1,pieces[0],(100,237),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo8,id=self.object8.GetId())
        if len(pieces)==1:
            self.variable8x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable8y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable8x = wx.ComboBox(page2,-1,pieces[1],(247,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable8y = wx.ComboBox(page2,-1,pieces[1],(310,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 9:',(30,270))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,270))        
        self.object9 = wx.ComboBox(page2,-1,pieces[0],(100,267),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo9,id=self.object9.GetId())
        if len(pieces)==1:
            self.variable9x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable9y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable9x = wx.ComboBox(page2,-1,pieces[1],(247,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable9y = wx.ComboBox(page2,-1,pieces[1],(310,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        
        wx.StaticBox(page2,-1,'Technical and style',(10,300),(380,80))
        wx.StaticText(page2,-1,'Label by:',(30,320))
        self.labelby = wx.ComboBox(page2,-1,'Object',(100,317),(90,-1),choices=['Object','Variable'],style=wx.CB_READONLY)
        
        self.style_check2 = wx.CheckBox(page2,-1,'  Use style',(200,320))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.style_check2.GetId())
        self.style_combo2 = wx.ComboBox(page2,-1,'GeoMS',(280,317),(90,-1),choices = ['GeoMS','SGeMS','Basic'],style=wx.CB_READONLY)
        self.style_combo2.Disable()
        
        self.randcolor = wx.CheckBox(page2,-1,'  Randomize colors',(30,350))

        self.plot2 = wx.Button(page2,-1,'Plot 3D scatter',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplotmultiple,id=self.plot2.GetId())
        self.cancel2 = wx.Button(page2,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel2.GetId())
        """
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onplotmultiple(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check2.GetValue()
        style = self.style_combo2.GetValue()
        p0a = self.object.GetValue()
        p0x = self.variablex.GetValue()
        p0y = self.variabley.GetValue()
        p0c = self.variablec.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        h = pympl.common_3Dscatterplot_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag)
        color = []
        variablex = []
        variabley = []
        label = []
        if frame.object_manager.object_type[p0a]=='point':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                #variablec.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='mesh':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        elif frame.object_manager.object_type[p0a]=='data':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='surf':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        
        if self.labelby.GetValue()=='Object': label.append(p0a)
        else: label.append(p0x+'  vs  '+p0y)
        if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
        else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
        if self.object2.IsEnabled():
            p0a = self.object2.GetValue()
            p0x = self.variable2x.GetValue()
            p0y = self.variable2y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object3.IsEnabled():
            p0a = self.object3.GetValue()
            p0x = self.variable3x.GetValue()
            p0y = self.variable3y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object4.IsEnabled():
            p0a = self.object4.GetValue()
            p0x = self.variable4x.GetValue()
            p0y = self.variable4y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object5.IsEnabled():
            p0a = self.object5.GetValue()
            p0x = self.variable5x.GetValue()
            p0y = self.variable5y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object6.IsEnabled():
            p0a = self.object6.GetValue()
            p0x = self.variable6x.GetValue()
            p0y = self.variable6y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object7.IsEnabled():
            p0a = self.object7.GetValue()
            p0x = self.variable7x.GetValue()
            p0y = self.variable7y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object8.IsEnabled():
            p0a = self.object8.GetValue()
            p0x = self.variable8x.GetValue()
            p0y = self.variable8y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object9.IsEnabled():
            p0a = self.object9.GetValue()
            p0x = self.variable9x.GetValue()
            p0y = self.variable9y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if sflag:
            h.do_style_multiple_scatterplot(variablex,variabley,color,label)
        else:
            h.multiple_scatterplot(variablex,variabley,color,label)
        
    def onplot(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check.GetValue()
        style = self.style_combo.GetValue()
        p1 = self.object.GetValue()
        p1x = self.variablex.GetValue()
        p1y = self.variabley.GetValue()
        p1c = self.variablec.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        cmapflag = self.colormapped.GetValue()
        cmap = self.colormap.GetValue()
        h = pympl.common_3Dscatterplot_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag,cmapflag,cmap)
        if sflag:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                
        else:
            if frame.object_manager.object_type[p1]=='point':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='surf':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='data':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def onobjectvariablex(self,event):
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        self.xlabel.SetValue(self.variablex.GetValue())
        self.title.SetValue(self.object.GetValue())
        
    def onobjectvariabley(self,event):
        self.ylabel.SetValue(self.variabley.GetValue())
        #self.title.SetValue(self.object.GetValue())
            
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        
    def onobjectcombo(self,event):
        self.variablex.Clear()
        self.variabley.Clear()
        self.variablex.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablex.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variabley.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variabley.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        
    def onnumberobjects(self,event):
        self.object2.Enable()
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable2x.Enable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        self.variable2y.Enable()
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        if self.number_of_objects.GetValue()==2:
            self.object3.Enable()
            self.variable3x.Enable()
            self.variable3y.Enable()
        elif self.number_of_objects.GetValue()==3:
            self.object3.Enable()
            self.object4.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
        elif self.number_of_objects.GetValue()==4:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
        elif self.number_of_objects.GetValue()==5:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
        elif self.number_of_objects.GetValue()==6:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
        elif self.number_of_objects.GetValue()==7:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
        elif self.number_of_objects.GetValue()==8:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.object9.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable9x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
            self.variable9y.Enable()
            
    def onobjectcombo9(self,event):
        self.variable9x.Clear()
        self.variable9x.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9x.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
        self.variable9y.Clear()
        self.variable9y.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9y.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo8(self,event):
        self.variable8x.Clear()
        self.variable8x.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8x.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
        self.variable8y.Clear()
        self.variable8y.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8y.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo7(self,event):
        self.variable7x.Clear()
        self.variable7x.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7x.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
        self.variable7y.Clear()
        self.variable7y.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7y.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo6(self,event):
        self.variable6x.Clear()
        self.variable6x.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6x.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
        self.variable6y.Clear()
        self.variable6y.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6y.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo5(self,event):
        self.variable5x.Clear()
        self.variable5x.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5x.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
        self.variable5y.Clear()
        self.variable5y.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5y.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo4(self,event):
        self.variable4x.Clear()
        self.variable4x.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4x.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
        self.variable4y.Clear()
        self.variable4y.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4y.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo3(self,event):
        self.variable3x.Clear()
        self.variable3x.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3x.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
        self.variable3y.Clear()
        self.variable3y.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3y.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo2(self,event):
        self.variable2x.Clear()
        self.variable2x.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2x.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        self.variable2y.Clear()
        self.variable2y.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2y.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
        
    def oncancel(self,event):
        self.Destroy()
        
class CTXDensitynetFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Density-plot editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        #page2 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,pieces[1],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        self.variablec.Disable()
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        
        self.matplotlib_colormaps = ['Accent','Blues','BrBG','BuGn','BuPu','Dark2',
                                     'GnBu','Greens','Greys','OrRd','Oranges','PRGn'
                                     ,'Paired','Pastel1','Pastel2','PiYG','PuBu','PuBuGn'
                                     ,'PuOr','PuRd','Purples','RdBu','RdGy','RdPu','RdYlBu'
                                     ,'RdYlGn','Reds','Set1','Set2','Set3','Spectral'
                                     ,'YlGn','YlGnBu','YlOrBr','YlOrRd','afmhot','autumn'
                                     ,'binary','bone','brg','bwr','cool','coolwarm'
                                     ,'copper','cubehelix','flag','gist_earth','gist_gray'
                                     ,'gist_heat','gist_ncar','gist_rainbow','gist_stern'
                                     ,'gist_yarg','gnuplot','gnuplot2','gray','hot'
                                     ,'hsv','jet','ocean','pink','prism','rainbow'
                                     ,'seismic','spectral','spring','summer','terrain'
                                     ,'winter']        
        
        self.colormapped = wx.CheckBox(page1,-1,' ',(20,60))
        self.colormapped.Disable()
        self.colormap = wx.ComboBox(page1,-1,'jet',(45,57),(50,-1),choices=self.matplotlib_colormaps,style=wx.CB_READONLY)
        
        wx.StaticBox(page1,-1,'Technical parameters',(10,90),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,110))
        wx.StaticText(page1,-1,'Red:',(30,140))
        wx.StaticText(page1,-1,'Green:',(30,170))
        wx.StaticText(page1,-1,'Blue:',(30,200))
        wx.StaticText(page1,-1,'Alpha:',(30,230))
        self.my_color = wx.Button(page1,-1,'Choose',(100,105),(90,-1))
        #self.my_color.Disable()
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variablex.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100,137),(90,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100,167),(90,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100,197),(90,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100,227),(90,-1),min=0,max=255,initial=appex[3])
        #self.red.Disable()
        #self.green.Disable()
        #self.blue.Disable()
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,110))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,140))
        self.ylabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,170))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,200))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variablex.GetValue(),(280,107),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,self.variabley.GetValue(),(280,137),(90,-1))
        #self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,167),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,197),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()  
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,230))        
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,260),(380,110))
        self.marginal_hist = wx.CheckBox(page1,-1,'  Marginal hist',(30,280))
        self.hist_bins = wx.SpinCtrl(page1,-1,'',(120,277),(70,-1),min=2,max=100000,initial=30)
        self.marginal_hist.Disable()
        
        wx.StaticText(page1,-1,'Marker:',(30,310))
        wx.StaticText(page1,-1,'Grid:',(30,340))
        self.marker_choice = ['Caret down','Caret left','Caret right','Caret up',
                              'Circle','Diamond','Hexagon 1','Hexagon 2','Underscore',
                              'Octagon','Pentagon','Pixel','Plus','Point','Square',
                              'Star','Thin diamond','Tick down','Tick left','Thick right',
                              'Tick up','Triangle down','Triangle left','Triangle right',
                              'Triangle up','Slash lines','X','Tri down','Tri left','Tri right',
                              'Tri up']
        self.marker = wx.ComboBox(page1,-1,'Circle',(100,307),(90,-1),choices=self.marker_choice, style=wx.CB_READONLY)
        self.marker.Disable()        
        self.size = wx.SpinCtrl(page1,-1,'',(100,337),(90,-1),min=2,max=10000,initial=50)
        
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(220,280))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(290,277),(80,-1),choices = ['GeoMS','SGeMS'],style=wx.CB_READONLY)
        self.style_combo.Disable()        
        
        self.reg_check = wx.CheckBox(page1,-1,'  Do linear regression',(220,310))        
        
        wx.StaticText(page1,-1,'DPI:',(40,410))
        self.dpi = wx.SpinCtrl(page1,-1,'',(80,407),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot density-net',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onplot(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check.GetValue()
        style = self.style_combo.GetValue()
        p1 = self.object.GetValue()
        p1x = self.variablex.GetValue()
        p1y = self.variabley.GetValue()
        p1c = self.variablec.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        cmapflag = self.colormapped.GetValue()
        cmap = self.colormap.GetValue()
        h = pympl.common_densitynet_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag,cmapflag,cmap)
        if sflag:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                
        else:
            if frame.object_manager.object_type[p1]=='point':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='surf':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='data':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def onobjectvariablex(self,event):
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        self.xlabel.SetValue(self.variablex.GetValue())
        self.title.SetValue(self.object.GetValue())
        
    def onobjectvariabley(self,event):
        self.ylabel.SetValue(self.variabley.GetValue())
        #self.title.SetValue(self.object.GetValue())
            
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        
    def onobjectcombo(self,event):
        self.variablex.Clear()
        self.variabley.Clear()
        self.variablec.Clear()
        self.variablex.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablex.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variabley.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variabley.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        
    def onnumberobjects(self,event):
        self.object2.Enable()
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable2x.Enable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        self.variable2y.Enable()
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        if self.number_of_objects.GetValue()==2:
            self.object3.Enable()
            self.variable3x.Enable()
            self.variable3y.Enable()
        elif self.number_of_objects.GetValue()==3:
            self.object3.Enable()
            self.object4.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
        elif self.number_of_objects.GetValue()==4:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
        elif self.number_of_objects.GetValue()==5:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
        elif self.number_of_objects.GetValue()==6:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
        elif self.number_of_objects.GetValue()==7:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
        elif self.number_of_objects.GetValue()==8:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.object9.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable9x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
            self.variable9y.Enable()
            
    def onobjectcombo9(self,event):
        self.variable9x.Clear()
        self.variable9x.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9x.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
        self.variable9y.Clear()
        self.variable9y.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9y.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo8(self,event):
        self.variable8x.Clear()
        self.variable8x.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8x.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
        self.variable8y.Clear()
        self.variable8y.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8y.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo7(self,event):
        self.variable7x.Clear()
        self.variable7x.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7x.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
        self.variable7y.Clear()
        self.variable7y.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7y.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo6(self,event):
        self.variable6x.Clear()
        self.variable6x.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6x.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
        self.variable6y.Clear()
        self.variable6y.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6y.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo5(self,event):
        self.variable5x.Clear()
        self.variable5x.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5x.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
        self.variable5y.Clear()
        self.variable5y.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5y.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo4(self,event):
        self.variable4x.Clear()
        self.variable4x.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4x.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
        self.variable4y.Clear()
        self.variable4y.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4y.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo3(self,event):
        self.variable3x.Clear()
        self.variable3x.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3x.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
        self.variable3y.Clear()
        self.variable3y.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3y.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo2(self,event):
        self.variable2x.Clear()
        self.variable2x.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2x.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        self.variable2y.Clear()
        self.variable2y.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2y.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
        
    def oncancel(self,event):
        self.Destroy()
        
class CTXFillplotFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Fillplot editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        #page2 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            #self.variablec = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            #self.variablec = wx.ComboBox(page1,-1,pieces[1],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        
        self.matplotlib_colormaps = ['Accent','Blues','BrBG','BuGn','BuPu','Dark2',
                                     'GnBu','Greens','Greys','OrRd','Oranges','PRGn'
                                     ,'Paired','Pastel1','Pastel2','PiYG','PuBu','PuBuGn'
                                     ,'PuOr','PuRd','Purples','RdBu','RdGy','RdPu','RdYlBu'
                                     ,'RdYlGn','Reds','Set1','Set2','Set3','Spectral'
                                     ,'YlGn','YlGnBu','YlOrBr','YlOrRd','afmhot','autumn'
                                     ,'binary','bone','brg','bwr','cool','coolwarm'
                                     ,'copper','cubehelix','flag','gist_earth','gist_gray'
                                     ,'gist_heat','gist_ncar','gist_rainbow','gist_stern'
                                     ,'gist_yarg','gnuplot','gnuplot2','gray','hot'
                                     ,'hsv','jet','ocean','pink','prism','rainbow'
                                     ,'seismic','spectral','spring','summer','terrain'
                                     ,'winter']        
        
        #self.colormapped = wx.CheckBox(page1,-1,' ',(20,60))
        #self.colormap = wx.ComboBox(page1,-1,'jet',(45,57),(50,-1),choices=self.matplotlib_colormaps,style=wx.CB_READONLY)
        
        wx.StaticBox(page1,-1,'Technical parameters',(10,90),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,110))
        wx.StaticText(page1,-1,'Red:',(30,140))
        wx.StaticText(page1,-1,'Green:',(30,170))
        wx.StaticText(page1,-1,'Blue:',(30,200))
        wx.StaticText(page1,-1,'Alpha:',(30,230))
        self.my_color = wx.Button(page1,-1,'Choose',(100,105),(90,-1))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variablex.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100-20,137),(60,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100-20,167),(60,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100-20,197),(60,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100-20,227),(60,-1),min=0,max=255,initial=appex[3])
        self.red2 = wx.SpinCtrl(page1,-1,'',(170-20,137),(60,-1),min=0,max=255,initial=appex[0])
        self.green2 = wx.SpinCtrl(page1,-1,'',(170-20,167),(60,-1),min=0,max=255,initial=appex[1])
        self.blue2 = wx.SpinCtrl(page1,-1,'',(170-20,197),(60,-1),min=0,max=255,initial=appex[2])
        self.alpha2 = wx.SpinCtrl(page1,-1,'',(170-20,227),(60,-1),min=0,max=255,initial=appex[3])
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,110))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,140))
        self.ylabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,170))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,200))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variablex.GetValue(),(280,107),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,self.variabley.GetValue(),(280,137),(90,-1))
        #self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,167),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,197),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()  
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,230))        
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,260),(380,110))
        self.marginal_hist = wx.CheckBox(page1,-1,'  Marginal hist',(30,280))
        self.hist_bins = wx.SpinCtrl(page1,-1,'',(120,277),(70,-1),min=2,max=100000,initial=30)
        self.marginal_hist.Disable()
        self.hist_bins.Disable()
        
        wx.StaticText(page1,-1,'Marker:',(30,310))
        wx.StaticText(page1,-1,'Size:',(30,340))
        """
        self.marker_choice = ['Caret down','Caret left','Caret right','Caret up',
                              'Circle','Diamond','Hexagon 1','Hexagon 2','Underscore',
                              'Octagon','Pentagon','Pixel','Plus','Point','Square',
                              'Star','Thin diamond','Tick down','Tick left','Thick right',
                              'Tick up','Triangle down','Triangle left','Triangle right',
                              'Triangle up','Slash lines','X','Tri down','Tri left','Tri right',
                              'Tri up']
        """
        self.marker_choice = ['solid','dashed','dash_dot','dotted']
        self.marker = wx.ComboBox(page1,-1,'solid',(100,307),(90,-1),choices=self.marker_choice, style=wx.CB_READONLY)
        self.size = wx.SpinCtrl(page1,-1,'',(100,337),(90,-1),min=1,max=1000,initial=1)
        self.marker.Disable()
        self.size.Disable()
        
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(220,280))
        self.style_check.Disable()
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(290,277),(80,-1),choices = ['GeoMS','SGeMS','Basic','BasicX','Sober'],style=wx.CB_READONLY)
        self.style_combo.Disable()        
        
        self.reg_check = wx.CheckBox(page1,-1,'  Do linear regression',(220,310))
        self.reg_check.Disable()        
        
        wx.StaticText(page1,-1,'DPI:',(40,410))
        self.dpi = wx.SpinCtrl(page1,-1,'',(80,407),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot lineplot',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
        
    def onplot(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        color2 = (self.red2.GetValue(),self.green2.GetValue(),self.blue2.GetValue(),self.alpha2.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check.GetValue()
        style = self.style_combo.GetValue()
        p1 = self.object.GetValue()
        p1x = self.variablex.GetValue()
        p1y = self.variabley.GetValue()
        #p1c = self.variablec.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        cmapflag = False #self.colormapped.GetValue()
        cmap = 'jet' #self.colormap.GetValue()
        h = pympl.common_fillplot_feed(bins,color,color2,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag,cmapflag,cmap)
        if sflag:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                
        else:
            if frame.object_manager.object_type[p1]=='point':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='surf':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='data':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def onobjectvariablex(self,event):
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        self.xlabel.SetValue(self.variablex.GetValue())
        self.title.SetValue(self.object.GetValue())
        
    def onobjectvariabley(self,event):
        self.ylabel.SetValue(self.variabley.GetValue())
        #self.title.SetValue(self.object.GetValue())
            
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        
    def onobjectcombo(self,event):
        self.variablex.Clear()
        self.variabley.Clear()
        self.variablex.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablex.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variabley.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variabley.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        
    def onnumberobjects(self,event):
        self.object2.Enable()
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable2x.Enable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        self.variable2y.Enable()
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        if self.number_of_objects.GetValue()==2:
            self.object3.Enable()
            self.variable3x.Enable()
            self.variable3y.Enable()
        elif self.number_of_objects.GetValue()==3:
            self.object3.Enable()
            self.object4.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
        elif self.number_of_objects.GetValue()==4:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
        elif self.number_of_objects.GetValue()==5:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
        elif self.number_of_objects.GetValue()==6:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
        elif self.number_of_objects.GetValue()==7:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
        elif self.number_of_objects.GetValue()==8:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.object9.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable9x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
            self.variable9y.Enable()
            
    def onobjectcombo9(self,event):
        self.variable9x.Clear()
        self.variable9x.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9x.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
        self.variable9y.Clear()
        self.variable9y.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9y.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo8(self,event):
        self.variable8x.Clear()
        self.variable8x.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8x.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
        self.variable8y.Clear()
        self.variable8y.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8y.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo7(self,event):
        self.variable7x.Clear()
        self.variable7x.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7x.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
        self.variable7y.Clear()
        self.variable7y.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7y.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo6(self,event):
        self.variable6x.Clear()
        self.variable6x.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6x.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
        self.variable6y.Clear()
        self.variable6y.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6y.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo5(self,event):
        self.variable5x.Clear()
        self.variable5x.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5x.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
        self.variable5y.Clear()
        self.variable5y.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5y.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo4(self,event):
        self.variable4x.Clear()
        self.variable4x.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4x.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
        self.variable4y.Clear()
        self.variable4y.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4y.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo3(self,event):
        self.variable3x.Clear()
        self.variable3x.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3x.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
        self.variable3y.Clear()
        self.variable3y.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3y.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo2(self,event):
        self.variable2x.Clear()
        self.variable2x.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2x.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        self.variable2y.Clear()
        self.variable2y.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2y.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
        
    def oncancel(self,event):
        self.Destroy()
        
class CTXBubblenetFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Bubble-net editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        #page2 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,pieces[1],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.variablec.Disable()
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        
        self.matplotlib_colormaps = ['Accent','Blues','BrBG','BuGn','BuPu','Dark2',
                                     'GnBu','Greens','Greys','OrRd','Oranges','PRGn'
                                     ,'Paired','Pastel1','Pastel2','PiYG','PuBu','PuBuGn'
                                     ,'PuOr','PuRd','Purples','RdBu','RdGy','RdPu','RdYlBu'
                                     ,'RdYlGn','Reds','Set1','Set2','Set3','Spectral'
                                     ,'YlGn','YlGnBu','YlOrBr','YlOrRd','afmhot','autumn'
                                     ,'binary','bone','brg','bwr','cool','coolwarm'
                                     ,'copper','cubehelix','flag','gist_earth','gist_gray'
                                     ,'gist_heat','gist_ncar','gist_rainbow','gist_stern'
                                     ,'gist_yarg','gnuplot','gnuplot2','gray','hot'
                                     ,'hsv','jet','ocean','pink','prism','rainbow'
                                     ,'seismic','spectral','spring','summer','terrain'
                                     ,'winter']        
        
        self.colormapped = wx.CheckBox(page1,-1,' ',(20,60))
        #self.colormapped.Disable()
        self.colormap = wx.ComboBox(page1,-1,'jet',(45,57),(50,-1),choices=self.matplotlib_colormaps,style=wx.CB_READONLY)
        
        wx.StaticBox(page1,-1,'Technical parameters',(10,90),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,110))
        wx.StaticText(page1,-1,'Red:',(30,140))
        wx.StaticText(page1,-1,'Green:',(30,170))
        wx.StaticText(page1,-1,'Blue:',(30,200))
        wx.StaticText(page1,-1,'Alpha:',(30,230))
        self.my_color = wx.Button(page1,-1,'Choose',(100,105),(90,-1))
        #self.my_color.Disable()
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variablex.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100,137),(90,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100,167),(90,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100,197),(90,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100,227),(90,-1),min=0,max=255,initial=appex[3])
        #self.red.Disable()
        #self.green.Disable()
        #self.blue.Disable()
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,110))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,140))
        self.ylabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,170))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,200))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variablex.GetValue(),(280,107),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,self.variabley.GetValue(),(280,137),(90,-1))
        #self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,167),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,197),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()  
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,230))        
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,260),(380,110))
        self.marginal_hist = wx.CheckBox(page1,-1,'  Marginal hist',(30,280))
        self.hist_bins = wx.SpinCtrl(page1,-1,'',(120,277),(70,-1),min=2,max=100000,initial=30)        
        
        wx.StaticText(page1,-1,'Marker:',(30,310))
        wx.StaticText(page1,-1,'min/max size:',(30,340))
        self.marker_choice = ['Caret down','Caret left','Caret right','Caret up',
                              'Circle','Diamond','Hexagon 1','Hexagon 2','Underscore',
                              'Octagon','Pentagon','Pixel','Plus','Point','Square',
                              'Star','Thin diamond','Tick down','Tick left','Thick right',
                              'Tick up','Triangle down','Triangle left','Triangle right',
                              'Triangle up','Slash lines','X','Tri down','Tri left','Tri right',
                              'Tri up']
        self.marker = wx.ComboBox(page1,-1,'Circle',(100,307),(90,-1),choices=self.marker_choice, style=wx.CB_READONLY)
        self.marker.Disable()        
        self.size = wx.SpinCtrl(page1,-1,'',(100,337),(90,-1),min=2,max=10000,initial=50)
        self.size2 = wx.SpinCtrl(page1,-1,'',(200,337),(90,-1),min=2,max=10000,initial=500)
        
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(220,280))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(290,277),(80,-1),choices = ['GeoMS','SGeMS'],style=wx.CB_READONLY)
        self.style_combo.Disable()        
        
        self.reg_check = wx.CheckBox(page1,-1,'  Do linear regression',(220,310))        
        
        wx.StaticText(page1,-1,'DPI:',(40,410))
        self.dpi = wx.SpinCtrl(page1,-1,'',(80,407),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot bubble-plot',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onplotmultiple(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check2.GetValue()
        style = self.style_combo2.GetValue()
        p0a = self.object.GetValue()
        p0x = self.variablex.GetValue()
        p0y = self.variabley.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        h = pympl.common_scatterplot_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag)
        color = []
        variablex = []
        variabley = []
        label = []
        if frame.object_manager.object_type[p0a]=='point':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='mesh':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        elif frame.object_manager.object_type[p0a]=='data':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='surf':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        
        if self.labelby.GetValue()=='Object': label.append(p0a)
        else: label.append(p0x+'  vs  '+p0y)
        if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
        else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
        if self.object2.IsEnabled():
            p0a = self.object2.GetValue()
            p0x = self.variable2x.GetValue()
            p0y = self.variable2y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object3.IsEnabled():
            p0a = self.object3.GetValue()
            p0x = self.variable3x.GetValue()
            p0y = self.variable3y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object4.IsEnabled():
            p0a = self.object4.GetValue()
            p0x = self.variable4x.GetValue()
            p0y = self.variable4y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object5.IsEnabled():
            p0a = self.object5.GetValue()
            p0x = self.variable5x.GetValue()
            p0y = self.variable5y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object6.IsEnabled():
            p0a = self.object6.GetValue()
            p0x = self.variable6x.GetValue()
            p0y = self.variable6y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object7.IsEnabled():
            p0a = self.object7.GetValue()
            p0x = self.variable7x.GetValue()
            p0y = self.variable7y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object8.IsEnabled():
            p0a = self.object8.GetValue()
            p0x = self.variable8x.GetValue()
            p0y = self.variable8y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object9.IsEnabled():
            p0a = self.object9.GetValue()
            p0x = self.variable9x.GetValue()
            p0y = self.variable9y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if sflag:
            h.do_style_multiple_scatterplot(variablex,variabley,color,label)
        else:
            h.multiple_scatterplot(variablex,variabley,color,label)
        
    def onplot(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check.GetValue()
        style = self.style_combo.GetValue()
        p1 = self.object.GetValue()
        p1x = self.variablex.GetValue()
        p1y = self.variabley.GetValue()
        p1c = self.variablec.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        size2  = self.size2.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        cmapflag = self.colormapped.GetValue()
        cmap = self.colormap.GetValue()
        h = pympl.common_bubblenet_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,size2,hist_flag,rflag,cmapflag,cmap)
        if sflag:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                
        else:
            if frame.object_manager.object_type[p1]=='point':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='data':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def onobjectvariablex(self,event):
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        self.xlabel.SetValue(self.variablex.GetValue())
        self.title.SetValue(self.object.GetValue())
        
    def onobjectvariabley(self,event):
        self.ylabel.SetValue(self.variabley.GetValue())
        #self.title.SetValue(self.object.GetValue())
            
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        
    def onobjectcombo(self,event):
        self.variablex.Clear()
        self.variabley.Clear()
        self.variablec.Clear()
        self.variablex.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablex.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variabley.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variabley.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variablec.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablec.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        
    def onnumberobjects(self,event):
        self.object2.Enable()
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable2x.Enable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        self.variable2y.Enable()
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        if self.number_of_objects.GetValue()==2:
            self.object3.Enable()
            self.variable3x.Enable()
            self.variable3y.Enable()
        elif self.number_of_objects.GetValue()==3:
            self.object3.Enable()
            self.object4.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
        elif self.number_of_objects.GetValue()==4:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
        elif self.number_of_objects.GetValue()==5:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
        elif self.number_of_objects.GetValue()==6:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
        elif self.number_of_objects.GetValue()==7:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
        elif self.number_of_objects.GetValue()==8:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.object9.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable9x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
            self.variable9y.Enable()
            
    def onobjectcombo9(self,event):
        self.variable9x.Clear()
        self.variable9x.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9x.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
        self.variable9y.Clear()
        self.variable9y.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9y.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo8(self,event):
        self.variable8x.Clear()
        self.variable8x.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8x.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
        self.variable8y.Clear()
        self.variable8y.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8y.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo7(self,event):
        self.variable7x.Clear()
        self.variable7x.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7x.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
        self.variable7y.Clear()
        self.variable7y.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7y.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo6(self,event):
        self.variable6x.Clear()
        self.variable6x.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6x.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
        self.variable6y.Clear()
        self.variable6y.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6y.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo5(self,event):
        self.variable5x.Clear()
        self.variable5x.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5x.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
        self.variable5y.Clear()
        self.variable5y.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5y.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo4(self,event):
        self.variable4x.Clear()
        self.variable4x.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4x.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
        self.variable4y.Clear()
        self.variable4y.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4y.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo3(self,event):
        self.variable3x.Clear()
        self.variable3x.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3x.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
        self.variable3y.Clear()
        self.variable3y.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3y.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo2(self,event):
        self.variable2x.Clear()
        self.variable2x.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2x.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        self.variable2y.Clear()
        self.variable2y.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2y.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
        
    def oncancel(self,event):
        self.Destroy()
        
class CTXBubbleplotFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Bubble-plot editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        #page2 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,pieces[1],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.variablec.Disable()
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        
        self.matplotlib_colormaps = ['Accent','Blues','BrBG','BuGn','BuPu','Dark2',
                                     'GnBu','Greens','Greys','OrRd','Oranges','PRGn'
                                     ,'Paired','Pastel1','Pastel2','PiYG','PuBu','PuBuGn'
                                     ,'PuOr','PuRd','Purples','RdBu','RdGy','RdPu','RdYlBu'
                                     ,'RdYlGn','Reds','Set1','Set2','Set3','Spectral'
                                     ,'YlGn','YlGnBu','YlOrBr','YlOrRd','afmhot','autumn'
                                     ,'binary','bone','brg','bwr','cool','coolwarm'
                                     ,'copper','cubehelix','flag','gist_earth','gist_gray'
                                     ,'gist_heat','gist_ncar','gist_rainbow','gist_stern'
                                     ,'gist_yarg','gnuplot','gnuplot2','gray','hot'
                                     ,'hsv','jet','ocean','pink','prism','rainbow'
                                     ,'seismic','spectral','spring','summer','terrain'
                                     ,'winter']        
        
        self.colormapped = wx.CheckBox(page1,-1,' ',(20,60))
        #self.colormapped.Disable()
        self.colormap = wx.ComboBox(page1,-1,'jet',(45,57),(50,-1),choices=self.matplotlib_colormaps,style=wx.CB_READONLY)
        
        wx.StaticBox(page1,-1,'Technical parameters',(10,90),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,110))
        wx.StaticText(page1,-1,'Red:',(30,140))
        wx.StaticText(page1,-1,'Green:',(30,170))
        wx.StaticText(page1,-1,'Blue:',(30,200))
        wx.StaticText(page1,-1,'Alpha:',(30,230))
        self.my_color = wx.Button(page1,-1,'Choose',(100,105),(90,-1))
        #self.my_color.Disable()
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variablex.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100,137),(90,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100,167),(90,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100,197),(90,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100,227),(90,-1),min=0,max=255,initial=appex[3])
        #self.red.Disable()
        #self.green.Disable()
        #self.blue.Disable()
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,110))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,140))
        self.ylabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,170))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,200))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variablex.GetValue(),(280,107),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,self.variabley.GetValue(),(280,137),(90,-1))
        #self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,167),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,197),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()  
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,230))        
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,260),(380,110))
        self.marginal_hist = wx.CheckBox(page1,-1,'  Marginal hist',(30,280))
        self.hist_bins = wx.SpinCtrl(page1,-1,'',(120,277),(70,-1),min=2,max=100000,initial=30)        
        
        wx.StaticText(page1,-1,'Marker:',(30,310))
        wx.StaticText(page1,-1,'min/max size:',(30,340))
        self.marker_choice = ['Caret down','Caret left','Caret right','Caret up',
                              'Circle','Diamond','Hexagon 1','Hexagon 2','Underscore',
                              'Octagon','Pentagon','Pixel','Plus','Point','Square',
                              'Star','Thin diamond','Tick down','Tick left','Thick right',
                              'Tick up','Triangle down','Triangle left','Triangle right',
                              'Triangle up','Slash lines','X','Tri down','Tri left','Tri right',
                              'Tri up']
        self.marker = wx.ComboBox(page1,-1,'Circle',(100,307),(90,-1),choices=self.marker_choice, style=wx.CB_READONLY)
        self.marker.Disable()        
        self.size = wx.SpinCtrl(page1,-1,'',(100,337),(90,-1),min=2,max=10000,initial=50)
        self.size2 = wx.SpinCtrl(page1,-1,'',(200,337),(90,-1),min=2,max=10000,initial=500)
        
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(220,280))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(290,277),(80,-1),choices = ['GeoMS','SGeMS'],style=wx.CB_READONLY)
        self.style_combo.Disable()        
        
        self.reg_check = wx.CheckBox(page1,-1,'  Do linear regression',(220,310))        
        
        wx.StaticText(page1,-1,'DPI:',(40,410))
        self.dpi = wx.SpinCtrl(page1,-1,'',(80,407),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot bubble-plot',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onplotmultiple(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check2.GetValue()
        style = self.style_combo2.GetValue()
        p0a = self.object.GetValue()
        p0x = self.variablex.GetValue()
        p0y = self.variabley.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        h = pympl.common_scatterplot_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag)
        color = []
        variablex = []
        variabley = []
        label = []
        if frame.object_manager.object_type[p0a]=='point':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='mesh':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        elif frame.object_manager.object_type[p0a]=='data':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='surf':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        
        if self.labelby.GetValue()=='Object': label.append(p0a)
        else: label.append(p0x+'  vs  '+p0y)
        if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
        else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
        if self.object2.IsEnabled():
            p0a = self.object2.GetValue()
            p0x = self.variable2x.GetValue()
            p0y = self.variable2y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object3.IsEnabled():
            p0a = self.object3.GetValue()
            p0x = self.variable3x.GetValue()
            p0y = self.variable3y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object4.IsEnabled():
            p0a = self.object4.GetValue()
            p0x = self.variable4x.GetValue()
            p0y = self.variable4y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object5.IsEnabled():
            p0a = self.object5.GetValue()
            p0x = self.variable5x.GetValue()
            p0y = self.variable5y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object6.IsEnabled():
            p0a = self.object6.GetValue()
            p0x = self.variable6x.GetValue()
            p0y = self.variable6y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object7.IsEnabled():
            p0a = self.object7.GetValue()
            p0x = self.variable7x.GetValue()
            p0y = self.variable7y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object8.IsEnabled():
            p0a = self.object8.GetValue()
            p0x = self.variable8x.GetValue()
            p0y = self.variable8y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object9.IsEnabled():
            p0a = self.object9.GetValue()
            p0x = self.variable9x.GetValue()
            p0y = self.variable9y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if sflag:
            h.do_style_multiple_scatterplot(variablex,variabley,color,label)
        else:
            h.multiple_scatterplot(variablex,variabley,color,label)
        
    def onplot(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check.GetValue()
        style = self.style_combo.GetValue()
        p1 = self.object.GetValue()
        p1x = self.variablex.GetValue()
        p1y = self.variabley.GetValue()
        p1c = self.variablec.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        size2  = self.size2.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        cmapflag = self.colormapped.GetValue()
        cmap = self.colormap.GetValue()
        h = pympl.common_bubbleplot_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,size2,hist_flag,rflag,cmapflag,cmap)
        if sflag:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                
        else:
            if frame.object_manager.object_type[p1]=='point':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten(),frame.object_manager.object_list[p1].variable[p1c].data)
            elif frame.object_manager.object_type[p1]=='data':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def onobjectvariablex(self,event):
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        self.xlabel.SetValue(self.variablex.GetValue())
        self.title.SetValue(self.object.GetValue())
        
    def onobjectvariabley(self,event):
        self.ylabel.SetValue(self.variabley.GetValue())
        #self.title.SetValue(self.object.GetValue())
            
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        
    def onobjectcombo(self,event):
        self.variablex.Clear()
        self.variabley.Clear()
        self.variablec.Clear()
        self.variablex.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablex.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variabley.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variabley.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variablec.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablec.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        
    def onnumberobjects(self,event):
        self.object2.Enable()
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable2x.Enable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        self.variable2y.Enable()
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        if self.number_of_objects.GetValue()==2:
            self.object3.Enable()
            self.variable3x.Enable()
            self.variable3y.Enable()
        elif self.number_of_objects.GetValue()==3:
            self.object3.Enable()
            self.object4.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
        elif self.number_of_objects.GetValue()==4:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
        elif self.number_of_objects.GetValue()==5:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
        elif self.number_of_objects.GetValue()==6:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
        elif self.number_of_objects.GetValue()==7:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
        elif self.number_of_objects.GetValue()==8:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.object9.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable9x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
            self.variable9y.Enable()
            
    def onobjectcombo9(self,event):
        self.variable9x.Clear()
        self.variable9x.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9x.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
        self.variable9y.Clear()
        self.variable9y.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9y.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo8(self,event):
        self.variable8x.Clear()
        self.variable8x.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8x.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
        self.variable8y.Clear()
        self.variable8y.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8y.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo7(self,event):
        self.variable7x.Clear()
        self.variable7x.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7x.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
        self.variable7y.Clear()
        self.variable7y.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7y.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo6(self,event):
        self.variable6x.Clear()
        self.variable6x.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6x.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
        self.variable6y.Clear()
        self.variable6y.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6y.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo5(self,event):
        self.variable5x.Clear()
        self.variable5x.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5x.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
        self.variable5y.Clear()
        self.variable5y.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5y.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo4(self,event):
        self.variable4x.Clear()
        self.variable4x.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4x.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
        self.variable4y.Clear()
        self.variable4y.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4y.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo3(self,event):
        self.variable3x.Clear()
        self.variable3x.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3x.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
        self.variable3y.Clear()
        self.variable3y.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3y.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo2(self,event):
        self.variable2x.Clear()
        self.variable2x.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2x.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        self.variable2y.Clear()
        self.variable2y.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2y.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
        
    def oncancel(self,event):
        self.Destroy()
        
class CTXDensityplotFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Density-plot editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        #page2 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,pieces[1],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        self.variablec.Disable()
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        
        self.matplotlib_colormaps = ['Accent','Blues','BrBG','BuGn','BuPu','Dark2',
                                     'GnBu','Greens','Greys','OrRd','Oranges','PRGn'
                                     ,'Paired','Pastel1','Pastel2','PiYG','PuBu','PuBuGn'
                                     ,'PuOr','PuRd','Purples','RdBu','RdGy','RdPu','RdYlBu'
                                     ,'RdYlGn','Reds','Set1','Set2','Set3','Spectral'
                                     ,'YlGn','YlGnBu','YlOrBr','YlOrRd','afmhot','autumn'
                                     ,'binary','bone','brg','bwr','cool','coolwarm'
                                     ,'copper','cubehelix','flag','gist_earth','gist_gray'
                                     ,'gist_heat','gist_ncar','gist_rainbow','gist_stern'
                                     ,'gist_yarg','gnuplot','gnuplot2','gray','hot'
                                     ,'hsv','jet','ocean','pink','prism','rainbow'
                                     ,'seismic','spectral','spring','summer','terrain'
                                     ,'winter']        
        
        self.colormapped = wx.CheckBox(page1,-1,' ',(20,60))
        self.colormapped.Disable()
        self.colormap = wx.ComboBox(page1,-1,'jet',(45,57),(50,-1),choices=self.matplotlib_colormaps,style=wx.CB_READONLY)
        
        wx.StaticBox(page1,-1,'Technical parameters',(10,90),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,110))
        wx.StaticText(page1,-1,'Red:',(30,140))
        wx.StaticText(page1,-1,'Green:',(30,170))
        wx.StaticText(page1,-1,'Blue:',(30,200))
        wx.StaticText(page1,-1,'Alpha:',(30,230))
        self.my_color = wx.Button(page1,-1,'Choose',(100,105),(90,-1))
        #self.my_color.Disable()
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variablex.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100,137),(90,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100,167),(90,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100,197),(90,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100,227),(90,-1),min=0,max=255,initial=appex[3])
        #self.red.Disable()
        #self.green.Disable()
        #self.blue.Disable()
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,110))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,140))
        self.ylabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,170))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,200))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variablex.GetValue(),(280,107),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,self.variabley.GetValue(),(280,137),(90,-1))
        #self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,167),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,197),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()  
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,230))        
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,260),(380,110))
        self.marginal_hist = wx.CheckBox(page1,-1,'  Marginal hist',(30,280))
        self.hist_bins = wx.SpinCtrl(page1,-1,'',(120,277),(70,-1),min=2,max=100000,initial=30)        
        
        wx.StaticText(page1,-1,'Marker:',(30,310))
        wx.StaticText(page1,-1,'Grid:',(30,340))
        self.marker_choice = ['Caret down','Caret left','Caret right','Caret up',
                              'Circle','Diamond','Hexagon 1','Hexagon 2','Underscore',
                              'Octagon','Pentagon','Pixel','Plus','Point','Square',
                              'Star','Thin diamond','Tick down','Tick left','Thick right',
                              'Tick up','Triangle down','Triangle left','Triangle right',
                              'Triangle up','Slash lines','X','Tri down','Tri left','Tri right',
                              'Tri up']
        self.marker = wx.ComboBox(page1,-1,'Circle',(100,307),(90,-1),choices=self.marker_choice, style=wx.CB_READONLY)
        self.marker.Disable()        
        self.size = wx.SpinCtrl(page1,-1,'',(100,337),(90,-1),min=2,max=10000,initial=50)
        
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(220,280))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(290,277),(80,-1),choices = ['GeoMS','SGeMS'],style=wx.CB_READONLY)
        self.style_combo.Disable()        
        
        self.reg_check = wx.CheckBox(page1,-1,'  Do linear regression',(220,310))        
        
        wx.StaticText(page1,-1,'DPI:',(40,410))
        self.dpi = wx.SpinCtrl(page1,-1,'',(80,407),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot density-plot',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onplotmultiple(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check2.GetValue()
        style = self.style_combo2.GetValue()
        p0a = self.object.GetValue()
        p0x = self.variablex.GetValue()
        p0y = self.variabley.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        h = pympl.common_scatterplot_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag)
        color = []
        variablex = []
        variabley = []
        label = []
        if frame.object_manager.object_type[p0a]=='point':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='mesh':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        elif frame.object_manager.object_type[p0a]=='data':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='surf':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        
        if self.labelby.GetValue()=='Object': label.append(p0a)
        else: label.append(p0x+'  vs  '+p0y)
        if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
        else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
        if self.object2.IsEnabled():
            p0a = self.object2.GetValue()
            p0x = self.variable2x.GetValue()
            p0y = self.variable2y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object3.IsEnabled():
            p0a = self.object3.GetValue()
            p0x = self.variable3x.GetValue()
            p0y = self.variable3y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object4.IsEnabled():
            p0a = self.object4.GetValue()
            p0x = self.variable4x.GetValue()
            p0y = self.variable4y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object5.IsEnabled():
            p0a = self.object5.GetValue()
            p0x = self.variable5x.GetValue()
            p0y = self.variable5y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object6.IsEnabled():
            p0a = self.object6.GetValue()
            p0x = self.variable6x.GetValue()
            p0y = self.variable6y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object7.IsEnabled():
            p0a = self.object7.GetValue()
            p0x = self.variable7x.GetValue()
            p0y = self.variable7y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object8.IsEnabled():
            p0a = self.object8.GetValue()
            p0x = self.variable8x.GetValue()
            p0y = self.variable8y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object9.IsEnabled():
            p0a = self.object9.GetValue()
            p0x = self.variable9x.GetValue()
            p0y = self.variable9y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if sflag:
            h.do_style_multiple_scatterplot(variablex,variabley,color,label)
        else:
            h.multiple_scatterplot(variablex,variabley,color,label)
        
    def onplot(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check.GetValue()
        style = self.style_combo.GetValue()
        p1 = self.object.GetValue()
        p1x = self.variablex.GetValue()
        p1y = self.variabley.GetValue()
        p1c = self.variablec.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        cmapflag = self.colormapped.GetValue()
        cmap = self.colormap.GetValue()
        h = pympl.common_densityplot_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag,cmapflag,cmap)
        if sflag:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                
        else:
            if frame.object_manager.object_type[p1]=='point':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='surf':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='data':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def onobjectvariablex(self,event):
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        self.xlabel.SetValue(self.variablex.GetValue())
        self.title.SetValue(self.object.GetValue())
        
    def onobjectvariabley(self,event):
        self.ylabel.SetValue(self.variabley.GetValue())
        #self.title.SetValue(self.object.GetValue())
            
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        
    def onobjectcombo(self,event):
        self.variablex.Clear()
        self.variabley.Clear()
        self.variablex.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablex.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variabley.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variabley.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        
    def onnumberobjects(self,event):
        self.object2.Enable()
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable2x.Enable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        self.variable2y.Enable()
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        if self.number_of_objects.GetValue()==2:
            self.object3.Enable()
            self.variable3x.Enable()
            self.variable3y.Enable()
        elif self.number_of_objects.GetValue()==3:
            self.object3.Enable()
            self.object4.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
        elif self.number_of_objects.GetValue()==4:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
        elif self.number_of_objects.GetValue()==5:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
        elif self.number_of_objects.GetValue()==6:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
        elif self.number_of_objects.GetValue()==7:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
        elif self.number_of_objects.GetValue()==8:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.object9.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable9x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
            self.variable9y.Enable()
            
    def onobjectcombo9(self,event):
        self.variable9x.Clear()
        self.variable9x.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9x.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
        self.variable9y.Clear()
        self.variable9y.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9y.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo8(self,event):
        self.variable8x.Clear()
        self.variable8x.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8x.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
        self.variable8y.Clear()
        self.variable8y.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8y.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo7(self,event):
        self.variable7x.Clear()
        self.variable7x.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7x.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
        self.variable7y.Clear()
        self.variable7y.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7y.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo6(self,event):
        self.variable6x.Clear()
        self.variable6x.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6x.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
        self.variable6y.Clear()
        self.variable6y.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6y.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo5(self,event):
        self.variable5x.Clear()
        self.variable5x.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5x.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
        self.variable5y.Clear()
        self.variable5y.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5y.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo4(self,event):
        self.variable4x.Clear()
        self.variable4x.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4x.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
        self.variable4y.Clear()
        self.variable4y.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4y.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo3(self,event):
        self.variable3x.Clear()
        self.variable3x.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3x.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
        self.variable3y.Clear()
        self.variable3y.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3y.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo2(self,event):
        self.variable2x.Clear()
        self.variable2x.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2x.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        self.variable2y.Clear()
        self.variable2y.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2y.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
        
    def oncancel(self,event):
        self.Destroy()
        
class CTXStereonetFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Stereonet editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        page2 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,pieces[1],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        
        self.matplotlib_colormaps = ['Accent','Blues','BrBG','BuGn','BuPu','Dark2',
                                     'GnBu','Greens','Greys','OrRd','Oranges','PRGn'
                                     ,'Paired','Pastel1','Pastel2','PiYG','PuBu','PuBuGn'
                                     ,'PuOr','PuRd','Purples','RdBu','RdGy','RdPu','RdYlBu'
                                     ,'RdYlGn','Reds','Set1','Set2','Set3','Spectral'
                                     ,'YlGn','YlGnBu','YlOrBr','YlOrRd','afmhot','autumn'
                                     ,'binary','bone','brg','bwr','cool','coolwarm'
                                     ,'copper','cubehelix','flag','gist_earth','gist_gray'
                                     ,'gist_heat','gist_ncar','gist_rainbow','gist_stern'
                                     ,'gist_yarg','gnuplot','gnuplot2','gray','hot'
                                     ,'hsv','jet','ocean','pink','prism','rainbow'
                                     ,'seismic','spectral','spring','summer','terrain'
                                     ,'winter']        
        
        self.colormapped = wx.CheckBox(page1,-1,' ',(20,60))
        self.colormap = wx.ComboBox(page1,-1,'jet',(45,57),(50,-1),choices=self.matplotlib_colormaps,style=wx.CB_READONLY)
        
        wx.StaticBox(page1,-1,'Technical parameters',(10,90),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,110))
        wx.StaticText(page1,-1,'Red:',(30,140))
        wx.StaticText(page1,-1,'Green:',(30,170))
        wx.StaticText(page1,-1,'Blue:',(30,200))
        wx.StaticText(page1,-1,'Alpha:',(30,230))
        self.my_color = wx.Button(page1,-1,'Choose',(100,105),(90,-1))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variablex.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100,137),(90,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100,167),(90,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100,197),(90,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100,227),(90,-1),min=0,max=255,initial=appex[3])
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,110))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,140))
        self.ylabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,170))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,200))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variablex.GetValue(),(280,107),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,self.variabley.GetValue(),(280,137),(90,-1))
        #self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,167),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,197),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()  
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,230))        
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,260),(380,110))
        self.marginal_hist = wx.CheckBox(page1,-1,'  Marginal hist',(30,280))
        self.hist_bins = wx.SpinCtrl(page1,-1,'',(120,277),(70,-1),min=2,max=100000,initial=30)        
        self.marginal_hist.Disable()
        self.hist_bins.Disable()
        wx.StaticText(page1,-1,'Marker:',(30,310))
        wx.StaticText(page1,-1,'Size:',(30,340))
        self.marker_choice = ['Caret down','Caret left','Caret right','Caret up',
                              'Circle','Diamond','Hexagon 1','Hexagon 2','Underscore',
                              'Octagon','Pentagon','Pixel','Plus','Point','Square',
                              'Star','Thin diamond','Tick down','Tick left','Thick right',
                              'Tick up','Triangle down','Triangle left','Triangle right',
                              'Triangle up','Slash lines','X','Tri down','Tri left','Tri right',
                              'Tri up']
        self.marker = wx.ComboBox(page1,-1,'Circle',(100,307),(90,-1),choices=self.marker_choice, style=wx.CB_READONLY)
        self.size = wx.SpinCtrl(page1,-1,'',(100,337),(90,-1),min=10,max=10000,initial=60)
        
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(220,280))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(290,277),(80,-1),choices = ['GeoMS','SGeMS','Basic','BasicX'],style=wx.CB_READONLY)
        self.style_combo.Disable()        
        #self.style_check.Disable()
        self.reg_check = wx.CheckBox(page1,-1,'  Do linear regression',(220,310))        
        self.reg_check.Disable()
        
        wx.StaticText(page1,-1,'DPI:',(40,410))
        self.dpi = wx.SpinCtrl(page1,-1,'',(80,407),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot stereonet',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        
        nb.AddPage(page2, "Multiple")
        wx.StaticBox(page2,-1,'Objects',(10,10),(380,290))
        wx.StaticText(page2,-1,'Number:',(30,30))
        self.number_of_objects = wx.SpinCtrl(page2,-1,'',(100,27),(90,-1),min=1,max=8,initial=1)
        self.Bind(wx.EVT_SPINCTRL,self.onnumberobjects,id=self.number_of_objects.GetId())        
        
        wx.StaticText(page2,-1,'Object 2:',(30,60))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,60))        
        self.object2 = wx.ComboBox(page2,-1,pieces[0],(100,57),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo2,id=self.object2.GetId())
        if len(pieces)==1:
            self.variable2x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable2y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable2x = wx.ComboBox(page2,-1,pieces[1],(247,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable2y = wx.ComboBox(page2,-1,pieces[1],(310,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
            
        wx.StaticText(page2,-1,'Object 3:',(30,90))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,90))        
        self.object3 = wx.ComboBox(page2,-1,pieces[0],(100,87),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo3,id=self.object3.GetId())
        if len(pieces)==1:
            self.variable3x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable3y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable3x = wx.ComboBox(page2,-1,pieces[1],(247,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable3y = wx.ComboBox(page2,-1,pieces[1],(310,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 4:',(30,120))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,120))        
        self.object4 = wx.ComboBox(page2,-1,pieces[0],(100,117),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo4,id=self.object4.GetId())
        if len(pieces)==1:
            self.variable4x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable4y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable4x = wx.ComboBox(page2,-1,pieces[1],(247,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable4y = wx.ComboBox(page2,-1,pieces[1],(310,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 5:',(30,150))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,150))        
        self.object5 = wx.ComboBox(page2,-1,pieces[0],(100,147),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo5,id=self.object5.GetId())
        if len(pieces)==1:
            self.variable5x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable5y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable5x = wx.ComboBox(page2,-1,pieces[1],(247,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable5y = wx.ComboBox(page2,-1,pieces[1],(310,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 6:',(30,180))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,180))        
        self.object6 = wx.ComboBox(page2,-1,pieces[0],(100,177),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo6,id=self.object6.GetId())
        if len(pieces)==1:
            self.variable6x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable6y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable6x = wx.ComboBox(page2,-1,pieces[1],(247,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable6y = wx.ComboBox(page2,-1,pieces[1],(310,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 7:',(30,210))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,210))        
        self.object7 = wx.ComboBox(page2,-1,pieces[0],(100,207),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo7,id=self.object7.GetId())
        if len(pieces)==1:
            self.variable7x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable7y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable7x = wx.ComboBox(page2,-1,pieces[1],(247,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable7y = wx.ComboBox(page2,-1,pieces[1],(310,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 8:',(30,240))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,240))        
        self.object8 = wx.ComboBox(page2,-1,pieces[0],(100,237),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo8,id=self.object8.GetId())
        if len(pieces)==1:
            self.variable8x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable8y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable8x = wx.ComboBox(page2,-1,pieces[1],(247,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable8y = wx.ComboBox(page2,-1,pieces[1],(310,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 9:',(30,270))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,270))        
        self.object9 = wx.ComboBox(page2,-1,pieces[0],(100,267),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo9,id=self.object9.GetId())
        if len(pieces)==1:
            self.variable9x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable9y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable9x = wx.ComboBox(page2,-1,pieces[1],(247,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable9y = wx.ComboBox(page2,-1,pieces[1],(310,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        
        wx.StaticBox(page2,-1,'Technical and style',(10,300),(380,80))
        wx.StaticText(page2,-1,'Label by:',(30,320))
        self.labelby = wx.ComboBox(page2,-1,'Object',(100,317),(90,-1),choices=['Object','Variable'],style=wx.CB_READONLY)
        
        self.style_check2 = wx.CheckBox(page2,-1,'  Use style',(200,320))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.style_check2.GetId())
        self.style_combo2 = wx.ComboBox(page2,-1,'GeoMS',(280,317),(90,-1),choices = ['GeoMS','SGeMS','Basic'],style=wx.CB_READONLY)
        self.style_combo2.Disable()
        #self.style_check2.Disable()
        
        self.randcolor = wx.CheckBox(page2,-1,'  Randomize colors',(30,350))

        self.plot2 = wx.Button(page2,-1,'Plot stereonet',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplotmultiple,id=self.plot2.GetId())
        self.cancel2 = wx.Button(page2,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel2.GetId())
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onplotmultiple(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check2.GetValue()
        style = self.style_combo2.GetValue()
        p0a = self.object.GetValue()
        p0x = self.variablex.GetValue()
        p0y = self.variabley.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        h = pympl.common_stereonet_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag)
        color = []
        variablex = []
        variabley = []
        label = []
        if frame.object_manager.object_type[p0a]=='point':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='triangle_mesh':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='mesh':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        elif frame.object_manager.object_type[p0a]=='data':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='surf':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        
        if self.labelby.GetValue()=='Object': label.append(p0a)
        else: label.append(p0x+'  vs  '+p0y)
        if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
        else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
        if self.object2.IsEnabled():
            p0a = self.object2.GetValue()
            p0x = self.variable2x.GetValue()
            p0y = self.variable2y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object3.IsEnabled():
            p0a = self.object3.GetValue()
            p0x = self.variable3x.GetValue()
            p0y = self.variable3y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object4.IsEnabled():
            p0a = self.object4.GetValue()
            p0x = self.variable4x.GetValue()
            p0y = self.variable4y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object5.IsEnabled():
            p0a = self.object5.GetValue()
            p0x = self.variable5x.GetValue()
            p0y = self.variable5y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object6.IsEnabled():
            p0a = self.object6.GetValue()
            p0x = self.variable6x.GetValue()
            p0y = self.variable6y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object7.IsEnabled():
            p0a = self.object7.GetValue()
            p0x = self.variable7x.GetValue()
            p0y = self.variable7y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object8.IsEnabled():
            p0a = self.object8.GetValue()
            p0x = self.variable8x.GetValue()
            p0y = self.variable8y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object9.IsEnabled():
            p0a = self.object9.GetValue()
            p0x = self.variable9x.GetValue()
            p0y = self.variable9y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if sflag:
            h.do_style_multiple_scatterplot(variablex,variabley,color,label)
        else:
            h.multiple_scatterplot(variablex,variabley,color,label)
        
    def onplot(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check.GetValue()
        style = self.style_combo.GetValue()
        p1 = self.object.GetValue()
        p1x = self.variablex.GetValue()
        p1y = self.variabley.GetValue()
        p1c = self.variablec.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        cmapflag = self.colormapped.GetValue()
        cmap = self.colormap.GetValue()
        h = pympl.common_stereonet_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag,cmapflag,cmap)
        if sflag:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                
        else:
            if frame.object_manager.object_type[p1]=='point':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='surf':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='data':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def onobjectvariablex(self,event):
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        self.xlabel.SetValue(self.variablex.GetValue())
        self.title.SetValue(self.object.GetValue())
        
    def onobjectvariabley(self,event):
        self.ylabel.SetValue(self.variabley.GetValue())
        #self.title.SetValue(self.object.GetValue())
            
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        
    def onobjectcombo(self,event):
        self.variablex.Clear()
        self.variabley.Clear()
        self.variablec.Clear()
        self.variablex.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablex.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variabley.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variabley.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variablec.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablec.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        
    def onnumberobjects(self,event):
        self.object2.Enable()
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable2x.Enable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        self.variable2y.Enable()
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        if self.number_of_objects.GetValue()==2:
            self.object3.Enable()
            self.variable3x.Enable()
            self.variable3y.Enable()
        elif self.number_of_objects.GetValue()==3:
            self.object3.Enable()
            self.object4.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
        elif self.number_of_objects.GetValue()==4:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
        elif self.number_of_objects.GetValue()==5:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
        elif self.number_of_objects.GetValue()==6:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
        elif self.number_of_objects.GetValue()==7:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
        elif self.number_of_objects.GetValue()==8:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.object9.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable9x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
            self.variable9y.Enable()
            
    def onobjectcombo9(self,event):
        self.variable9x.Clear()
        self.variable9x.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9x.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
        self.variable9y.Clear()
        self.variable9y.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9y.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo8(self,event):
        self.variable8x.Clear()
        self.variable8x.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8x.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
        self.variable8y.Clear()
        self.variable8y.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8y.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo7(self,event):
        self.variable7x.Clear()
        self.variable7x.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7x.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
        self.variable7y.Clear()
        self.variable7y.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7y.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo6(self,event):
        self.variable6x.Clear()
        self.variable6x.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6x.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
        self.variable6y.Clear()
        self.variable6y.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6y.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo5(self,event):
        self.variable5x.Clear()
        self.variable5x.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5x.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
        self.variable5y.Clear()
        self.variable5y.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5y.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo4(self,event):
        self.variable4x.Clear()
        self.variable4x.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4x.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
        self.variable4y.Clear()
        self.variable4y.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4y.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo3(self,event):
        self.variable3x.Clear()
        self.variable3x.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3x.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
        self.variable3y.Clear()
        self.variable3y.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3y.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo2(self,event):
        self.variable2x.Clear()
        self.variable2x.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2x.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        self.variable2y.Clear()
        self.variable2y.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2y.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
        
    def oncancel(self,event):
        self.Destroy()
        
class CTXLineplotFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Lineplot editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        page2 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            #self.variablec = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            #self.variablec = wx.ComboBox(page1,-1,pieces[1],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        
        self.matplotlib_colormaps = ['Accent','Blues','BrBG','BuGn','BuPu','Dark2',
                                     'GnBu','Greens','Greys','OrRd','Oranges','PRGn'
                                     ,'Paired','Pastel1','Pastel2','PiYG','PuBu','PuBuGn'
                                     ,'PuOr','PuRd','Purples','RdBu','RdGy','RdPu','RdYlBu'
                                     ,'RdYlGn','Reds','Set1','Set2','Set3','Spectral'
                                     ,'YlGn','YlGnBu','YlOrBr','YlOrRd','afmhot','autumn'
                                     ,'binary','bone','brg','bwr','cool','coolwarm'
                                     ,'copper','cubehelix','flag','gist_earth','gist_gray'
                                     ,'gist_heat','gist_ncar','gist_rainbow','gist_stern'
                                     ,'gist_yarg','gnuplot','gnuplot2','gray','hot'
                                     ,'hsv','jet','ocean','pink','prism','rainbow'
                                     ,'seismic','spectral','spring','summer','terrain'
                                     ,'winter']        
        
        #self.colormapped = wx.CheckBox(page1,-1,' ',(20,60))
        #self.colormap = wx.ComboBox(page1,-1,'jet',(45,57),(50,-1),choices=self.matplotlib_colormaps,style=wx.CB_READONLY)
        
        wx.StaticBox(page1,-1,'Technical parameters',(10,90),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,110))
        wx.StaticText(page1,-1,'Red:',(30,140))
        wx.StaticText(page1,-1,'Green:',(30,170))
        wx.StaticText(page1,-1,'Blue:',(30,200))
        wx.StaticText(page1,-1,'Alpha:',(30,230))
        self.my_color = wx.Button(page1,-1,'Choose',(100,105),(90,-1))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variablex.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100,137),(90,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100,167),(90,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100,197),(90,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100,227),(90,-1),min=0,max=255,initial=appex[3])
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,110))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,140))
        self.ylabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,170))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,200))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variablex.GetValue(),(280,107),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,self.variabley.GetValue(),(280,137),(90,-1))
        #self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,167),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,197),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()  
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,230))        
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,260),(380,110))
        self.marginal_hist = wx.CheckBox(page1,-1,'  Marginal hist',(30,280))
        self.hist_bins = wx.SpinCtrl(page1,-1,'',(120,277),(70,-1),min=2,max=100000,initial=30)
        self.marginal_hist.Disable()
        self.hist_bins.Disable()
        
        wx.StaticText(page1,-1,'Marker:',(30,310))
        wx.StaticText(page1,-1,'Size:',(30,340))
        """
        self.marker_choice = ['Caret down','Caret left','Caret right','Caret up',
                              'Circle','Diamond','Hexagon 1','Hexagon 2','Underscore',
                              'Octagon','Pentagon','Pixel','Plus','Point','Square',
                              'Star','Thin diamond','Tick down','Tick left','Thick right',
                              'Tick up','Triangle down','Triangle left','Triangle right',
                              'Triangle up','Slash lines','X','Tri down','Tri left','Tri right',
                              'Tri up']
        """
        self.marker_choice = ['solid','dashed','dash_dot','dotted']
        self.marker = wx.ComboBox(page1,-1,'solid',(100,307),(90,-1),choices=self.marker_choice, style=wx.CB_READONLY)
        self.size = wx.SpinCtrl(page1,-1,'',(100,337),(90,-1),min=1,max=1000,initial=1)
        #self.marker.Disable()
        
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(220,280))
        self.style_check.Disable()
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(290,277),(80,-1),choices = ['GeoMS','SGeMS','Basic','BasicX','Sober'],style=wx.CB_READONLY)
        self.style_combo.Disable()        
        
        self.reg_check = wx.CheckBox(page1,-1,'  Do linear regression',(220,310))
        self.reg_check.Disable()        
        
        wx.StaticText(page1,-1,'DPI:',(40,410))
        self.dpi = wx.SpinCtrl(page1,-1,'',(80,407),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot lineplot',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        
        nb.AddPage(page2, "Multiple")
        wx.StaticBox(page2,-1,'Objects',(10,10),(380,290))
        wx.StaticText(page2,-1,'Number:',(30,30))
        self.number_of_objects = wx.SpinCtrl(page2,-1,'',(100,27),(90,-1),min=1,max=8,initial=1)
        self.Bind(wx.EVT_SPINCTRL,self.onnumberobjects,id=self.number_of_objects.GetId())        
        
        wx.StaticText(page2,-1,'Object 2:',(30,60))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,60))        
        self.object2 = wx.ComboBox(page2,-1,pieces[0],(100,57),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo2,id=self.object2.GetId())
        if len(pieces)==1:
            self.variable2x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable2y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable2x = wx.ComboBox(page2,-1,pieces[1],(247,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable2y = wx.ComboBox(page2,-1,pieces[1],(310,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
            
        wx.StaticText(page2,-1,'Object 3:',(30,90))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,90))        
        self.object3 = wx.ComboBox(page2,-1,pieces[0],(100,87),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo3,id=self.object3.GetId())
        if len(pieces)==1:
            self.variable3x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable3y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable3x = wx.ComboBox(page2,-1,pieces[1],(247,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable3y = wx.ComboBox(page2,-1,pieces[1],(310,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 4:',(30,120))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,120))        
        self.object4 = wx.ComboBox(page2,-1,pieces[0],(100,117),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo4,id=self.object4.GetId())
        if len(pieces)==1:
            self.variable4x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable4y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable4x = wx.ComboBox(page2,-1,pieces[1],(247,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable4y = wx.ComboBox(page2,-1,pieces[1],(310,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 5:',(30,150))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,150))        
        self.object5 = wx.ComboBox(page2,-1,pieces[0],(100,147),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo5,id=self.object5.GetId())
        if len(pieces)==1:
            self.variable5x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable5y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable5x = wx.ComboBox(page2,-1,pieces[1],(247,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable5y = wx.ComboBox(page2,-1,pieces[1],(310,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 6:',(30,180))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,180))        
        self.object6 = wx.ComboBox(page2,-1,pieces[0],(100,177),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo6,id=self.object6.GetId())
        if len(pieces)==1:
            self.variable6x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable6y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable6x = wx.ComboBox(page2,-1,pieces[1],(247,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable6y = wx.ComboBox(page2,-1,pieces[1],(310,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 7:',(30,210))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,210))        
        self.object7 = wx.ComboBox(page2,-1,pieces[0],(100,207),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo7,id=self.object7.GetId())
        if len(pieces)==1:
            self.variable7x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable7y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable7x = wx.ComboBox(page2,-1,pieces[1],(247,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable7y = wx.ComboBox(page2,-1,pieces[1],(310,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 8:',(30,240))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,240))        
        self.object8 = wx.ComboBox(page2,-1,pieces[0],(100,237),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo8,id=self.object8.GetId())
        if len(pieces)==1:
            self.variable8x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable8y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable8x = wx.ComboBox(page2,-1,pieces[1],(247,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable8y = wx.ComboBox(page2,-1,pieces[1],(310,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 9:',(30,270))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,270))        
        self.object9 = wx.ComboBox(page2,-1,pieces[0],(100,267),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo9,id=self.object9.GetId())
        if len(pieces)==1:
            self.variable9x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable9y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable9x = wx.ComboBox(page2,-1,pieces[1],(247,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable9y = wx.ComboBox(page2,-1,pieces[1],(310,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        
        wx.StaticBox(page2,-1,'Technical and style',(10,300),(380,80))
        wx.StaticText(page2,-1,'Label by:',(30,320))
        self.labelby = wx.ComboBox(page2,-1,'Object',(100,317),(90,-1),choices=['Object','Variable'],style=wx.CB_READONLY)
        
        self.style_check2 = wx.CheckBox(page2,-1,'  Use style',(200,320))
        self.style_check2.Disable()
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.style_check2.GetId())
        self.style_combo2 = wx.ComboBox(page2,-1,'GeoMS',(280,317),(90,-1),choices = ['GeoMS','SGeMS','Basic'],style=wx.CB_READONLY)
        self.style_combo2.Disable()
        
        self.randcolor = wx.CheckBox(page2,-1,'  Randomize colors',(30,350))

        self.plot2 = wx.Button(page2,-1,'Plot lineplot',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplotmultiple,id=self.plot2.GetId())
        self.cancel2 = wx.Button(page2,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel2.GetId())
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onplotmultiple(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check2.GetValue()
        style = self.style_combo2.GetValue()
        p0a = self.object.GetValue()
        p0x = self.variablex.GetValue()
        p0y = self.variabley.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        h = pympl.common_lineplot_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag)
        color = []
        variablex = []
        variabley = []
        label = []
        if frame.object_manager.object_type[p0a]=='point':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='triangle_mesh':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='mesh':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        elif frame.object_manager.object_type[p0a]=='data':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='surf':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        
        if self.labelby.GetValue()=='Object': label.append(p0a)
        else: label.append(p0x+'  vs  '+p0y)
        if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
        else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
        if self.object2.IsEnabled():
            p0a = self.object2.GetValue()
            p0x = self.variable2x.GetValue()
            p0y = self.variable2y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object3.IsEnabled():
            p0a = self.object3.GetValue()
            p0x = self.variable3x.GetValue()
            p0y = self.variable3y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object4.IsEnabled():
            p0a = self.object4.GetValue()
            p0x = self.variable4x.GetValue()
            p0y = self.variable4y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object5.IsEnabled():
            p0a = self.object5.GetValue()
            p0x = self.variable5x.GetValue()
            p0y = self.variable5y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object6.IsEnabled():
            p0a = self.object6.GetValue()
            p0x = self.variable6x.GetValue()
            p0y = self.variable6y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object7.IsEnabled():
            p0a = self.object7.GetValue()
            p0x = self.variable7x.GetValue()
            p0y = self.variable7y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object8.IsEnabled():
            p0a = self.object8.GetValue()
            p0x = self.variable8x.GetValue()
            p0y = self.variable8y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object9.IsEnabled():
            p0a = self.object9.GetValue()
            p0x = self.variable9x.GetValue()
            p0y = self.variable9y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if sflag:
            h.do_style_multiple_scatterplot(variablex,variabley,color,label)
        else:
            h.multiple_scatterplot(variablex,variabley,color,label)
        
    def onplot(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check.GetValue()
        style = self.style_combo.GetValue()
        p1 = self.object.GetValue()
        p1x = self.variablex.GetValue()
        p1y = self.variabley.GetValue()
        #p1c = self.variablec.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        cmapflag = False #self.colormapped.GetValue()
        cmap = 'jet' #self.colormap.GetValue()
        h = pympl.common_lineplot_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag,cmapflag,cmap)
        if sflag:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                
        else:
            if frame.object_manager.object_type[p1]=='point':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='surf':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='data':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def onobjectvariablex(self,event):
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        self.xlabel.SetValue(self.variablex.GetValue())
        self.title.SetValue(self.object.GetValue())
        
    def onobjectvariabley(self,event):
        self.ylabel.SetValue(self.variabley.GetValue())
        #self.title.SetValue(self.object.GetValue())
            
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        
    def onobjectcombo(self,event):
        self.variablex.Clear()
        self.variabley.Clear()
        self.variablex.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablex.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variabley.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variabley.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        
    def onnumberobjects(self,event):
        self.object2.Enable()
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable2x.Enable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        self.variable2y.Enable()
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        if self.number_of_objects.GetValue()==2:
            self.object3.Enable()
            self.variable3x.Enable()
            self.variable3y.Enable()
        elif self.number_of_objects.GetValue()==3:
            self.object3.Enable()
            self.object4.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
        elif self.number_of_objects.GetValue()==4:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
        elif self.number_of_objects.GetValue()==5:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
        elif self.number_of_objects.GetValue()==6:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
        elif self.number_of_objects.GetValue()==7:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
        elif self.number_of_objects.GetValue()==8:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.object9.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable9x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
            self.variable9y.Enable()
            
    def onobjectcombo9(self,event):
        self.variable9x.Clear()
        self.variable9x.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9x.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
        self.variable9y.Clear()
        self.variable9y.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9y.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo8(self,event):
        self.variable8x.Clear()
        self.variable8x.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8x.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
        self.variable8y.Clear()
        self.variable8y.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8y.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo7(self,event):
        self.variable7x.Clear()
        self.variable7x.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7x.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
        self.variable7y.Clear()
        self.variable7y.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7y.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo6(self,event):
        self.variable6x.Clear()
        self.variable6x.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6x.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
        self.variable6y.Clear()
        self.variable6y.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6y.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo5(self,event):
        self.variable5x.Clear()
        self.variable5x.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5x.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
        self.variable5y.Clear()
        self.variable5y.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5y.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo4(self,event):
        self.variable4x.Clear()
        self.variable4x.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4x.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
        self.variable4y.Clear()
        self.variable4y.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4y.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo3(self,event):
        self.variable3x.Clear()
        self.variable3x.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3x.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
        self.variable3y.Clear()
        self.variable3y.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3y.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo2(self,event):
        self.variable2x.Clear()
        self.variable2x.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2x.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        self.variable2y.Clear()
        self.variable2y.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2y.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
        
    def oncancel(self,event):
        self.Destroy()
            
class CTXScatterplotFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Scatterplot editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        page2 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variablec = wx.ComboBox(page1,-1,pieces[1],(100,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        
        self.matplotlib_colormaps = ['Accent','Blues','BrBG','BuGn','BuPu','Dark2',
                                     'GnBu','Greens','Greys','OrRd','Oranges','PRGn'
                                     ,'Paired','Pastel1','Pastel2','PiYG','PuBu','PuBuGn'
                                     ,'PuOr','PuRd','Purples','RdBu','RdGy','RdPu','RdYlBu'
                                     ,'RdYlGn','Reds','Set1','Set2','Set3','Spectral'
                                     ,'YlGn','YlGnBu','YlOrBr','YlOrRd','afmhot','autumn'
                                     ,'binary','bone','brg','bwr','cool','coolwarm'
                                     ,'copper','cubehelix','flag','gist_earth','gist_gray'
                                     ,'gist_heat','gist_ncar','gist_rainbow','gist_stern'
                                     ,'gist_yarg','gnuplot','gnuplot2','gray','hot'
                                     ,'hsv','jet','ocean','pink','prism','rainbow'
                                     ,'seismic','spectral','spring','summer','terrain'
                                     ,'winter']        
        
        self.colormapped = wx.CheckBox(page1,-1,' ',(20,60))
        self.colormap = wx.ComboBox(page1,-1,'jet',(45,57),(50,-1),choices=self.matplotlib_colormaps,style=wx.CB_READONLY)
        
        wx.StaticBox(page1,-1,'Technical parameters',(10,90),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,110))
        wx.StaticText(page1,-1,'Red:',(30,140))
        wx.StaticText(page1,-1,'Green:',(30,170))
        wx.StaticText(page1,-1,'Blue:',(30,200))
        wx.StaticText(page1,-1,'Alpha:',(30,230))
        self.my_color = wx.Button(page1,-1,'Choose',(100,105),(90,-1))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variablex.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100,137),(90,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100,167),(90,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100,197),(90,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100,227),(90,-1),min=0,max=255,initial=appex[3])
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,110))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,140))
        self.ylabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,170))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,200))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variablex.GetValue(),(280,107),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,self.variabley.GetValue(),(280,137),(90,-1))
        #self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,167),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,197),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()  
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,230))        
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,260),(380,110))
        self.marginal_hist = wx.CheckBox(page1,-1,'  Marginal hist',(30,280))
        self.hist_bins = wx.SpinCtrl(page1,-1,'',(120,277),(70,-1),min=2,max=100000,initial=30)        
        
        wx.StaticText(page1,-1,'Marker:',(30,310))
        wx.StaticText(page1,-1,'Size:',(30,340))
        self.marker_choice = ['Caret down','Caret left','Caret right','Caret up',
                              'Circle','Diamond','Hexagon 1','Hexagon 2','Underscore',
                              'Octagon','Pentagon','Pixel','Plus','Point','Square',
                              'Star','Thin diamond','Tick down','Tick left','Thick right',
                              'Tick up','Triangle down','Triangle left','Triangle right',
                              'Triangle up','Slash lines','X','Tri down','Tri left','Tri right',
                              'Tri up']
        self.marker = wx.ComboBox(page1,-1,'Circle',(100,307),(90,-1),choices=self.marker_choice, style=wx.CB_READONLY)
        self.size = wx.SpinCtrl(page1,-1,'',(100,337),(90,-1),min=10,max=10000,initial=60)
        
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(220,280))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(290,277),(80,-1),choices = ['GeoMS','SGeMS','Basic','BasicX','Sober'],style=wx.CB_READONLY)
        self.style_combo.Disable()        
        
        self.reg_check = wx.CheckBox(page1,-1,'  Do linear regression',(220,310))        
        
        wx.StaticText(page1,-1,'DPI:',(40,410))
        self.dpi = wx.SpinCtrl(page1,-1,'',(80,407),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot scatterplot',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        
        nb.AddPage(page2, "Multiple")
        wx.StaticBox(page2,-1,'Objects',(10,10),(380,290))
        wx.StaticText(page2,-1,'Number:',(30,30))
        self.number_of_objects = wx.SpinCtrl(page2,-1,'',(100,27),(90,-1),min=1,max=8,initial=1)
        self.Bind(wx.EVT_SPINCTRL,self.onnumberobjects,id=self.number_of_objects.GetId())        
        
        wx.StaticText(page2,-1,'Object 2:',(30,60))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,60))        
        self.object2 = wx.ComboBox(page2,-1,pieces[0],(100,57),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo2,id=self.object2.GetId())
        if len(pieces)==1:
            self.variable2x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable2y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable2x = wx.ComboBox(page2,-1,pieces[1],(247,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable2y = wx.ComboBox(page2,-1,pieces[1],(310,57),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
            
        wx.StaticText(page2,-1,'Object 3:',(30,90))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,90))        
        self.object3 = wx.ComboBox(page2,-1,pieces[0],(100,87),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo3,id=self.object3.GetId())
        if len(pieces)==1:
            self.variable3x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable3y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable3x = wx.ComboBox(page2,-1,pieces[1],(247,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable3y = wx.ComboBox(page2,-1,pieces[1],(310,87),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 4:',(30,120))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,120))        
        self.object4 = wx.ComboBox(page2,-1,pieces[0],(100,117),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo4,id=self.object4.GetId())
        if len(pieces)==1:
            self.variable4x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable4y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable4x = wx.ComboBox(page2,-1,pieces[1],(247,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable4y = wx.ComboBox(page2,-1,pieces[1],(310,117),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 5:',(30,150))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,150))        
        self.object5 = wx.ComboBox(page2,-1,pieces[0],(100,147),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo5,id=self.object5.GetId())
        if len(pieces)==1:
            self.variable5x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable5y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable5x = wx.ComboBox(page2,-1,pieces[1],(247,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable5y = wx.ComboBox(page2,-1,pieces[1],(310,147),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 6:',(30,180))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,180))        
        self.object6 = wx.ComboBox(page2,-1,pieces[0],(100,177),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo6,id=self.object6.GetId())
        if len(pieces)==1:
            self.variable6x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable6y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable6x = wx.ComboBox(page2,-1,pieces[1],(247,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable6y = wx.ComboBox(page2,-1,pieces[1],(310,177),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 7:',(30,210))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,210))        
        self.object7 = wx.ComboBox(page2,-1,pieces[0],(100,207),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo7,id=self.object7.GetId())
        if len(pieces)==1:
            self.variable7x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable7y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable7x = wx.ComboBox(page2,-1,pieces[1],(247,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable7y = wx.ComboBox(page2,-1,pieces[1],(310,207),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 8:',(30,240))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,240))        
        self.object8 = wx.ComboBox(page2,-1,pieces[0],(100,237),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo8,id=self.object8.GetId())
        if len(pieces)==1:
            self.variable8x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable8y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable8x = wx.ComboBox(page2,-1,pieces[1],(247,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable8y = wx.ComboBox(page2,-1,pieces[1],(310,237),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 9:',(30,270))
        wx.StaticText(page2,-1,'Var(X,Y):',(200,270))        
        self.object9 = wx.ComboBox(page2,-1,pieces[0],(100,267),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo9,id=self.object9.GetId())
        if len(pieces)==1:
            self.variable9x = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(247,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable9y = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(310,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable9x = wx.ComboBox(page2,-1,pieces[1],(247,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variable9y = wx.ComboBox(page2,-1,pieces[1],(310,267),(60,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        
        wx.StaticBox(page2,-1,'Technical and style',(10,300),(380,80))
        wx.StaticText(page2,-1,'Label by:',(30,320))
        self.labelby = wx.ComboBox(page2,-1,'Object',(100,317),(90,-1),choices=['Object','Variable'],style=wx.CB_READONLY)
        
        self.style_check2 = wx.CheckBox(page2,-1,'  Use style',(200,320))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.style_check2.GetId())
        self.style_combo2 = wx.ComboBox(page2,-1,'GeoMS',(280,317),(90,-1),choices = ['GeoMS','SGeMS','Basic'],style=wx.CB_READONLY)
        self.style_combo2.Disable()
        
        self.randcolor = wx.CheckBox(page2,-1,'  Randomize colors',(30,350))

        self.plot2 = wx.Button(page2,-1,'Plot scatterplot',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplotmultiple,id=self.plot2.GetId())
        self.cancel2 = wx.Button(page2,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel2.GetId())
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onplotmultiple(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check2.GetValue()
        style = self.style_combo2.GetValue()
        p0a = self.object.GetValue()
        p0x = self.variablex.GetValue()
        p0y = self.variabley.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        h = pympl.common_scatterplot_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag)
        color = []
        variablex = []
        variabley = []
        label = []
        if frame.object_manager.object_type[p0a]=='point':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='triangle_mesh':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='mesh':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        elif frame.object_manager.object_type[p0a]=='data':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
        elif frame.object_manager.object_type[p0a]=='surf':
            if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
            elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
            else:
                variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        
        if self.labelby.GetValue()=='Object': label.append(p0a)
        else: label.append(p0x+'  vs  '+p0y)
        if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
        else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
        if self.object2.IsEnabled():
            p0a = self.object2.GetValue()
            p0x = self.variable2x.GetValue()
            p0y = self.variable2y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object3.IsEnabled():
            p0a = self.object3.GetValue()
            p0x = self.variable3x.GetValue()
            p0y = self.variable3y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object4.IsEnabled():
            p0a = self.object4.GetValue()
            p0x = self.variable4x.GetValue()
            p0y = self.variable4y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object5.IsEnabled():
            p0a = self.object5.GetValue()
            p0x = self.variable5x.GetValue()
            p0y = self.variable5y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object6.IsEnabled():
            p0a = self.object6.GetValue()
            p0x = self.variable6x.GetValue()
            p0y = self.variable6y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object7.IsEnabled():
            p0a = self.object7.GetValue()
            p0x = self.variable7x.GetValue()
            p0y = self.variable7y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object8.IsEnabled():
            p0a = self.object8.GetValue()
            p0x = self.variable8x.GetValue()
            p0y = self.variable8y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if self.object9.IsEnabled():
            p0a = self.object9.GetValue()
            p0x = self.variable9x.GetValue()
            p0y = self.variable9y.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0x+'  vs  '+p0y)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0x].my_mpl_color)
            if frame.object_manager.object_type[p0a]=='point':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='triangle_mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='mesh':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
            elif frame.object_manager.object_type[p0a]=='data':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data)
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data)
            elif frame.object_manager.object_type[p0a]=='surf':
                if frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
                elif frame.object_manager.object_list[p0a].variable[p0x].null_flag and not frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.compressed())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data[frame.object_manager.object_list[p0a].variable[p0x].data.mask==False])
                elif not frame.object_manager.object_list[p0a].variable[p0x].null_flag and frame.object_manager.object_list[p0a].variable[p0y].null_flag:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data[frame.object_manager.object_list[p0a].variable[p0y].data.mask==False])
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.compressed())
                else:
                    variablex.append(frame.object_manager.object_list[p0a].variable[p0x].data.flatten())
                    variabley.append(frame.object_manager.object_list[p0a].variable[p0y].data.flatten())
        if sflag:
            h.do_style_multiple_scatterplot(variablex,variabley,color,label)
        else:
            h.multiple_scatterplot(variablex,variabley,color,label)
        
    def onplot(self,event):
        """
        (self,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,
                 legend_flag,legend_location,use_style_flag,style,dpi,gflag,marker,size,hist_flag)
        """
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check.GetValue()
        style = self.style_combo.GetValue()
        p1 = self.object.GetValue()
        p1x = self.variablex.GetValue()
        p1y = self.variabley.GetValue()
        p1c = self.variablec.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        marker = self.marker.GetValue()
        size = self.size.GetValue()
        hist_flag = self.marginal_hist.GetValue()
        bins = self.hist_bins.GetValue()
        rflag = self.reg_check.GetValue()
        cmapflag = self.colormapped.GetValue()
        cmap = self.colormap.GetValue()
        h = pympl.common_scatterplot_feed(bins,color,xflag,xlabel,yflag,
                                          ylabel,tflag,tlabel,lflag,
                                          lloc,sflag,style,
                                          dpi,gflag,marker,size,hist_flag,rflag,cmapflag,cmap)
        if sflag:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                else:
                    h.do_style_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                
        else:
            if frame.object_manager.object_type[p1]=='point':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='surf':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.flatten(),frame.object_manager.object_list[p1].variable[p1y].data.flatten())
            elif frame.object_manager.object_type[p1]=='data':
                if cmapflag:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False],frame.object_manager.object_list[p1].variable[p1c].data)
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed(),frame.object_manager.object_list[p1].variable[p1c].data)
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data,frame.object_manager.object_list[p1].variable[p1c].data)
                else:
                    if frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
                    elif frame.object_manager.object_list[p1].variable[p1x].null_flag and not frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data.compressed(),frame.object_manager.object_list[p1].variable[p1y].data[frame.object_manager.object_list[p1].variable[p1x].data.mask==False])
                    elif not frame.object_manager.object_list[p1].variable[p1x].null_flag and frame.object_manager.object_list[p1].variable[p1y].null_flag:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data[frame.object_manager.object_list[p1].variable[p1y].data.mask==False],frame.object_manager.object_list[p1].variable[p1y].data.compressed())
                    else:
                        h.common_scatterplot(frame.object_manager.object_list[p1].variable[p1x].data,frame.object_manager.object_list[p1].variable[p1y].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def onobjectvariablex(self,event):
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        self.xlabel.SetValue(self.variablex.GetValue())
        self.title.SetValue(self.object.GetValue())
        
    def onobjectvariabley(self,event):
        self.ylabel.SetValue(self.variabley.GetValue())
        #self.title.SetValue(self.object.GetValue())
            
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        
    def onobjectcombo(self,event):
        self.variablex.Clear()
        self.variabley.Clear()
        self.variablec.Clear()
        self.variablex.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablex.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variabley.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variabley.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.variablec.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variablec.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variablex.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        
    def onnumberobjects(self,event):
        self.object2.Enable()
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable2x.Enable()
        self.variable3x.Disable()
        self.variable4x.Disable()
        self.variable5x.Disable()
        self.variable6x.Disable()
        self.variable7x.Disable()
        self.variable8x.Disable()
        self.variable9x.Disable()
        self.variable2y.Enable()
        self.variable3y.Disable()
        self.variable4y.Disable()
        self.variable5y.Disable()
        self.variable6y.Disable()
        self.variable7y.Disable()
        self.variable8y.Disable()
        self.variable9y.Disable()
        if self.number_of_objects.GetValue()==2:
            self.object3.Enable()
            self.variable3x.Enable()
            self.variable3y.Enable()
        elif self.number_of_objects.GetValue()==3:
            self.object3.Enable()
            self.object4.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
        elif self.number_of_objects.GetValue()==4:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
        elif self.number_of_objects.GetValue()==5:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
        elif self.number_of_objects.GetValue()==6:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
        elif self.number_of_objects.GetValue()==7:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
        elif self.number_of_objects.GetValue()==8:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.object9.Enable()
            self.variable3x.Enable()
            self.variable4x.Enable()
            self.variable5x.Enable()
            self.variable6x.Enable()
            self.variable7x.Enable()
            self.variable8x.Enable()
            self.variable9x.Enable()
            self.variable3y.Enable()
            self.variable4y.Enable()
            self.variable5y.Enable()
            self.variable6y.Enable()
            self.variable7y.Enable()
            self.variable8y.Enable()
            self.variable9y.Enable()
            
    def onobjectcombo9(self,event):
        self.variable9x.Clear()
        self.variable9x.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9x.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
        self.variable9y.Clear()
        self.variable9y.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9y.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo8(self,event):
        self.variable8x.Clear()
        self.variable8x.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8x.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
        self.variable8y.Clear()
        self.variable8y.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8y.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo7(self,event):
        self.variable7x.Clear()
        self.variable7x.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7x.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
        self.variable7y.Clear()
        self.variable7y.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7y.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo6(self,event):
        self.variable6x.Clear()
        self.variable6x.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6x.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
        self.variable6y.Clear()
        self.variable6y.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6y.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo5(self,event):
        self.variable5x.Clear()
        self.variable5x.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5x.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
        self.variable5y.Clear()
        self.variable5y.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5y.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo4(self,event):
        self.variable4x.Clear()
        self.variable4x.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4x.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
        self.variable4y.Clear()
        self.variable4y.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4y.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo3(self,event):
        self.variable3x.Clear()
        self.variable3x.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3x.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
        self.variable3y.Clear()
        self.variable3y.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3y.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo2(self,event):
        self.variable2x.Clear()
        self.variable2x.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2x.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        self.variable2y.Clear()
        self.variable2y.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2y.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
        
    def oncancel(self,event):
        self.Destroy()
        
class CTXboxplotFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Box-Plot editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        page2 = wx.Panel(nb)
        #page3 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,50))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable name:',(200,30))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variable = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariable,id=self.variable.GetId())
        
        wx.StaticBox(page1,-1,'Statistical parameters',(10,60),(380,110))
        wx.StaticText(page1,-1,'Bins:',(30,80))
        self.bins = wx.SpinCtrl(page1,-1,'',(100,77),(90,-1),min=1,max=100000,initial=30)
        wx.StaticText(page1,-1,'Data axis:',(220,80))
        self.dataaxis = wx.ComboBox(page1,-1,'Horizontal',(280,77),(90,-1),choices=['Horizontal','Vertical'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.ondataaxis,id=self.dataaxis.GetId())
                
        self.show_percentile_marker = wx.CheckBox(page1,-1,'  Show percentile marker:',(30,110))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.show_percentile_marker.GetId())
        self.percentile_marker = wx.SpinCtrl(page1,-1,'',(180,107),(90,-1),min=1,max=100,initial=50)
        self.percentile_marker.Disable()
        
        """
        wx.StaticText(page1,-1,'Minimum:',(30,110))
        wx.StaticText(page1,-1,'Maximum:',(30,140))
        if len(pieces)==1:
            appex = frame.object_manager.object_list[pieces[0]].get_variable_names()[0]
            self.minimum = wx.TextCtrl(page1,-1,str(frame.object_manager.object_list[pieces[0]].variable[appex].data.min()),(100,107),(90,-1))
            self.maximum = wx.TextCtrl(page1,-1,str(frame.object_manager.object_list[pieces[0]].variable[appex].data.max()),(100,137),(90,-1))
        else:
            self.minimum = wx.TextCtrl(page1,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].data.min()),(100,107),(90,-1))
            self.maximum = wx.TextCtrl(page1,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].data.max()),(100,137),(90,-1))
        self.cumulation = wx.CheckBox(page1,-1,'  Cumulative',(290,110))
        self.normed = wx.CheckBox(page1,-1,'  Normed',(290,140))
        self.normed.SetValue(True)
        """
        
        wx.StaticBox(page1,-1,'Technical parameters',(10,170),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,190))
        wx.StaticText(page1,-1,'Red:',(30,220))
        wx.StaticText(page1,-1,'Green:',(30,250))
        wx.StaticText(page1,-1,'Blue:',(30,280))
        wx.StaticText(page1,-1,'Alpha:',(30,310))
        self.my_color = wx.Button(page1,-1,'Choose',(100,185),(90,-1))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variable.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100,217),(90,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100,247),(90,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100,277),(90,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100,307),(90,-1),min=0,max=255,initial=appex[3])
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,190))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,220))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,250))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,280))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variable.GetValue(),(280,187),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,'Variable values',(280,217),(90,-1))
        self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,247),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,277),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,310))
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,340),(190,110))
        wx.StaticText(page1,-1,'Line width:',(30,360))
        self.linewidth = wx.SpinCtrl(page1,-1,'',(100,357),(90,-1),min=1,max=100,initial=1)
        #self.histstyle = wx.ComboBox(page1,-1,'Bar',(100,357),(90,-1),choices=['Bar','Step','Step filled'],style=wx.CB_READONLY)
        #self.polygon_check = wx.CheckBox(page1,-1,'  polygon frequency',(30,390))
        #self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.polygon_check.GetId())
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(30,420))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(100,417),(90,-1),choices = ['GeoMS','SGeMS alike','Sober'],style=wx.CB_READONLY)
        self.style_combo.Disable()
        
        wx.StaticText(page1,-1,'DPI:',(240,360))
        self.dpi = wx.SpinCtrl(page1,-1,'',(280,357),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot boxplot',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        
        nb.AddPage(page2, "Multiple")
        wx.StaticBox(page2,-1,'Objects',(10,10),(380,290))
        wx.StaticText(page2,-1,'Number:',(30,30))
        self.number_of_objects = wx.SpinCtrl(page2,-1,'',(100,27),(90,-1),min=1,max=8,initial=1)
        self.Bind(wx.EVT_SPINCTRL,self.onnumberobjects,id=self.number_of_objects.GetId())     
        
        wx.StaticText(page2,-1,'Object 2:',(30,60))
        wx.StaticText(page2,-1,'Variable name:',(200,60))
        self.object2 = wx.ComboBox(page2,-1,pieces[0],(100,57),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo2,id=self.object2.GetId())
        if len(pieces)==1:
            self.variable2 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable2 = wx.ComboBox(page2,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 3:',(30,90))
        wx.StaticText(page2,-1,'Variable name:',(200,90))        
        self.object3 = wx.ComboBox(page2,-1,pieces[0],(100,87),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo3,id=self.object3.GetId())
        if len(pieces)==1:
            self.variable3 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,87),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable3 = wx.ComboBox(page2,-1,pieces[1],(280,87),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 4:',(30,120))
        wx.StaticText(page2,-1,'Variable name:',(200,120))        
        self.object4 = wx.ComboBox(page2,-1,pieces[0],(100,117),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo4,id=self.object4.GetId())
        if len(pieces)==1:
            self.variable4 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,117),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable4 = wx.ComboBox(page2,-1,pieces[1],(280,117),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 5:',(30,150))
        wx.StaticText(page2,-1,'Variable name:',(200,150))        
        self.object5 = wx.ComboBox(page2,-1,pieces[0],(100,147),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo5,id=self.object5.GetId())
        if len(pieces)==1:
            self.variable5 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,147),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable5 = wx.ComboBox(page2,-1,pieces[1],(280,147),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 6:',(30,180))
        wx.StaticText(page2,-1,'Variable name:',(200,180))        
        self.object6 = wx.ComboBox(page2,-1,pieces[0],(100,177),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo6,id=self.object6.GetId())
        if len(pieces)==1:
            self.variable6 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,177),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable6 = wx.ComboBox(page2,-1,pieces[1],(280,177),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 7:',(30,210))
        wx.StaticText(page2,-1,'Variable name:',(200,210))        
        self.object7 = wx.ComboBox(page2,-1,pieces[0],(100,207),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo7,id=self.object7.GetId())
        if len(pieces)==1:
            self.variable7 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,207),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable7 = wx.ComboBox(page2,-1,pieces[1],(280,207),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 8:',(30,240))
        wx.StaticText(page2,-1,'Variable name:',(200,240))        
        self.object8 = wx.ComboBox(page2,-1,pieces[0],(100,237),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo8,id=self.object8.GetId())
        if len(pieces)==1:
            self.variable8 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,237),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable8 = wx.ComboBox(page2,-1,pieces[1],(280,237),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 9:',(30,270))
        wx.StaticText(page2,-1,'Variable name:',(200,270))        
        self.object9 = wx.ComboBox(page2,-1,pieces[0],(100,267),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo9,id=self.object9.GetId())
        if len(pieces)==1:
            self.variable9 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,267),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable9 = wx.ComboBox(page2,-1,pieces[1],(280,267),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable3.Disable()
        self.variable4.Disable()
        self.variable5.Disable()
        self.variable6.Disable()
        self.variable7.Disable()
        self.variable8.Disable()
        self.variable9.Disable()
        
        wx.StaticBox(page2,-1,'Technical and style',(10,300),(380,80))
        wx.StaticText(page2,-1,'Label by:',(30,320))
        self.labelby = wx.ComboBox(page2,-1,'Object',(100,317),(90,-1),choices=['Object','Variable'],style=wx.CB_READONLY)
        
        self.style_check2 = wx.CheckBox(page2,-1,'  Use style',(200,320))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.style_check2.GetId())
        self.style_combo2 = wx.ComboBox(page2,-1,'GeoMS',(280,317),(90,-1),choices = ['GeoMS','SGeMS alike','Sober'],style=wx.CB_READONLY)
        self.style_combo2.Disable()
        
        self.randcolor = wx.CheckBox(page2,-1,'  Randomize colors',(30,350))

        self.plot2 = wx.Button(page2,-1,'Plot boxplot',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplotmultiple,id=self.plot2.GetId())
        self.cancel2 = wx.Button(page2,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel2.GetId())
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onplotmultiple(self,event):
        """
        self,axis,per_flag,percentile_marker,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,legend_flag,legend_location,
                 use_style_flag,style,dpi,gflag,linewidth
        """
        axis = self.dataaxis.GetValue()
        per_flag = self.show_percentile_marker.GetValue()
        percentile_marker = self.percentile_marker.GetValue()
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check2.GetValue()
        style = self.style_combo2.GetValue()
        p1 = self.object.GetValue()
        p2 = self.variable.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        linewidth = self.linewidth.GetValue()
        h = pympl.common_boxplot_feed(axis,per_flag,percentile_marker,color,
                                        xflag,xlabel,yflag,ylabel,tflag,tlabel,lflag,lloc,
                                        sflag,style,dpi,gflag,linewidth)
        color = []
        variable = []
        label = []
        if frame.object_manager.object_list[p1].variable[p2].null_flag:
            variable.append(frame.object_manager.object_list[p1].variable[p2].data.compressed())
        else:
            variable.append(frame.object_manager.object_list[p1].variable[p2].data)
        if self.labelby.GetValue()=='Object': label.append(p1)
        else: label.append(p2)
        if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
        else: color.append(frame.object_manager.object_list[p1].variable[p2].my_mpl_color)
        if self.object2.IsEnabled():
            p0a = self.object2.GetValue()
            p0b = self.variable2.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0b)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
            if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
            else:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data)
        if self.object3.IsEnabled():
            p0a = self.object3.GetValue()
            p0b = self.variable3.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0b)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
            if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
            else:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data)
        if self.object4.IsEnabled():
            p0a = self.object4.GetValue()
            p0b = self.variable4.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0b)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
            if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
            else:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data)
        if self.object5.IsEnabled():
            p0a = self.object5.GetValue()
            p0b = self.variable5.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0b)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
            if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
            else:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data)
        if self.object6.IsEnabled():
            p0a = self.object6.GetValue()
            p0b = self.variable6.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0b)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
            if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
            else:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data)
        if self.object7.IsEnabled():
            p0a = self.object7.GetValue()
            p0b = self.variable7.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0b)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
            if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
            else:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data)
        if self.object8.IsEnabled():
            p0a = self.object8.GetValue()
            p0b = self.variable8.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0b)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
            if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
            else:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data)
        if self.object9.IsEnabled():
            p0a = self.object9.GetValue()
            p0b = self.variable9.GetValue()
            if self.labelby.GetValue()=='Object': label.append(p0a)
            else: label.append(p0b)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
            if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
            else:
                variable.append(frame.object_manager.object_list[p0a].variable[p0b].data)
        if sflag:
            h.do_style_multiple_boxplot(variable,color,label)
        else:
            h.multiple_boxplot(variable,color,label)
        
    def onplot(self,event):
        """
        self,axis,per_flag,percentile_marker,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,legend_flag,legend_location,
                 use_style_flag,style,dpi,gflag,linewidth
        """
        axis = self.dataaxis.GetValue()
        per_flag = self.show_percentile_marker.GetValue()
        percentile_marker = self.percentile_marker.GetValue()
        color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
        xflag = self.xlabel_check.GetValue()
        xlabel = self.xlabel.GetValue()
        yflag = self.ylabel_check.GetValue()
        ylabel = self.ylabel.GetValue()
        tflag = self.title_check.GetValue()
        tlabel = self.title.GetValue()
        lflag = self.legend_check.GetValue()
        lloc = self.legend_location.GetValue()
        sflag = self.style_check.GetValue()
        style = self.style_combo.GetValue()
        p1 = self.object.GetValue()
        p2 = self.variable.GetValue()
        dpi = self.dpi.GetValue()
        gflag = self.grid_check.GetValue()
        linewidth = self.linewidth.GetValue()
        h = pympl.common_boxplot_feed(axis,per_flag,percentile_marker,color,
                                        xflag,xlabel,yflag,ylabel,tflag,tlabel,lflag,lloc,
                                        sflag,style,dpi,gflag,linewidth)
        if sflag:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p2].null_flag:
                    h.do_style_boxplot(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                else:
                    h.do_style_boxplot(frame.object_manager.object_list[p1].variable[p2].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p2].null_flag:
                    h.do_style_boxplot(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                else:
                    h.do_style_boxplot(frame.object_manager.object_list[p1].variable[p2].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p2].null_flag:
                    h.do_style_boxplot(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                else:
                    h.do_style_boxplot(frame.object_manager.object_list[p1].variable[p2].data.flatten())
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p2].null_flag:
                    h.do_style_boxplot(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                else:
                    h.do_style_boxplot(frame.object_manager.object_list[p1].variable[p2].data.flatten())
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p2].null_flag:
                    h.do_style_boxplot(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                else:
                    h.do_style_boxplot(frame.object_manager.object_list[p1].variable[p2].data)
        else:
            if frame.object_manager.object_type[p1]=='point':
                if frame.object_manager.object_list[p1].variable[p2].null_flag:
                    h.common_boxplot(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                else:
                    h.common_boxplot(frame.object_manager.object_list[p1].variable[p2].data)
            elif frame.object_manager.object_type[p1]=='triangle_mesh':
                if frame.object_manager.object_list[p1].variable[p2].null_flag:
                    h.common_boxplot(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                else:
                    h.common_boxplot(frame.object_manager.object_list[p1].variable[p2].data)
            elif frame.object_manager.object_type[p1]=='mesh':
                if frame.object_manager.object_list[p1].variable[p2].null_flag:
                    h.common_boxplot(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                else:
                    h.common_boxplot(frame.object_manager.object_list[p1].variable[p2].data.flatten())
            elif frame.object_manager.object_type[p1]=='surf':
                if frame.object_manager.object_list[p1].variable[p2].null_flag:
                    h.common_boxplot(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                else:
                    h.common_boxplot(frame.object_manager.object_list[p1].variable[p2].data.flatten())
            elif frame.object_manager.object_type[p1]=='data':
                if frame.object_manager.object_list[p1].variable[p2].null_flag:
                    h.common_boxplot(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                else:
                    h.common_boxplot(frame.object_manager.object_list[p1].variable[p2].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        if self.show_percentile_marker.GetValue(): self.percentile_marker.Enable()
        else: self.percentile_marker.Disable()
        
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
            
    def ondataaxis(self,event):
        if self.dataaxis.GetValue()=='Horizontal':
            self.xlabel.SetValue(self.variable.GetValue())
            self.ylabel.SetValue('Variable values')
            """
            if self.ylabel_check.GetValue():
                self.xlabel_check.SetValue(True)
            if self.xlabel_check.GetValue():
                self.ylabel_check.SetValue(True)
            else: self.ylabel_check.SetValue(False) 
            """             
        else:
            self.ylabel.SetValue(self.variable.GetValue())
            self.xlabel.SetValue('Variable values')
            """
            if self.xlabel_check.GetValue():
                self.ylabel_check.SetValue(True)
            if self.ylabel_check.GetValue():
                self.xlabel_check.SetValue(True)
            else: self.xlabel_check.SetValue(False)
            """
        
    def onobjectvariable(self,event):
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        if self.dataaxis.GetValue()=='Horizontal':
            self.xlabel.SetValue(self.variable.GetValue())
            self.title.SetValue(self.object.GetValue())
        else:
            self.ylabel.SetValue(self.variable.GetValue())
            self.title.SetValue(self.object.GetValue())
            
    def onnumberobjects(self,event):
        self.object2.Enable()
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable2.Enable()
        self.variable3.Disable()
        self.variable4.Disable()
        self.variable5.Disable()
        self.variable6.Disable()
        self.variable7.Disable()
        self.variable8.Disable()
        self.variable9.Disable()
        if self.number_of_objects.GetValue()==2:
            self.object3.Enable()
            self.variable3.Enable()
        elif self.number_of_objects.GetValue()==3:
            self.object3.Enable()
            self.object4.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
        elif self.number_of_objects.GetValue()==4:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
            self.variable5.Enable()
        elif self.number_of_objects.GetValue()==5:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
            self.variable5.Enable()
            self.variable6.Enable()
        elif self.number_of_objects.GetValue()==6:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
            self.variable5.Enable()
            self.variable6.Enable()
            self.variable7.Enable()
        elif self.number_of_objects.GetValue()==7:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
            self.variable5.Enable()
            self.variable6.Enable()
            self.variable7.Enable()
            self.variable8.Enable()
        elif self.number_of_objects.GetValue()==8:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.object9.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
            self.variable5.Enable()
            self.variable6.Enable()
            self.variable7.Enable()
            self.variable8.Enable()
            self.variable9.Enable()
        
    def onobjectcombo9(self,event):
        self.variable9.Clear()
        self.variable9.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo8(self,event):
        self.variable8.Clear()
        self.variable8.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo7(self,event):
        self.variable7.Clear()
        self.variable7.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo6(self,event):
        self.variable6.Clear()
        self.variable6.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo5(self,event):
        self.variable5.Clear()
        self.variable5.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo4(self,event):
        self.variable4.Clear()
        self.variable4.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo3(self,event):
        self.variable3.Clear()
        self.variable3.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo2(self,event):
        self.variable2.Clear()
        self.variable2.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        #self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        #self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        if self.dataaxis.GetValue()=='Horizontal':
            self.xlabel.SetValue(self.variable.GetValue())
            self.title.SetValue(self.object.GetValue())
        else:
            self.ylabel.SetValue(self.variable.GetValue())
            self.title.SetValue(self.object.GetValue())
            
    def oncancel(self,event):
        self.Destroy()
        
class CTXhistogramFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Histogram editor",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        page2 = wx.Panel(nb)
        #page3 = wx.Panel(nb)
        
        nb.AddPage(page1, "Common")
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,50))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable name:',(200,30))
        #self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = frame.object_manager.get_object_names(),style=wx.CB_READONLY)
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if len(pieces)==1:
            self.variable = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectvariable,id=self.variable.GetId())
        
        wx.StaticBox(page1,-1,'Statistical parameters',(10,60),(380,110))
        wx.StaticText(page1,-1,'Bins:',(30,80))
        self.bins = wx.SpinCtrl(page1,-1,'',(100,77),(90,-1),min=1,max=100000,initial=30)
        wx.StaticText(page1,-1,'Data axis:',(220,80))
        self.dataaxis = wx.ComboBox(page1,-1,'Horizontal',(280,77),(90,-1),choices=['Horizontal','Vertical'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.ondataaxis,id=self.dataaxis.GetId())        
        wx.StaticText(page1,-1,'Minimum:',(30,110))
        wx.StaticText(page1,-1,'Maximum:',(30,140))
        if len(pieces)==1:
            appex = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0]
            self.minimum = wx.TextCtrl(page1,-1,str(frame.object_manager.object_list[pieces[0]].variable[appex].data.min()),(100,107),(90,-1))
            self.maximum = wx.TextCtrl(page1,-1,str(frame.object_manager.object_list[pieces[0]].variable[appex].data.max()),(100,137),(90,-1))
        else:
            self.minimum = wx.TextCtrl(page1,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].data.min()),(100,107),(90,-1))
            self.maximum = wx.TextCtrl(page1,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].data.max()),(100,137),(90,-1))
        self.cumulation = wx.CheckBox(page1,-1,'  Cumulative',(290,110))
        self.normed = wx.CheckBox(page1,-1,'  Normed',(290,140))
        self.normed.SetValue(True)        
        
        wx.StaticBox(page1,-1,'Technical parameters',(10,170),(380,170))
        wx.StaticText(page1,-1,'Color:',(30,190))
        wx.StaticText(page1,-1,'Red:',(30,220))
        wx.StaticText(page1,-1,'Green:',(30,250))
        wx.StaticText(page1,-1,'Blue:',(30,280))
        wx.StaticText(page1,-1,'Alpha:',(30,310))
        self.my_color = wx.Button(page1,-1,'Choose',(100,185),(90,-1))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[self.variable.GetValue()].myRGBAcolor
        self.red = wx.SpinCtrl(page1,-1,'',(100,217),(90,-1),min=0,max=255,initial=appex[0])
        self.green = wx.SpinCtrl(page1,-1,'',(100,247),(90,-1),min=0,max=255,initial=appex[1])
        self.blue = wx.SpinCtrl(page1,-1,'',(100,277),(90,-1),min=0,max=255,initial=appex[2])
        self.alpha = wx.SpinCtrl(page1,-1,'',(100,307),(90,-1),min=0,max=255,initial=appex[3])
        
        self.xlabel_check = wx.CheckBox(page1,-1,' X label:',(220,190))
        self.xlabel_check.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.xlabel_check.GetId())
        self.ylabel_check = wx.CheckBox(page1,-1,' Y label:',(220,220))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.ylabel_check.GetId())
        self.title_check = wx.CheckBox(page1,-1,' Title:',(220,250))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.title_check.GetId())
        self.legend_check = wx.CheckBox(page1,-1,'  Legend',(220,280))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.legend_check.GetId())
        #wx.StaticText(page1,-1,'Legend location:',(220,310))
        self.xlabel = wx.TextCtrl(page1,-1,self.variable.GetValue(),(280,187),(90,-1))
        self.ylabel = wx.TextCtrl(page1,-1,'Frequency',(280,217),(90,-1))
        self.ylabel.Disable()
        self.title = wx.TextCtrl(page1,-1,self.object.GetValue(),(280,247),(90,-1))
        self.title.Disable()
        legend_choices = ['best','upper right','upper left','lower left','lower right',
                          'right','center left','center right','lower center','upper center','center']
        self.legend_location = wx.ComboBox(page1,-1,'best',(280,277),(90,-1),choices = legend_choices,style=wx.CB_READONLY)
        self.legend_location.Disable()  
        
        self.grid_check = wx.CheckBox(page1,-1,'  use grid',(220,310))
        
        wx.StaticBox(page1,-1,'Style and aesthetics',(10,340),(190,110))
        wx.StaticText(page1,-1,'Bar style:',(30,360))
        self.histstyle = wx.ComboBox(page1,-1,'Bar',(100,357),(90,-1),choices=['Bar','Step','Step filled'],style=wx.CB_READONLY)
        self.polygon_check = wx.CheckBox(page1,-1,'  polygon frequency',(30,390))
        #self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.polygon_check.GetId())
        self.style_check = wx.CheckBox(page1,-1,'  Use style',(30,420))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.style_check.GetId())
        self.style_combo = wx.ComboBox(page1,-1,'GeoMS',(100,417),(90,-1),choices = ['GeoMS','SGeMS','Sober','Entrepreneur','Silhouette','Tidy','Wand','Gaussian cousin','Informative','Axes3D'],style=wx.CB_READONLY)
        self.style_combo.Disable()  
        
        wx.StaticText(page1,-1,'DPI:',(240,360))
        self.dpi = wx.SpinCtrl(page1,-1,'',(280,357),(90,-1),min=30,max=3000,initial=100)
        
        self.plot = wx.Button(page1,-1,'Plot histogram',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplot,id=self.plot.GetId())
        self.cancel = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel.GetId())
        
        nb.AddPage(page2, "Multiple")
        wx.StaticBox(page2,-1,'Objects',(10,10),(380,290))
        wx.StaticText(page2,-1,'Number:',(30,30))
        self.number_of_objects = wx.SpinCtrl(page2,-1,'',(100,27),(90,-1),min=1,max=8,initial=1)
        self.Bind(wx.EVT_SPINCTRL,self.onnumberobjects,id=self.number_of_objects.GetId())        
        
        wx.StaticText(page2,-1,'Object 2:',(30,60))
        wx.StaticText(page2,-1,'Variable name:',(200,60))        
        self.object2 = wx.ComboBox(page2,-1,pieces[0],(100,57),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo2,id=self.object2.GetId())
        if len(pieces)==1:
            self.variable2 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable2 = wx.ComboBox(page2,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 3:',(30,90))
        wx.StaticText(page2,-1,'Variable name:',(200,90))        
        self.object3 = wx.ComboBox(page2,-1,pieces[0],(100,87),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo3,id=self.object3.GetId())
        if len(pieces)==1:
            self.variable3 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,87),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable3 = wx.ComboBox(page2,-1,pieces[1],(280,87),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 4:',(30,120))
        wx.StaticText(page2,-1,'Variable name:',(200,120))        
        self.object4 = wx.ComboBox(page2,-1,pieces[0],(100,117),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo4,id=self.object4.GetId())
        if len(pieces)==1:
            self.variable4 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,117),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable4 = wx.ComboBox(page2,-1,pieces[1],(280,117),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 5:',(30,150))
        wx.StaticText(page2,-1,'Variable name:',(200,150))        
        self.object5 = wx.ComboBox(page2,-1,pieces[0],(100,147),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo5,id=self.object5.GetId())
        if len(pieces)==1:
            self.variable5 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,147),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable5 = wx.ComboBox(page2,-1,pieces[1],(280,147),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)

        wx.StaticText(page2,-1,'Object 6:',(30,180))
        wx.StaticText(page2,-1,'Variable name:',(200,180))        
        self.object6 = wx.ComboBox(page2,-1,pieces[0],(100,177),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo6,id=self.object6.GetId())
        if len(pieces)==1:
            self.variable6 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,177),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable6 = wx.ComboBox(page2,-1,pieces[1],(280,177),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 7:',(30,210))
        wx.StaticText(page2,-1,'Variable name:',(200,210))        
        self.object7 = wx.ComboBox(page2,-1,pieces[0],(100,207),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo7,id=self.object7.GetId())
        if len(pieces)==1:
            self.variable7 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,207),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable7 = wx.ComboBox(page2,-1,pieces[1],(280,207),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 8:',(30,240))
        wx.StaticText(page2,-1,'Variable name:',(200,240))        
        self.object8 = wx.ComboBox(page2,-1,pieces[0],(100,237),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo8,id=self.object8.GetId())
        if len(pieces)==1:
            self.variable8 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,237),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable8 = wx.ComboBox(page2,-1,pieces[1],(280,237),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            
        wx.StaticText(page2,-1,'Object 9:',(30,270))
        wx.StaticText(page2,-1,'Variable name:',(200,270))        
        self.object9 = wx.ComboBox(page2,-1,pieces[0],(100,267),(90,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo9,id=self.object9.GetId())
        if len(pieces)==1:
            self.variable9 = wx.ComboBox(page2,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,267),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.variable9 = wx.ComboBox(page2,-1,pieces[1],(280,267),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable3.Disable()
        self.variable4.Disable()
        self.variable5.Disable()
        self.variable6.Disable()
        self.variable7.Disable()
        self.variable8.Disable()
        self.variable9.Disable()
        
        wx.StaticBox(page2,-1,'Technical and style',(10,300),(380,80))
        wx.StaticText(page2,-1,'Label by:',(30,320))
        self.labelby = wx.ComboBox(page2,-1,'Object',(100,317),(90,-1),choices=['Object','Variable'],style=wx.CB_READONLY)
        
        self.style_check2 = wx.CheckBox(page2,-1,'  Use style',(200,320))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.style_check2.GetId())
        self.style_combo2 = wx.ComboBox(page2,-1,'GeoMS',(280,317),(90,-1),choices = ['GeoMS','SGeMS','Axes3D','Overlapped'],style=wx.CB_READONLY)
        self.style_combo2.Disable()
        
        self.randcolor = wx.CheckBox(page2,-1,'  Randomize colors',(30,350))

        self.plot2 = wx.Button(page2,-1,'Plot histogram',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.onplotmultiple,id=self.plot2.GetId())
        self.cancel2 = wx.Button(page2,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel2.GetId())        
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def check_what_goes(self):
        inside = ['point','mesh','data','surf','triangle_mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def test_number_string(self):
        try:
            np.float(self.minimum.GetValue())
            np.float(self.maximum.GetValue())
            return True
        except ValueError:
            wx.MessageBox("Cant have only integer or float in minimum and maximum boxes.",'Error', wx.OK | wx.ICON_INFORMATION)
            return False
    
    def onplotmultiple(self,event):
        if self.test_number_string():
            bins = self.bins.GetValue()
            minimum = self.minimum.GetValue()
            maximum = self.maximum.GetValue()
            axis = self.dataaxis.GetValue()
            cumulative = self.cumulation.GetValue()
            normed = self.normed.GetValue()
            color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
            xflag = self.xlabel_check.GetValue()
            xlabel = self.xlabel.GetValue()
            yflag = self.ylabel_check.GetValue()
            ylabel = self.ylabel.GetValue()
            tflag = self.title_check.GetValue()
            tlabel = self.title.GetValue()
            lflag = self.legend_check.GetValue()
            lloc = self.legend_location.GetValue()
            barstyle = self.histstyle.GetValue()
            pflag = self.polygon_check.GetValue()
            sflag = self.style_check2.GetValue()
            style = self.style_combo2.GetValue()
            p1 = self.object.GetValue()
            p2 = self.variable.GetValue()
            dpi = self.dpi.GetValue()
            gflag = self.grid_check.GetValue()
            h = pympl.common_histogram_feed(bins,minimum,maximum,axis,cumulative,normed,color,
                                            xflag,xlabel,yflag,ylabel,tflag,tlabel,lflag,lloc,
                                            barstyle,pflag,sflag,style,dpi,gflag)
            color = []
            variable = []
            label = []
            if frame.object_manager.object_list[p1].variable[p2].null_flag:
                variable.append(frame.object_manager.object_list[p1].variable[p2].data.compressed())
            else:
                variable.append(frame.object_manager.object_list[p1].variable[p2].data.flatten())
            if self.labelby.GetValue()=='Object': label.append(p1)
            else: label.append(p2)
            if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
            else: color.append(frame.object_manager.object_list[p1].variable[p2].my_mpl_color)
            if self.object2.IsEnabled():
                p0a = self.object2.GetValue()
                p0b = self.variable2.GetValue()
                if self.labelby.GetValue()=='Object': label.append(p0a)
                else: label.append(p0b)
                if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
                else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
                if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
                else:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.flatten())
            if self.object3.IsEnabled():
                p0a = self.object3.GetValue()
                p0b = self.variable3.GetValue()
                if self.labelby.GetValue()=='Object': label.append(p0a)
                else: label.append(p0b)
                if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
                else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
                if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
                else:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.flatten())
            if self.object4.IsEnabled():
                p0a = self.object4.GetValue()
                p0b = self.variable4.GetValue()
                if self.labelby.GetValue()=='Object': label.append(p0a)
                else: label.append(p0b)
                if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
                else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
                if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
                else:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.flatten())
            if self.object5.IsEnabled():
                p0a = self.object5.GetValue()
                p0b = self.variable5.GetValue()
                if self.labelby.GetValue()=='Object': label.append(p0a)
                else: label.append(p0b)
                if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
                else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
                if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
                else:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.flatten())
            if self.object6.IsEnabled():
                p0a = self.object6.GetValue()
                p0b = self.variable6.GetValue()
                if self.labelby.GetValue()=='Object': label.append(p0a)
                else: label.append(p0b)
                if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
                else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
                if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
                else:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.flatten())
            if self.object7.IsEnabled():
                p0a = self.object7.GetValue()
                p0b = self.variable7.GetValue()
                if self.labelby.GetValue()=='Object': label.append(p0a)
                else: label.append(p0b)
                if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
                else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
                if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
                else:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.flatten())
            if self.object8.IsEnabled():
                p0a = self.object8.GetValue()
                p0b = self.variable8.GetValue()
                if self.labelby.GetValue()=='Object': label.append(p0a)
                else: label.append(p0b)
                if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
                else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
                if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
                else:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.flatten())
            if self.object9.IsEnabled():
                p0a = self.object9.GetValue()
                p0b = self.variable9.GetValue()
                if self.labelby.GetValue()=='Object': label.append(p0a)
                else: label.append(p0b)
                if self.randcolor.GetValue(): color.append((np.random.randint(0,255)/255,np.random.randint(0,255)/255,np.random.randint(0,255)/255))
                else: color.append(frame.object_manager.object_list[p0a].variable[p0b].my_mpl_color)
                if frame.object_manager.object_list[p0a].variable[p0b].null_flag:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.compressed())
                else:
                    variable.append(frame.object_manager.object_list[p0a].variable[p0b].data.flatten())
            if sflag:
                h.do_style_multiple_histogram(variable,color,label)
            else:
                h.multiple_histogram(variable,color,label)
    
    def onplot(self,event):
        """
        (self,bins,minimum,maximum,axis,cumulative,normed,color,xlabel_flag,xlabel,
                 ylabel_flag,ylabel,title_flag,title,legend_flag,legend_location,
                 bar_style,polygon_frequency_flag,use_style_flag,style)
        """
        if self.test_number_string():
            bins = self.bins.GetValue()
            minimum = self.minimum.GetValue()
            maximum = self.maximum.GetValue()
            axis = self.dataaxis.GetValue()
            cumulative = self.cumulation.GetValue()
            normed = self.normed.GetValue()
            color = (self.red.GetValue(),self.green.GetValue(),self.blue.GetValue(),self.alpha.GetValue())
            xflag = self.xlabel_check.GetValue()
            xlabel = self.xlabel.GetValue()
            yflag = self.ylabel_check.GetValue()
            ylabel = self.ylabel.GetValue()
            tflag = self.title_check.GetValue()
            tlabel = self.title.GetValue()
            lflag = self.legend_check.GetValue()
            lloc = self.legend_location.GetValue()
            barstyle = self.histstyle.GetValue()
            pflag = self.polygon_check.GetValue()
            sflag = self.style_check.GetValue()
            style = self.style_combo.GetValue()
            p1 = self.object.GetValue()
            p2 = self.variable.GetValue()
            dpi = self.dpi.GetValue()
            gflag = self.grid_check.GetValue()
            h = pympl.common_histogram_feed(bins,minimum,maximum,axis,cumulative,normed,color,
                                            xflag,xlabel,yflag,ylabel,tflag,tlabel,lflag,lloc,
                                            barstyle,pflag,sflag,style,dpi,gflag)
            if sflag:
                if frame.object_manager.object_type[p1]=='point':
                    if frame.object_manager.object_list[p1].variable[p2].null_flag:
                        h.do_style_histogram(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                    else:
                        h.do_style_histogram(frame.object_manager.object_list[p1].variable[p2].data)
                elif frame.object_manager.object_type[p1]=='triangle_mesh':
                    if frame.object_manager.object_list[p1].variable[p2].null_flag:
                        h.do_style_histogram(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                    else:
                        h.do_style_histogram(frame.object_manager.object_list[p1].variable[p2].data)
                elif frame.object_manager.object_type[p1]=='mesh':
                    if frame.object_manager.object_list[p1].variable[p2].null_flag:
                        h.do_style_histogram(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                    else:
                        h.do_style_histogram(frame.object_manager.object_list[p1].variable[p2].data.flatten())
                elif frame.object_manager.object_type[p1]=='surf':
                    if frame.object_manager.object_list[p1].variable[p2].null_flag:
                        h.do_style_histogram(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                    else:
                        h.do_style_histogram(frame.object_manager.object_list[p1].variable[p2].data.flatten())
                elif frame.object_manager.object_type[p1]=='data':
                    if frame.object_manager.object_list[p1].variable[p2].null_flag:
                        h.do_style_histogram(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                    else:
                        h.do_style_histogram(frame.object_manager.object_list[p1].variable[p2].data)
            else:
                if frame.object_manager.object_type[p1]=='point':
                    if frame.object_manager.object_list[p1].variable[p2].null_flag:
                        h.common_histogram(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                    else:
                        h.common_histogram(frame.object_manager.object_list[p1].variable[p2].data)
                elif frame.object_manager.object_type[p1]=='triangle_mesh':
                    if frame.object_manager.object_list[p1].variable[p2].null_flag:
                        h.common_histogram(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                    else:
                        h.common_histogram(frame.object_manager.object_list[p1].variable[p2].data)
                elif frame.object_manager.object_type[p1]=='mesh':
                    if frame.object_manager.object_list[p1].variable[p2].null_flag:
                        h.common_histogram(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                    else:
                        h.common_histogram(frame.object_manager.object_list[p1].variable[p2].data.flatten())
                elif frame.object_manager.object_type[p1]=='surf':
                    if frame.object_manager.object_list[p1].variable[p2].null_flag:
                        h.common_histogram(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                    else:
                        h.common_histogram(frame.object_manager.object_list[p1].variable[p2].data.flatten())
                elif frame.object_manager.object_type[p1]=='data':
                    if frame.object_manager.object_list[p1].variable[p2].null_flag:
                        h.common_histogram(frame.object_manager.object_list[p1].variable[p2].data.compressed())
                    else:
                        h.common_histogram(frame.object_manager.object_list[p1].variable[p2].data)
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
            
    def oncheck2(self,event):
        if self.style_check2.GetValue(): self.style_combo2.Enable()
        else: self.style_combo2.Disable()
        
    def oncheck(self,event):
        if self.xlabel_check.GetValue(): self.xlabel.Enable()
        else: self.xlabel.Disable()
        if self.ylabel_check.GetValue(): self.ylabel.Enable()
        else: self.ylabel.Disable()
        if self.title_check.GetValue(): self.title.Enable()
        else: self.title.Disable()
        if self.legend_check.GetValue(): self.legend_location.Enable()
        else: self.legend_location.Disable()
        if self.style_check.GetValue(): self.style_combo.Enable()
        else: self.style_combo.Disable()
        
    def ondataaxis(self,event):
        if self.dataaxis.GetValue()=='Horizontal':
            self.xlabel.SetValue(self.variable.GetValue())
            self.ylabel.SetValue('Frequency')
            """
            if self.ylabel_check.GetValue():
                self.xlabel_check.SetValue(True)
            if self.xlabel_check.GetValue():
                self.ylabel_check.SetValue(True)
            else: self.ylabel_check.SetValue(False) 
            """             
        else:
            self.ylabel.SetValue(self.variable.GetValue())
            self.xlabel.SetValue('Frequency')
            """
            if self.xlabel_check.GetValue():
                self.ylabel_check.SetValue(True)
            if self.ylabel_check.GetValue():
                self.xlabel_check.SetValue(True)
            else: self.xlabel_check.SetValue(False)
            """
            
        
    def onobjectvariable(self,event):
        self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        if self.dataaxis.GetValue()=='Horizontal':
            self.xlabel.SetValue(self.variable.GetValue())
            self.title.SetValue(self.object.GetValue())
        else:
            self.ylabel.SetValue(self.variable.GetValue())
            self.title.SetValue(self.object.GetValue())
            
    def onnumberobjects(self,event):
        self.object2.Enable()
        self.object3.Disable()
        self.object4.Disable()
        self.object5.Disable()
        self.object6.Disable()
        self.object7.Disable()
        self.object8.Disable()
        self.object9.Disable()
        self.variable2.Enable()
        self.variable3.Disable()
        self.variable4.Disable()
        self.variable5.Disable()
        self.variable6.Disable()
        self.variable7.Disable()
        self.variable8.Disable()
        self.variable9.Disable()
        if self.number_of_objects.GetValue()==2:
            self.object3.Enable()
            self.variable3.Enable()
        elif self.number_of_objects.GetValue()==3:
            self.object3.Enable()
            self.object4.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
        elif self.number_of_objects.GetValue()==4:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
            self.variable5.Enable()
        elif self.number_of_objects.GetValue()==5:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
            self.variable5.Enable()
            self.variable6.Enable()
        elif self.number_of_objects.GetValue()==6:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
            self.variable5.Enable()
            self.variable6.Enable()
            self.variable7.Enable()
        elif self.number_of_objects.GetValue()==7:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
            self.variable5.Enable()
            self.variable6.Enable()
            self.variable7.Enable()
            self.variable8.Enable()
        elif self.number_of_objects.GetValue()==8:
            self.object3.Enable()
            self.object4.Enable()
            self.object5.Enable()
            self.object6.Enable()
            self.object7.Enable()
            self.object8.Enable()
            self.object9.Enable()
            self.variable3.Enable()
            self.variable4.Enable()
            self.variable5.Enable()
            self.variable6.Enable()
            self.variable7.Enable()
            self.variable8.Enable()
            self.variable9.Enable()

    def onobjectcombo9(self,event):
        self.variable9.Clear()
        self.variable9.AppendItems(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names())
        self.variable9.SetValue(frame.object_manager.object_list[self.object9.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo8(self,event):
        self.variable8.Clear()
        self.variable8.AppendItems(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names())
        self.variable8.SetValue(frame.object_manager.object_list[self.object8.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo7(self,event):
        self.variable7.Clear()
        self.variable7.AppendItems(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names())
        self.variable7.SetValue(frame.object_manager.object_list[self.object7.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo6(self,event):
        self.variable6.Clear()
        self.variable6.AppendItems(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names())
        self.variable6.SetValue(frame.object_manager.object_list[self.object6.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo5(self,event):
        self.variable5.Clear()
        self.variable5.AppendItems(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names())
        self.variable5.SetValue(frame.object_manager.object_list[self.object5.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo4(self,event):
        self.variable4.Clear()
        self.variable4.AppendItems(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names())
        self.variable4.SetValue(frame.object_manager.object_list[self.object4.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo3(self,event):
        self.variable3.Clear()
        self.variable3.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo2(self,event):
        self.variable2.Clear()
        self.variable2.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.minimum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()))
        self.maximum.SetValue(str(frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()))
        appex = frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].myRGBAcolor
        self.red.SetValue(appex[0])
        self.green.SetValue(appex[1])
        self.blue.SetValue(appex[2])
        self.alpha.SetValue(appex[3])
        if self.dataaxis.GetValue()=='Horizontal':
            self.xlabel.SetValue(self.variable.GetValue())
            self.title.SetValue(self.object.GetValue())
        else:
            self.ylabel.SetValue(self.variable.GetValue())
            self.title.SetValue(self.object.GetValue())
            
    def oncancel(self,event):
        self.Destroy()
        
class EmptyMeshFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Create empty mesh Frame",size=(400,405),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        wx.StaticBox(panel,-1,'Mesh specifics',(10,10),(380,140))
        wx.StaticText(panel,-1,
                      '              Number                   Size                         First coordinate',
                      (30,30)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(30,60)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(30,90)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(30,120)).SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(70,57),(90,-1),min=1,max=100000000,initial=1)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(70,87),(90,-1),min=1,max=100000000,initial=1)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(70,117),(90,-1),min=1,max=100000000,initial=1)
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(170, 57),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(170, 87),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(170, 117),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(270, 57),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(270, 87),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(270, 117),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        wx.StaticBox(panel,-1,'Mask values',(10,150),(220,60))
        self.null_check = wx.CheckBox(panel,-1,'  has null value',(30,178))
        self.Bind(wx.EVT_CHECKBOX,self.onchecknull,id = self.null_check.GetId())

        self.null  = FS.FloatSpin(panel,-1,(130,175),(80,-1),value=-999,digits=3)
        self.null.Disable()
        
        wx.StaticBox(panel,-1,'Data type',(240,150),(150,60))
        data_type_list = ['bool','int','int8','int16','int32','int64','uint8','uint16',
                          'uint32','uint64','float','float16','float32','float64',
                          'complex','complex64','complex128']
        self.data_type = wx.ComboBox(panel,-1,'float32',(270,175),(90,-1),choices = data_type_list,
                                     style = wx.CB_READONLY)
        self.data_type.SetToolTipString(self.get_datatype_doc())
        
        wx.StaticText(panel,-1,'Object:',(30,225))
        self.object = wx.TextCtrl(panel,-1,'Mesh',(90,223),(100,-1))
        
        wx.StaticText(panel,-1,'Variable:',(220,225))
        self.variable = wx.TextCtrl(panel,-1,'empty_variable',(280,223),(100,-1))
        
        wx.StaticText(panel,-1,'Constant value:',(30,255))
        self.constant = FS.FloatSpin(panel, -1,(110, 253),(100,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        self.btn_create = wx.Button(panel,-1,'Create',(60,320),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncreate,id = self.btn_create.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,320),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def get_null(self):
        '''
        get_null(...)
            get_null(no arguments)
            
            Gets null information (True or False and if True what is the
            null value).
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: Bool or float
            Either a boolean flag (False) indicating there is no null
            or the actual null value.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.null.GetValue().is_integer(): flag = True
        if flag: return np.int(self.null.GetValue())
        else: return self.null.GetValue()
        
    def get_blocks(self):
        '''
        get_blocks(...)
            get_blocks(no arguments)
            
            Gets a tuple with the number of blocks in each of the directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the number of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        return (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
        
    def get_size(self):
        '''
        get_size(...)
            get_size(no arguments)
            
            Gets a tuple with the size of blocks in each of the directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the size of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.size_in_x.GetValue().is_integer() and self.size_in_y.GetValue().is_integer() and self.size_in_z.GetValue().is_integer(): flag = True
        if flag: return (np.int(self.size_in_x.GetValue()),np.int(self.size_in_y.GetValue()),np.int(self.size_in_z.GetValue()))
        else: return (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
                   
    def get_first(self):
        '''
        get_first(...)
            get_size(no arguments)
            
            Gets a tuple with the first coordinate of blocks in each of the
            directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the first coordinate of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.first_in_x.GetValue().is_integer() and self.first_in_y.GetValue().is_integer() and self.first_in_z.GetValue().is_integer(): flag = True
        if flag: return (np.int(self.first_in_x.GetValue()),np.int(self.first_in_y.GetValue()),np.int(self.first_in_z.GetValue()))
        else: return (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
        
    def oncreate(self,event):
        '''
        onimport(...)
            onimport(event)
            
            Imports an object from file to an object manager class.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue(): null = self.get_null()
        else: null = None
        blocks = self.get_blocks()
        size   = self.get_size()
        first  = self.get_first()
        data = np.ones(blocks,dtype=self.data_type.GetValue())*self.constant.GetValue()
        name = self.object.GetValue()
        vname = self.variable.GetValue()
        frame.object_manager.add_mesh_object(blocks, size, first, null, name, vname, data)
        #frame.object_manager.add_mesh_object_from_file(self.path,blocks,size,first,null=null,
        #                                              filetype=self.file_type.GetValue()
        #                                              ,dtype=self.data_type.GetValue()
        #                                              ,at_least=self.at_least.GetValue())
        frame.update_last_object_list()
        self.Destroy()
        
    def onchecknull(self,event):
        '''
        onchecknull(...)
            onchecknull(event)
            
            Check if the user checkbox was checked.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue():
            self.null.Enable()
        else:
            self.null.Disable()
                
    def get_datatype_doc(self):
        '''
        get_datatype_doc(...)
            get_datatype_doc(no arguments)
            
            Returns the documenation about the at data type argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        datatype_doc = """LINK: http://docs.scipy.org/doc/numpy/user/basics.types.html
Data type 	Description
bool 	Boolean (True or False) stored as a byte 
int 	Platform integer (normally either int32 or int64) 
int8 	Byte (-128 to 127) 
int16 	Integer (-32768 to 32767) 
int32 	Integer (-2147483648 to 2147483647) 
int64 	Integer (-9223372036854775808 to 9223372036854775807) 
uint8 	Unsigned integer (0 to 255) 
uint16 	Unsigned integer (0 to 65535) 
uint32 	Unsigned integer (0 to 4294967295) 
uint64 	Unsigned integer (0 to 18446744073709551615) 
float 	Shorthand for float64. 
float16 	Half precision float: sign bit, 5 bits exponent, 10 bits mantissa 
float32 	Single precision float: sign bit, 8 bits exponent, 23 bits mantissa 
float64 	Double precision float: sign bit, 11 bits exponent, 52 bits mant...
complex 	Shorthand for complex128.
complex64 	Complex number, represented by two 32-bit floats ...
complex128 	Complex number, represented by two 64-bit floats ...
NOTE: the lower the number the lesser the memmory occupied in
the computer. If your project is big, consider controlling the
data type of each object. Default is float32.
"""
        return datatype_doc
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(no arguments)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class EmptySurfFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Create empty surface Frame",size=(400,405),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        wx.StaticBox(panel,-1,'Surface specifics',(10,10),(380,140))
        wx.StaticText(panel,-1,
                      '              Number                   Size                         First coordinate',
                      (30,30)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(30,60)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(30,90)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(30,120)).SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(70,57),(90,-1),min=1,max=100000000,initial=1)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(70,87),(90,-1),min=1,max=100000000,initial=1)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(70,117),(90,-1),min=1,max=100000000,initial=1)
        self.blocks_in_z.Disable()
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(170, 57),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(170, 87),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(170, 117),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z.Disable()
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(270, 57),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(270, 87),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(270, 117),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z.Disable()
        
        wx.StaticBox(panel,-1,'Mask values',(10,150),(220,60))
        self.null_check = wx.CheckBox(panel,-1,'  has null value',(30,178))
        self.Bind(wx.EVT_CHECKBOX,self.onchecknull,id = self.null_check.GetId())

        self.null  = FS.FloatSpin(panel,-1,(130,175),(80,-1),value=-999,digits=3)
        self.null.Disable()
        
        wx.StaticBox(panel,-1,'Data type',(240,150),(150,60))
        data_type_list = ['bool','int','int8','int16','int32','int64','uint8','uint16',
                          'uint32','uint64','float','float16','float32','float64',
                          'complex','complex64','complex128']
        self.data_type = wx.ComboBox(panel,-1,'float32',(270,175),(90,-1),choices = data_type_list,
                                     style = wx.CB_READONLY)
        self.data_type.SetToolTipString(self.get_datatype_doc())
        
        wx.StaticText(panel,-1,'Object:',(30,225))
        self.object = wx.TextCtrl(panel,-1,'Surf',(90,223),(100,-1))
        
        wx.StaticText(panel,-1,'Variable:',(220,225))
        self.variable = wx.TextCtrl(panel,-1,'empty_variable',(280,223),(100,-1))
        
        wx.StaticText(panel,-1,'Constant value:',(30,255))
        self.constant = FS.FloatSpin(panel, -1,(110, 253),(100,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        self.btn_create = wx.Button(panel,-1,'Create',(60,320),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncreate,id = self.btn_create.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,320),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def get_null(self):
        '''
        get_null(...)
            get_null(no arguments)
            
            Gets null information (True or False and if True what is the
            null value).
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: Bool or float
            Either a boolean flag (False) indicating there is no null
            or the actual null value.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.null.GetValue().is_integer(): flag = True
        if flag: return np.int(self.null.GetValue())
        else: return self.null.GetValue()
        
    def get_blocks(self):
        '''
        get_blocks(...)
            get_blocks(no arguments)
            
            Gets a tuple with the number of blocks in each of the directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the number of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        return (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
        
    def get_size(self):
        '''
        get_size(...)
            get_size(no arguments)
            
            Gets a tuple with the size of blocks in each of the directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the size of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.size_in_x.GetValue().is_integer() and self.size_in_y.GetValue().is_integer() and self.size_in_z.GetValue().is_integer(): flag = True
        if flag: return (np.int(self.size_in_x.GetValue()),np.int(self.size_in_y.GetValue()),np.int(self.size_in_z.GetValue()))
        else: return (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
                   
    def get_first(self):
        '''
        get_first(...)
            get_size(no arguments)
            
            Gets a tuple with the first coordinate of blocks in each of the
            directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the first coordinate of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.first_in_x.GetValue().is_integer() and self.first_in_y.GetValue().is_integer() and self.first_in_z.GetValue().is_integer(): flag = True
        if flag: return (np.int(self.first_in_x.GetValue()),np.int(self.first_in_y.GetValue()),np.int(self.first_in_z.GetValue()))
        else: return (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
        
    def oncreate(self,event):
        '''
        onimport(...)
            onimport(event)
            
            Imports an object from file to an object manager class.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue(): null = self.get_null()
        else: null = None
        blocks = self.get_blocks()
        size   = self.get_size()
        first  = self.get_first()
        data = np.ones(blocks,dtype=self.data_type.GetValue())*self.constant.GetValue()
        name = self.object.GetValue()
        vname = self.variable.GetValue()
        frame.object_manager.add_surf_object(blocks, size, first, null, name, vname, data)
        #frame.object_manager.add_mesh_object(blocks, size, first, null, name, vname, data)
        #frame.object_manager.add_mesh_object_from_file(self.path,blocks,size,first,null=null,
        #                                              filetype=self.file_type.GetValue()
        #                                              ,dtype=self.data_type.GetValue()
        #                                              ,at_least=self.at_least.GetValue())
        frame.update_last_object_list()
        self.Destroy()
        
    def onchecknull(self,event):
        '''
        onchecknull(...)
            onchecknull(event)
            
            Check if the user checkbox was checked.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue():
            self.null.Enable()
        else:
            self.null.Disable()
                
    def get_datatype_doc(self):
        '''
        get_datatype_doc(...)
            get_datatype_doc(no arguments)
            
            Returns the documenation about the at data type argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        datatype_doc = """LINK: http://docs.scipy.org/doc/numpy/user/basics.types.html
Data type 	Description
bool 	Boolean (True or False) stored as a byte 
int 	Platform integer (normally either int32 or int64) 
int8 	Byte (-128 to 127) 
int16 	Integer (-32768 to 32767) 
int32 	Integer (-2147483648 to 2147483647) 
int64 	Integer (-9223372036854775808 to 9223372036854775807) 
uint8 	Unsigned integer (0 to 255) 
uint16 	Unsigned integer (0 to 65535) 
uint32 	Unsigned integer (0 to 4294967295) 
uint64 	Unsigned integer (0 to 18446744073709551615) 
float 	Shorthand for float64. 
float16 	Half precision float: sign bit, 5 bits exponent, 10 bits mantissa 
float32 	Single precision float: sign bit, 8 bits exponent, 23 bits mantissa 
float64 	Double precision float: sign bit, 11 bits exponent, 52 bits mant...
complex 	Shorthand for complex128.
complex64 	Complex number, represented by two 32-bit floats ...
complex128 	Complex number, represented by two 64-bit floats ...
NOTE: the lower the number the lesser the memmory occupied in
the computer. If your project is big, consider controlling the
data type of each object. Default is float32.
"""
        return datatype_doc
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(no arguments)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()

class PointImportFrame(wx.Frame):
    def __init__(self,parent,id,path):
        wx.Frame.__init__(self,parent,id,"Point Import Frame",size=(400,505),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.path = path
        
        wx.StaticBox(panel,-1,'Point specifics',(10,10),(200,110))
        
        wx.StaticText(panel,-1,'X column:',(30,30)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y column:',(30,60)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z column:',(30,90)).SetFont(frame.regular_font)
        
        self.xcolumn = wx.SpinCtrl(panel,-1,'',(90,27),(90,-1),min=1,max=100000000,initial=1)
        self.ycolumn = wx.SpinCtrl(panel,-1,'',(90,57),(90,-1),min=1,max=100000000,initial=2)
        self.zcolumn = wx.SpinCtrl(panel,-1,'',(90,87),(90,-1),min=0,max=100000000,initial=3)
        
        wx.StaticBox(panel,-1,'Mask values',(10,150),(220,60))
        self.null_check = wx.CheckBox(panel,-1,'  has null value',(30,178))
        self.Bind(wx.EVT_CHECKBOX,self.onchecknull,id = self.null_check.GetId())

        self.null  = FS.FloatSpin(panel,-1,(130,175),(80,-1),value=-999,digits=3)
        self.null.Disable()
        
        wx.StaticBox(panel,-1,'Data type',(240,150),(150,60))
        data_type_list = ['bool','int','int8','int16','int32','int64','uint8','uint16',
                          'uint32','uint64','float','float16','float32','float64',
                          'complex','complex64','complex128']
        self.data_type = wx.ComboBox(panel,-1,'float32',(270,175),(90,-1),choices = data_type_list,
                                     style = wx.CB_READONLY)
        self.data_type.SetToolTipString(self.get_datatype_doc())
        
        wx.StaticBox(panel,-1,'File specifics',(10,210),(380,60))
        wx.StaticText(panel,-1,'File type:',(30,238))
        file_type_list = ['ASCII','NPY']
        self.file_type = wx.ComboBox(panel,-1,'ASCII',(80,235),(60,-1),
                                     choices = file_type_list,
                                     style = wx.CB_READONLY)
        self.file_type.SetToolTipString(self.get_filetype_doc())
        self.Bind(wx.EVT_COMBOBOX,self.onfilecombo,id = self.file_type.GetId())
        wx.StaticText(panel,-1,'At least:',(150,238))
        self.at_least = wx.SpinCtrl(panel,-1,'',(200,235),(60,-1),min=1,max=10000,initial=3)
        self.at_least.SetToolTipString(self.get_atleast_doc())
        self.btn_preview = wx.Button(panel,-1,'Preview',(280,223),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onpreview,id = self.btn_preview.GetId())
        if self.path[-3:] == 'npy': 
            self.file_type.SetValue('NPY')
            self.btn_preview.Disable()
            
        wx.StaticBox(panel,-1,'Preview',(10,270),(380,140))
        self.preview = wx.TextCtrl(panel,-1,'',(30,290),(340,110),style=wx.TE_MULTILINE)
        
        self.btn_import = wx.Button(panel,-1,'Import',(60,420),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onimport,id = self.btn_import.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,420),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onpreview(self,event):
        '''
        onpreview(...)
            onpreview(event)
            
            Gets a textctrl widget on this frame to show what is on the first
            few rows of the file.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        fid = open(self.path,'r')
        counter = 0
        total = ''
        while counter<100:
            line = fid.readline()
            if len(line)==0:
                break 
            counter = counter + 1
            total = total + line
        self.preview.SetValue(total)
        
    def get_null(self):
        '''
        get_null(...)
            get_null(no arguments)
            
            Gets null information (True or False and if True what is the
            null value).
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: Bool or float
            Either a boolean flag (False) indicating there is no null
            or the actual null value.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.null.GetValue().is_integer(): flag = True
        if flag: return np.int(self.null.GetValue())
        else: return self.null.GetValue()
        
    def get_coordinate_columns(self):
        '''
        get_coordinate_columns(...)
            get_coordinate_columns(no arguments)
            
            Gets a tuple with the coordinate columns of the point data file.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the coordinate columns of the point data.
        
        See also
        --------
        None
        '''
        return (self.xcolumn.GetValue(),self.ycolumn.GetValue(),self.zcolumn.GetValue())
        
    def onimport(self,event):
        '''
        onimport(...)
            onimport(event)
            
            Imports an object from file to an object manager class.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue(): null = self.get_null()
        else: null = None
        coordinate_columns = self.get_coordinate_columns()
        flag = frame.object_manager.add_point_object_from_file(self.path,coordinate_columns,null=null,
                                                      filetype=self.file_type.GetValue()
                                                      ,dtype=self.data_type.GetValue()
                                                      ,at_least=self.at_least.GetValue())
        if flag: 
            frame.update_last_object_list()
            self.Destroy()
        
    def onfilecombo(self,event):
        '''
        onfilecombo(...)
            onfilecombo(event)
            
            Check what type of file was selected by user.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.file_type.GetValue()=='NPY':
            self.preview.Disable()
            self.btn_preview.Disable()
            self.at_least.Disable()
        elif self.file_type.GetValue()=='ASCII':
            self.preview.Enable()
            self.btn_preview.Enable()
            self.at_least.Enable()
        
    def onchecknull(self,event):
        '''
        onchecknull(...)
            onchecknull(event)
            
            Check if the user checkbox was checked.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue():
            self.null.Enable()
        else:
            self.null.Disable()
            
    def get_atleast_doc(self):
        '''
        get_atleast_doc(...)
            get_atleast_doc(no arguments)
            
            Returns the documenation about the at least argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        atleast_doc = """The at least value is an header checker value. The algorithm
will run rows in the input file searching for numeric values.
When it finds "n" numeric values in a row (at least value) it
assumes that the header (strings) is finished and the data has
started. Default is 3 but decrease this value if your data has
less than three nodes inside.
"""
        return atleast_doc
                
    def get_datatype_doc(self):
        '''
        get_datatype_doc(...)
            get_datatype_doc(no arguments)
            
            Returns the documenation about the at data type argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        datatype_doc = """LINK: http://docs.scipy.org/doc/numpy/user/basics.types.html
Data type 	Description
bool 	Boolean (True or False) stored as a byte 
int 	Platform integer (normally either int32 or int64) 
int8 	Byte (-128 to 127) 
int16 	Integer (-32768 to 32767) 
int32 	Integer (-2147483648 to 2147483647) 
int64 	Integer (-9223372036854775808 to 9223372036854775807) 
uint8 	Unsigned integer (0 to 255) 
uint16 	Unsigned integer (0 to 65535) 
uint32 	Unsigned integer (0 to 4294967295) 
uint64 	Unsigned integer (0 to 18446744073709551615) 
float 	Shorthand for float64. 
float16 	Half precision float: sign bit, 5 bits exponent, 10 bits mantissa 
float32 	Single precision float: sign bit, 8 bits exponent, 23 bits mantissa 
float64 	Double precision float: sign bit, 11 bits exponent, 52 bits mant...
complex 	Shorthand for complex128.
complex64 	Complex number, represented by two 32-bit floats ...
complex128 	Complex number, represented by two 64-bit floats ...
NOTE: the lower the number the lesser the memmory occupied in
the computer. If your project is big, consider controlling the
data type of each object. Default is float32.
"""
        return datatype_doc
        
    def get_filetype_doc(self):
        '''
        get_filetype_doc(...)
            get_filetype_doc(no arguments)
            
            Returns the documenation about the at file type argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        filetype_doc = """Filetype gives a general specification of how the data is
written inside the input file. ASCII type means text file that
the user can open and see whats inside (in fact you can make a
preview in this frame). Others are binary formats that are,
generally, smaller (in hard-disk space) than the ASCII but
more difficult to edit. NPY, for instance, is the numpy binary
file format.
"""
        return filetype_doc
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(no arguments)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
        

class MeshImportFrame(wx.Frame):
    def __init__(self,parent,id,path):
        wx.Frame.__init__(self,parent,id,"Mesh Import Frame",size=(400,505),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.path = path
        
        wx.StaticBox(panel,-1,'Mesh specifics',(10,10),(380,140))
        wx.StaticText(panel,-1,
                      '              Number                   Size                         First coordinate',
                      (30,30)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(30,60)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(30,90)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(30,120)).SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(70,57),(90,-1),min=1,max=100000000,initial=1)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(70,87),(90,-1),min=1,max=100000000,initial=1)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(70,117),(90,-1),min=1,max=100000000,initial=1)
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(170, 57),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(170, 87),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(170, 117),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(270, 57),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(270, 87),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(270, 117),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        wx.StaticBox(panel,-1,'Mask values',(10,150),(220,60))
        self.null_check = wx.CheckBox(panel,-1,'  has null value',(30,178))
        self.Bind(wx.EVT_CHECKBOX,self.onchecknull,id = self.null_check.GetId())

        self.null  = FS.FloatSpin(panel,-1,(130,175),(80,-1),value=-999,digits=3)
        self.null.Disable()
        
        wx.StaticBox(panel,-1,'Data type',(240,150),(150,60))
        data_type_list = ['bool','int','int8','int16','int32','int64','uint8','uint16',
                          'uint32','uint64','float','float16','float32','float64',
                          'complex','complex64','complex128']
        self.data_type = wx.ComboBox(panel,-1,'float32',(270,175),(90,-1),choices = data_type_list,
                                     style = wx.CB_READONLY)
        self.data_type.SetToolTipString(self.get_datatype_doc())
        
        wx.StaticBox(panel,-1,'File specifics',(10,210),(380,60))
        wx.StaticText(panel,-1,'File type:',(30,238))
        file_type_list = ['ASCII','NPY']
        self.file_type = wx.ComboBox(panel,-1,'ASCII',(80,235),(60,-1),
                                     choices = file_type_list,
                                     style = wx.CB_READONLY)
        self.file_type.SetToolTipString(self.get_filetype_doc())
        self.Bind(wx.EVT_COMBOBOX,self.onfilecombo,id = self.file_type.GetId())
        wx.StaticText(panel,-1,'At least:',(150,238))
        self.at_least = wx.SpinCtrl(panel,-1,'',(200,235),(60,-1),min=1,max=10000,initial=3)
        self.at_least.SetToolTipString(self.get_atleast_doc())
        self.btn_preview = wx.Button(panel,-1,'Preview',(280,223),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onpreview,id = self.btn_preview.GetId())
        if self.path[-3:] == 'npy': 
            self.file_type.SetValue('NPY')
            self.btn_preview.Disable()
            
        wx.StaticBox(panel,-1,'Preview',(10,270),(380,140))
        self.preview = wx.TextCtrl(panel,-1,'',(30,290),(340,110),style=wx.TE_MULTILINE)
        
        self.btn_import = wx.Button(panel,-1,'Import',(60,420),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onimport,id = self.btn_import.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,420),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onpreview(self,event):
        '''
        onpreview(...)
            onpreview(event)
            
            Gets a textctrl widget on this frame to show what is on the first
            few rows of the file.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        fid = open(self.path,'r')
        counter = 0
        total = ''
        while counter<100:
            line = fid.readline()
            if len(line)==0:
                break 
            counter = counter + 1
            total = total + line
        self.preview.SetValue(total)
        
    def get_null(self):
        '''
        get_null(...)
            get_null(no arguments)
            
            Gets null information (True or False and if True what is the
            null value).
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: Bool or float
            Either a boolean flag (False) indicating there is no null
            or the actual null value.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.null.GetValue().is_integer(): flag = True
        if flag: return np.int(self.null.GetValue())
        else: return self.null.GetValue()
        
    def get_blocks(self):
        '''
        get_blocks(...)
            get_blocks(no arguments)
            
            Gets a tuple with the number of blocks in each of the directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the number of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        return (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
        
    def get_size(self):
        '''
        get_size(...)
            get_size(no arguments)
            
            Gets a tuple with the size of blocks in each of the directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the size of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.size_in_x.GetValue().is_integer() and self.size_in_y.GetValue().is_integer() and self.size_in_z.GetValue().is_integer(): flag = True
        if flag: return (np.int(self.size_in_x.GetValue()),np.int(self.size_in_y.GetValue()),np.int(self.size_in_z.GetValue()))
        else: return (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
                   
    def get_first(self):
        '''
        get_first(...)
            get_size(no arguments)
            
            Gets a tuple with the first coordinate of blocks in each of the
            directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the first coordinate of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.first_in_x.GetValue().is_integer() and self.first_in_y.GetValue().is_integer() and self.first_in_z.GetValue().is_integer(): flag = True
        if flag: return (np.int(self.first_in_x.GetValue()),np.int(self.first_in_y.GetValue()),np.int(self.first_in_z.GetValue()))
        else: return (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
        
    def onimport(self,event):
        '''
        onimport(...)
            onimport(event)
            
            Imports an object from file to an object manager class.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue(): null = self.get_null()
        else: null = None
        blocks = self.get_blocks()
        size   = self.get_size()
        first  = self.get_first()
        flag = frame.object_manager.add_mesh_object_from_file(self.path,blocks,size,first,null=null,
                                                              filetype=self.file_type.GetValue()
                                                              ,dtype=self.data_type.GetValue()
                                                              ,at_least=self.at_least.GetValue())
        if flag:
            frame.update_last_object_list()
            self.Destroy()
        
    def onfilecombo(self,event):
        '''
        onfilecombo(...)
            onfilecombo(event)
            
            Check what type of file was selected by user.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.file_type.GetValue()=='NPY':
            self.preview.Disable()
            self.btn_preview.Disable()
            self.at_least.Disable()
        elif self.file_type.GetValue()=='ASCII':
            self.preview.Enable()
            self.btn_preview.Enable()
            self.at_least.Enable()
        
    def onchecknull(self,event):
        '''
        onchecknull(...)
            onchecknull(event)
            
            Check if the user checkbox was checked.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue():
            self.null.Enable()
        else:
            self.null.Disable()
            
    def get_atleast_doc(self):
        '''
        get_atleast_doc(...)
            get_atleast_doc(no arguments)
            
            Returns the documenation about the at least argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        atleast_doc = """The at least value is an header checker value. The algorithm
will run rows in the input file searching for numeric values.
When it finds "n" numeric values in a row (at least value) it
assumes that the header (strings) is finished and the data has
started. Default is 3 but decrease this value if your data has
less than three nodes inside.
"""
        return atleast_doc
                
    def get_datatype_doc(self):
        '''
        get_datatype_doc(...)
            get_datatype_doc(no arguments)
            
            Returns the documenation about the at data type argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        datatype_doc = """LINK: http://docs.scipy.org/doc/numpy/user/basics.types.html
Data type 	Description
bool 	Boolean (True or False) stored as a byte 
int 	Platform integer (normally either int32 or int64) 
int8 	Byte (-128 to 127) 
int16 	Integer (-32768 to 32767) 
int32 	Integer (-2147483648 to 2147483647) 
int64 	Integer (-9223372036854775808 to 9223372036854775807) 
uint8 	Unsigned integer (0 to 255) 
uint16 	Unsigned integer (0 to 65535) 
uint32 	Unsigned integer (0 to 4294967295) 
uint64 	Unsigned integer (0 to 18446744073709551615) 
float 	Shorthand for float64. 
float16 	Half precision float: sign bit, 5 bits exponent, 10 bits mantissa 
float32 	Single precision float: sign bit, 8 bits exponent, 23 bits mantissa 
float64 	Double precision float: sign bit, 11 bits exponent, 52 bits mant...
complex 	Shorthand for complex128.
complex64 	Complex number, represented by two 32-bit floats ...
complex128 	Complex number, represented by two 64-bit floats ...
NOTE: the lower the number the lesser the memmory occupied in
the computer. If your project is big, consider controlling the
data type of each object. Default is float32.
"""
        return datatype_doc
        
    def get_filetype_doc(self):
        '''
        get_filetype_doc(...)
            get_filetype_doc(no arguments)
            
            Returns the documenation about the at file type argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        filetype_doc = """Filetype gives a general specification of how the data is
written inside the input file. ASCII type means text file that
the user can open and see whats inside (in fact you can make a
preview in this frame). Others are binary formats that are,
generally, smaller (in hard-disk space) than the ASCII but
more difficult to edit. NPY, for instance, is the numpy binary
file format.
"""
        return filetype_doc
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(no arguments)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class SurfImportFrame(wx.Frame):
    def __init__(self,parent,id,path):
        wx.Frame.__init__(self,parent,id,"Surface Import Frame",size=(400,505),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.path = path
        
        wx.StaticBox(panel,-1,'Mesh specifics',(10,10),(380,140))
        wx.StaticText(panel,-1,
                      '              Number                   Size                         First coordinate',
                      (30,30)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(30,60)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(30,90)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(30,120)).SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(70,57),(90,-1),min=1,max=100000000,initial=1)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(70,87),(90,-1),min=1,max=100000000,initial=1)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(70,117),(90,-1),min=1,max=100000000,initial=1)
        self.blocks_in_z.Disable()
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(170, 57),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(170, 87),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(170, 117),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z.Disable()
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(270, 57),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(270, 87),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(270, 117),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z.Disable()
        
        wx.StaticBox(panel,-1,'Mask values',(10,150),(220,60))
        self.null_check = wx.CheckBox(panel,-1,'  has null value',(30,178))
        self.Bind(wx.EVT_CHECKBOX,self.onchecknull,id = self.null_check.GetId())

        self.null  = FS.FloatSpin(panel,-1,(130,175),(80,-1),value=-999,digits=3)
        self.null.Disable()
        
        wx.StaticBox(panel,-1,'Data type',(240,150),(150,60))
        data_type_list = ['bool','int','int8','int16','int32','int64','uint8','uint16',
                          'uint32','uint64','float','float16','float32','float64',
                          'complex','complex64','complex128']
        self.data_type = wx.ComboBox(panel,-1,'float32',(270,175),(90,-1),choices = data_type_list,
                                     style = wx.CB_READONLY)
        self.data_type.SetToolTipString(self.get_datatype_doc())
        
        wx.StaticBox(panel,-1,'File specifics',(10,210),(380,60))
        wx.StaticText(panel,-1,'File type:',(30,238))
        file_type_list = ['ASCII','NPY']
        self.file_type = wx.ComboBox(panel,-1,'ASCII',(80,235),(60,-1),
                                     choices = file_type_list,
                                     style = wx.CB_READONLY)
        self.file_type.SetToolTipString(self.get_filetype_doc())
        self.Bind(wx.EVT_COMBOBOX,self.onfilecombo,id = self.file_type.GetId())
        wx.StaticText(panel,-1,'At least:',(150,238))
        self.at_least = wx.SpinCtrl(panel,-1,'',(200,235),(60,-1),min=1,max=10000,initial=3)
        self.at_least.SetToolTipString(self.get_atleast_doc())
        self.btn_preview = wx.Button(panel,-1,'Preview',(280,223),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onpreview,id = self.btn_preview.GetId())
        if self.path[-3:] == 'npy': 
            self.file_type.SetValue('NPY')
            self.btn_preview.Disable()
            
        wx.StaticBox(panel,-1,'Preview',(10,270),(380,140))
        self.preview = wx.TextCtrl(panel,-1,'',(30,290),(340,110),style=wx.TE_MULTILINE)
        
        self.btn_import = wx.Button(panel,-1,'Import',(60,420),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onimport,id = self.btn_import.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,420),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onpreview(self,event):
        '''
        onpreview(...)
            onpreview(event)
            
            Gets a textctrl widget on this frame to show what is on the first
            few rows of the file.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        fid = open(self.path,'r')
        counter = 0
        total = ''
        while counter<100:
            line = fid.readline()
            if len(line)==0:
                break 
            counter = counter + 1
            total = total + line
        self.preview.SetValue(total)
        
    def get_null(self):
        '''
        get_null(...)
            get_null(no arguments)
            
            Gets null information (True or False and if True what is the
            null value).
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: Bool or float
            Either a boolean flag (False) indicating there is no null
            or the actual null value.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.null.GetValue().is_integer(): flag = True
        if flag: return np.int(self.null.GetValue())
        else: return self.null.GetValue()
        
    def get_blocks(self):
        '''
        get_blocks(...)
            get_blocks(no arguments)
            
            Gets a tuple with the number of blocks in each of the directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the number of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        return (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
        
    def get_size(self):
        '''
        get_size(...)
            get_size(no arguments)
            
            Gets a tuple with the size of blocks in each of the directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the size of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.size_in_x.GetValue().is_integer() and self.size_in_y.GetValue().is_integer() and self.size_in_z.GetValue().is_integer(): flag = True
        if flag: return (np.int(self.size_in_x.GetValue()),np.int(self.size_in_y.GetValue()),np.int(self.size_in_z.GetValue()))
        else: return (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
                   
    def get_first(self):
        '''
        get_first(...)
            get_size(no arguments)
            
            Gets a tuple with the first coordinate of blocks in each of the
            directions.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: tuple
            Tuple with the first coordinate of blocks in each of the directions.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.first_in_x.GetValue().is_integer() and self.first_in_y.GetValue().is_integer() and self.first_in_z.GetValue().is_integer(): flag = True
        if flag: return (np.int(self.first_in_x.GetValue()),np.int(self.first_in_y.GetValue()),np.int(self.first_in_z.GetValue()))
        else: return (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
        
    def onimport(self,event):
        '''
        onimport(...)
            onimport(event)
            
            Imports an object from file to an object manager class.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue(): null = self.get_null()
        else: null = None
        blocks = self.get_blocks()
        size   = self.get_size()
        first  = self.get_first()
        flag = frame.object_manager.add_surf_object_from_file(self.path,blocks,size,first,null=null,
                                                              filetype=self.file_type.GetValue()
                                                              ,dtype=self.data_type.GetValue()
                                                              ,at_least=self.at_least.GetValue())
        if flag:
            frame.update_last_object_list()
            self.Destroy()
        
    def onfilecombo(self,event):
        '''
        onfilecombo(...)
            onfilecombo(event)
            
            Check what type of file was selected by user.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.file_type.GetValue()=='NPY':
            self.preview.Disable()
            self.btn_preview.Disable()
            self.at_least.Disable()
        elif self.file_type.GetValue()=='ASCII':
            self.preview.Enable()
            self.btn_preview.Enable()
            self.at_least.Enable()
        
    def onchecknull(self,event):
        '''
        onchecknull(...)
            onchecknull(event)
            
            Check if the user checkbox was checked.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue():
            self.null.Enable()
        else:
            self.null.Disable()
            
    def get_atleast_doc(self):
        '''
        get_atleast_doc(...)
            get_atleast_doc(no arguments)
            
            Returns the documenation about the at least argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        atleast_doc = """The at least value is an header checker value. The algorithm
will run rows in the input file searching for numeric values.
When it finds "n" numeric values in a row (at least value) it
assumes that the header (strings) is finished and the data has
started. Default is 3 but decrease this value if your data has
less than three nodes inside.
"""
        return atleast_doc
                
    def get_datatype_doc(self):
        '''
        get_datatype_doc(...)
            get_datatype_doc(no arguments)
            
            Returns the documenation about the at data type argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        datatype_doc = """LINK: http://docs.scipy.org/doc/numpy/user/basics.types.html
Data type 	Description
bool 	Boolean (True or False) stored as a byte 
int 	Platform integer (normally either int32 or int64) 
int8 	Byte (-128 to 127) 
int16 	Integer (-32768 to 32767) 
int32 	Integer (-2147483648 to 2147483647) 
int64 	Integer (-9223372036854775808 to 9223372036854775807) 
uint8 	Unsigned integer (0 to 255) 
uint16 	Unsigned integer (0 to 65535) 
uint32 	Unsigned integer (0 to 4294967295) 
uint64 	Unsigned integer (0 to 18446744073709551615) 
float 	Shorthand for float64. 
float16 	Half precision float: sign bit, 5 bits exponent, 10 bits mantissa 
float32 	Single precision float: sign bit, 8 bits exponent, 23 bits mantissa 
float64 	Double precision float: sign bit, 11 bits exponent, 52 bits mant...
complex 	Shorthand for complex128.
complex64 	Complex number, represented by two 32-bit floats ...
complex128 	Complex number, represented by two 64-bit floats ...
NOTE: the lower the number the lesser the memmory occupied in
the computer. If your project is big, consider controlling the
data type of each object. Default is float32.
"""
        return datatype_doc
        
    def get_filetype_doc(self):
        '''
        get_filetype_doc(...)
            get_filetype_doc(no arguments)
            
            Returns the documenation about the at file type argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        filetype_doc = """Filetype gives a general specification of how the data is
written inside the input file. ASCII type means text file that
the user can open and see whats inside (in fact you can make a
preview in this frame). Others are binary formats that are,
generally, smaller (in hard-disk space) than the ASCII but
more difficult to edit. NPY, for instance, is the numpy binary
file format.
"""
        return filetype_doc
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(no arguments)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class DataImportFrame(wx.Frame):
    def __init__(self,parent,id,path):
        wx.Frame.__init__(self,parent,id,"Non-Spatial data Import Frame",size=(400,505),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.path = path
        
        wx.StaticBox(panel,-1,'Data specifics',(10,10),(380,140))
        wx.StaticText(panel,-1,'Automatic detecting on import.',(30,60)).SetFont(frame.regular_font)
        #wx.StaticText(panel,-1,
        #              '              Number                   Size                         First coordinate',
        #              (30,30)).SetFont(frame.regular_font)
        #wx.StaticText(panel,-1,'X(I):',(30,60)).SetFont(frame.regular_font)
        #wx.StaticText(panel,-1,'Y(J):',(30,90)).SetFont(frame.regular_font)
        #wx.StaticText(panel,-1,'Z(K):',(30,120)).SetFont(frame.regular_font)
        
        #self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(70,57),(90,-1),min=1,max=100000000,initial=1)
        #self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(70,87),(90,-1),min=1,max=100000000,initial=1)
        #self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(70,117),(90,-1),min=1,max=100000000,initial=1)
        #self.blocks_in_z.Disable()
        
        #self.size_in_x    = FS.FloatSpin(panel, -1,(170, 57),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        #self.size_in_y    = FS.FloatSpin(panel, -1,(170, 87),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        #self.size_in_z    = FS.FloatSpin(panel, -1,(170, 117),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        #self.size_in_z.Disable()
                
        #self.first_in_x   = FS.FloatSpin(panel, -1,(270, 57),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        #self.first_in_y   = FS.FloatSpin(panel, -1,(270, 87),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        #self.first_in_z   = FS.FloatSpin(panel, -1,(270, 117),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        #self.first_in_z.Disable()
        
        wx.StaticBox(panel,-1,'Mask values',(10,150),(220,60))
        self.null_check = wx.CheckBox(panel,-1,'  has null value',(30,178))
        self.Bind(wx.EVT_CHECKBOX,self.onchecknull,id = self.null_check.GetId())

        self.null  = FS.FloatSpin(panel,-1,(130,175),(80,-1),value=-999,digits=3)
        self.null.Disable()
        
        wx.StaticBox(panel,-1,'Data type',(240,150),(150,60))
        data_type_list = ['bool','int','int8','int16','int32','int64','uint8','uint16',
                          'uint32','uint64','float','float16','float32','float64',
                          'complex','complex64','complex128']
        self.data_type = wx.ComboBox(panel,-1,'float32',(270,175),(90,-1),choices = data_type_list,
                                     style = wx.CB_READONLY)
        self.data_type.SetToolTipString(self.get_datatype_doc())
        
        wx.StaticBox(panel,-1,'File specifics',(10,210),(380,60))
        wx.StaticText(panel,-1,'File type:',(30,238))
        file_type_list = ['ASCII','NPY']
        self.file_type = wx.ComboBox(panel,-1,'ASCII',(80,235),(60,-1),
                                     choices = file_type_list,
                                     style = wx.CB_READONLY)
        self.file_type.SetToolTipString(self.get_filetype_doc())
        self.file_type.Disable()
        self.Bind(wx.EVT_COMBOBOX,self.onfilecombo,id = self.file_type.GetId())
        wx.StaticText(panel,-1,'At least:',(150,238))
        self.at_least = wx.SpinCtrl(panel,-1,'',(200,235),(60,-1),min=1,max=10000,initial=3)
        self.at_least.SetToolTipString(self.get_atleast_doc())
        self.btn_preview = wx.Button(panel,-1,'Preview',(280,223),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onpreview,id = self.btn_preview.GetId())
        if self.path[-3:] == 'npy': 
            self.file_type.SetValue('NPY')
            self.btn_preview.Disable()
            
        wx.StaticBox(panel,-1,'Preview',(10,270),(380,140))
        self.preview = wx.TextCtrl(panel,-1,'',(30,290),(340,110),style=wx.TE_MULTILINE)
        
        self.btn_import = wx.Button(panel,-1,'Import',(60,420),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onimport,id = self.btn_import.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,420),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onpreview(self,event):
        '''
        onpreview(...)
            onpreview(event)
            
            Gets a textctrl widget on this frame to show what is on the first
            few rows of the file.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        fid = open(self.path,'r')
        counter = 0
        total = ''
        while counter<100:
            line = fid.readline()
            if len(line)==0:
                break 
            counter = counter + 1
            total = total + line
        self.preview.SetValue(total)
        
    def get_null(self):
        '''
        get_null(...)
            get_null(no arguments)
            
            Gets null information (True or False and if True what is the
            null value).
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: Bool or float
            Either a boolean flag (False) indicating there is no null
            or the actual null value.
        
        See also
        --------
        get_null,get_blocks,get_size,get_first
        '''
        flag = False
        if self.null.GetValue().is_integer(): flag = True
        if flag: return np.int(self.null.GetValue())
        else: return self.null.GetValue()
        
    def onimport(self,event):
        '''
        onimport(...)
            onimport(event)
            
            Imports an object from file to an object manager class.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue(): null = self.get_null()
        else: null = None
        flag =  frame.object_manager.add_data_object_from_file(self.path,null=null,
                                                               filetype=self.file_type.GetValue()
                                                               ,dtype=self.data_type.GetValue()
                                                               ,at_least=self.at_least.GetValue())
        if flag:
            frame.update_last_object_list()
            self.Destroy()
        
    def onfilecombo(self,event):
        '''
        onfilecombo(...)
            onfilecombo(event)
            
            Check what type of file was selected by user.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.file_type.GetValue()=='NPY':
            self.preview.Disable()
            self.btn_preview.Disable()
            self.at_least.Disable()
        elif self.file_type.GetValue()=='ASCII':
            self.preview.Enable()
            self.btn_preview.Enable()
            self.at_least.Enable()
        
    def onchecknull(self,event):
        '''
        onchecknull(...)
            onchecknull(event)
            
            Check if the user checkbox was checked.
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.null_check.GetValue():
            self.null.Enable()
        else:
            self.null.Disable()
            
    def get_atleast_doc(self):
        '''
        get_atleast_doc(...)
            get_atleast_doc(no arguments)
            
            Returns the documenation about the at least argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        atleast_doc = """The at least value is an header checker value. The algorithm
will run rows in the input file searching for numeric values.
When it finds "n" numeric values in a row (at least value) it
assumes that the header (strings) is finished and the data has
started. Default is 3 but decrease this value if your data has
less than three nodes inside.
"""
        return atleast_doc
                
    def get_datatype_doc(self):
        '''
        get_datatype_doc(...)
            get_datatype_doc(no arguments)
            
            Returns the documenation about the at data type argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        datatype_doc = """LINK: http://docs.scipy.org/doc/numpy/user/basics.types.html
Data type 	Description
bool 	Boolean (True or False) stored as a byte 
int 	Platform integer (normally either int32 or int64) 
int8 	Byte (-128 to 127) 
int16 	Integer (-32768 to 32767) 
int32 	Integer (-2147483648 to 2147483647) 
int64 	Integer (-9223372036854775808 to 9223372036854775807) 
uint8 	Unsigned integer (0 to 255) 
uint16 	Unsigned integer (0 to 65535) 
uint32 	Unsigned integer (0 to 4294967295) 
uint64 	Unsigned integer (0 to 18446744073709551615) 
float 	Shorthand for float64. 
float16 	Half precision float: sign bit, 5 bits exponent, 10 bits mantissa 
float32 	Single precision float: sign bit, 8 bits exponent, 23 bits mantissa 
float64 	Double precision float: sign bit, 11 bits exponent, 52 bits mant...
complex 	Shorthand for complex128.
complex64 	Complex number, represented by two 32-bit floats ...
complex128 	Complex number, represented by two 64-bit floats ...
NOTE: the lower the number the lesser the memmory occupied in
the computer. If your project is big, consider controlling the
data type of each object. Default is float32.
"""
        return datatype_doc
        
    def get_filetype_doc(self):
        '''
        get_filetype_doc(...)
            get_filetype_doc(no arguments)
            
            Returns the documenation about the at file type argument.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: string
            String with documentation.
        
        See also
        --------
        None
        '''
        filetype_doc = """Filetype gives a general specification of how the data is
written inside the input file. ASCII type means text file that
the user can open and see whats inside (in fact you can make a
preview in this frame). Others are binary formats that are,
generally, smaller (in hard-disk space) than the ASCII but
more difficult to edit. NPY, for instance, is the numpy binary
file format.
"""
        return filetype_doc
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(no arguments)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class ExportObjectFrame(wx.Frame):
    def __init__(self,parent,id,pieces,name):
        wx.Frame.__init__(self,parent,id,"Export Object Frame",size=(400,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        self.path = name
        
        wx.StaticText(panel,-1,'Export as:',(30,40))
        self.export_type = wx.ComboBox(panel,-1,'ASCII',(100,37),(100,-1),choices=['ASCII','NPY'],style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'Number of char|float precision:',(30,70))
        self.car=wx.SpinCtrl(panel,-1,'',(190,68),(60,-1),min=3,max=100,initial=15)          
        self.prec=wx.SpinCtrl(panel,-1,'',(250,68),(50,-1),min=0,max=20,initial=3)
        
        self.btn_apply = wx.Button(panel,-1,'Export',(60,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onapply(self,event):
        '''
        onapply(...)
            onapply(event)
            
            Destroys the frame and saves object to file.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            It outputs information to a file.
        
        See also
        --------
        None
        '''
        precision='%'+str(self.car.GetValue())+'.'+str(self.prec.GetValue())+'f'
        export_type = self.export_type.GetValue()
        if frame.object_manager.object_type[self.pieces[0]]=='mesh':
            frame.object_manager.export_mesh_object_to_file(self.pieces,self.path,
                                                            filetype=export_type
                                                            ,fmt=precision)
            wx.MessageBox('Mesh object exported to file.', 'Information', wx.OK | wx.ICON_INFORMATION)
        elif frame.object_manager.object_type[self.pieces[0]]=='point':
            frame.object_manager.export_point_object_to_file(self.pieces,self.path,
                                                            filetype=export_type
                                                            ,fmt=precision)
            wx.MessageBox('Point object exported to file.', 'Information', wx.OK | wx.ICON_INFORMATION)
        elif frame.object_manager.object_type[self.pieces[0]]=='surf':
            frame.object_manager.export_surf_object_to_file(self.pieces,self.path,
                                                            filetype=export_type
                                                            ,fmt=precision)
            wx.MessageBox('Surface object exported to file.', 'Information', wx.OK | wx.ICON_INFORMATION)
        elif frame.object_manager.object_type[self.pieces[0]]=='data':
            frame.object_manager.export_data_object_to_file(self.pieces,self.path,
                                                            filetype=export_type
                                                            ,fmt=precision)
            wx.MessageBox('Non-spatial Data object exported to file.', 'Information', wx.OK | wx.ICON_INFORMATION)
        self.Destroy()
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class MayaviView(HasTraits):
    
    scene = Instance(MlabSceneModel, ())
    #scene.scene.background = (0,0,0)
    #scene.disable_render = True

    # The layout of the panel created by traits.
    view = View(Item('scene', editor=SceneEditor(),
                    resizable=True,
                    show_label=False),
                resizable=True)

    def __init__(self):
        HasTraits.__init__(self)
        self.model_flag = False
        self.scene.scene.background = (0,0,0)
        self.scene.scene.foreground = (1,1,1)

        self.mycolor = 'black'
        self.mycolors = {}
        self.mycolors['black'] = (0,0,0)
        self.mycolors['white'] = (255,255,255)
        self.mycolors['gray'] = (190,190,190)
        self.mycolors['cornflower blue'] = (100,149,237)
        self.mycolors['royal blue'] = (65,105,225)
        self.mycolors['light slate blue'] = (132,112,255)
        self.mycolors['forest green'] = (34,139,34)
        self.mycolors['chartreuse green'] = (127,255,0)
        self.mycolors['olive drab green'] = (107,142,35)
        self.mycolors['gold'] = (255,215,0)
        self.mycolors['light goldenrod'] = (238,221,130)
        self.mycolors['goldenrod'] = (218,165,32)
        self.mycolors['sienna'] = (160,82,45)
        self.mycolors['wheat'] = (245,222,179)
        self.mycolors['sandy brown'] = (244,164,96)
        self.mycolors['pink'] = (255,192,203)
        self.mycolors['plum'] = (221,160,221)
        self.mycolors['orchid'] = (218,112,214)
        self.mycolors['thistle'] = (216,191,216)

        self.fycolor = 'white'
        self.fycolors = {}
        self.fycolors['black'] = (0,0,0)
        self.fycolors['white'] = (255,255,255)
        self.fycolors['gray'] = (190,190,190)
        self.fycolors['cornflower blue'] = (100,149,237)
        self.fycolors['royal blue'] = (65,105,225)
        self.fycolors['light slate blue'] = (132,112,255)
        self.fycolors['forest green'] = (34,139,34)
        self.fycolors['chartreuse green'] = (127,255,0)
        self.fycolors['olive drab green'] = (107,142,35)
        self.fycolors['gold'] = (255,215,0)
        self.fycolors['light goldenrod'] = (238,221,130)
        self.fycolors['goldenrod'] = (218,165,32)
        self.fycolors['sienna'] = (160,82,45)
        self.fycolors['wheat'] = (245,222,179)
        self.fycolors['sandy brown'] = (244,164,96)
        self.fycolors['pink'] = (255,192,203)
        self.fycolors['plum'] = (221,160,221)
        self.fycolors['orchid'] = (218,112,214)
        self.fycolors['thistle'] = (216,191,216)
        #self.scene.foreground = (0,0,0)
        # SOME USER PREFERENCES.
        self.use_texture_interpolate = False
        self.texture_interpolator = 'nearest_neighbour'
        self.general_opacity = 0
        
        # ['flat','gouraud','phong']
        self.world_interpolator = 'flat'

        self.view_objects_names = {}
        self.view_variables_names = {}
        self.view_objects_attributes = {}
        
        self.mesh_spots = {}
        # ['Xo,Yo,Zo','Xf,Yo,Zo','Xf,Yf,Zo','Xo,Yf,Zo','Xo,Yo,Zf','Xf,Yo,Zf','Xf,Yf,Zf','Xo,Yf,Zf']
        self.mesh_spots['Xo,Yo,Zo'] = [0,0,0]
        self.mesh_spots['Xf,Yo,Zo'] = [-1,0,0]
        self.mesh_spots['Xf,Yf,Zo'] = [-1,-1,0]
        self.mesh_spots['Xo,Yf,Zo'] = [0,-1,0]
        self.mesh_spots['Xo,Yo,Zf'] = [0,0,-1]
        self.mesh_spots['Xf,Yo,Zf'] = [-1,0,-1]
        self.mesh_spots['Xf,Yf,Zf'] = [-1,-1,-1]
        self.mesh_spots['Xo,Yf,Zf'] = [0,-1,-1]
        
        self.scene.anti_aliasing_frames = 0
        
    def save_everything_on_scene(self,path):
        maya.savefig(path) #,self.scene.mayavi_scene)
        wx.MessageBox('Scene was saved to object.', 'Information', wx.OK | wx.ICON_INFORMATION)
        
    def change_scene_background(self,new_color):
        self.mycolor = new_color
        new_color = self.mycolors[self.mycolor]
        color = (new_color[0]/255,new_color[1]/255,new_color[2]/255)
        self.scene.scene.background=color
        
    def change_scene_foreground(self,new_color):
        self.fycolor = new_color
        new_color = self.fycolors[self.fycolor]
        color = (new_color[0]/255,new_color[1]/255,new_color[2]/255)
        self.scene.scene.foreground=color
        
    def __get_children_count__(self):
        '''
        __get_children_count__(...)
            __get_children_count__(nor arguments)
            
            DEPRECATED - it was used as a system to manage objects on screen.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        None
        
        See also
        --------
        None
        '''
        # DEPRECATED (IT WAS A DIFFERENT SYSTEM TO KNOW IN WHICH POSITION OF
        # SCENE CHILDREN LIST WAS THE REQUIRED OBJECT).
        if False in self.children_flag:
            for i in xrange(len(self.children_flag)):
                if self.children_flag[i] == False:
                    return i
        else:
            return max(self.children_list)+1
    
    def remove_something(self,pieces):
        '''
        remove_something(...)
            remove_something(pieces)
            
            Remove the selected object from viewer.
            
        Parameters
        ----------
        pieces : list
            List of the object to be removed from the 3D viewer.
            
        Returns
        -------
        out: None
            The result is visual on the 3D viewer. 
        
        See also
        --------
        view_point, view_mesh
        '''
        self.scene.disable_render = True
        self.scene.mayavi_scene.remove_child(self.scene.mayavi_scene.children[self.view_objects_names[pieces[0]]])
        for i in self.view_objects_names.keys():
            if self.view_objects_names[i]>self.view_objects_names[pieces[0]]: self.view_objects_names[i] = self.view_objects_names[i] - 1
        del(self.view_objects_names[pieces[0]])
        del(self.view_variables_names[pieces[0]])
        del(self.view_objects_attributes[pieces[0]])
        self.scene.disable_render = False
        
    def get_slice_positions(self,pieces):
        '''
        remove_something(...)
            remove_something(pieces)
            
            Remove the selected object from viewer.
            
        Parameters
        ----------
        pieces : list
            List of the object to be removed from the 3D viewer.
            
        Returns
        -------
        out: None
            The result is visual on the 3D viewer. 
        
        See also
        --------
        view_point, view_mesh
        '''
        if pieces[0] in self.view_objects_names.keys():
            size = frame.object_manager.call_top(pieces).size
            first = frame.object_manager.call_top(pieces).first
            #return [self.view_objects_attributes[pieces[0]][0].ipw.slice_position/frame.object_manager.call_top(pieces).size[0],
            #        self.view_objects_attributes[pieces[0]][1].ipw.slice_position/frame.object_manager.call_top(pieces).size[1]
            #        ,self.view_objects_attributes[pieces[0]][2].ipw.slice_position/frame.object_manager.call_top(pieces).size[2]]
            return [(self.view_objects_attributes[pieces[0]][0].ipw.slice_position-first[0])/size[0],
                    (self.view_objects_attributes[pieces[0]][1].ipw.slice_position-first[1])/size[1]
                    ,(self.view_objects_attributes[pieces[0]][2].ipw.slice_position-first[2])/size[2]]
        else: return [0,0,0]
        
    def view_surf(self,v,x,y,pieces,colormap='jet',variable_range=False,opacity=False,colorbar_preferences = [False,False,'None','horizontal',8,20,False,'%.3f']):
        '''
        view_surf(...)
            view_surf(v,x,y,z,pieces,colormap,variable_range)
            
            Brings up the point plot to viewer.
            
        Parameters
        ----------
        v : numpy array
            1D numpy array of the point variable.
        
        x : numpy array
            1D numpy array of the coordinates in X.
            
        y : numpy array
            1D numpy array of the coordinates in Y.
            
        z : numpy array
            1D numpy array of the coordinates in Z.
            
        colormap : string
            String of the colormap used in the mesh plot.
            
        variable_range : bool or list
            If bool (False) natural minimum and maximum from variable are used,
            if list first position is minimum, second is maximum.
            
        opacity : bool or float
            Number of the transparency for the surface. If bool (False) no
            transparency is used.
            
        Returns
        -------
        out: None
            The result is visual on the 3D viewer. 
        
        See also
        --------
        view_mesh
        '''
        if frame.object_manager.call(pieces).map_flag==False:
            if type(opacity)==bool: opacity = 1
            if type(variable_range)==bool: variable_range = [v.min(),v.max()]
            sfs = maya.surf(x,y,v[:,:,0],colormap=colormap,vmin=variable_range[0],vmax=variable_range[1],opacity=opacity,mask=v.mask[:,:,0])
            if frame.object_manager.call(pieces).uselabel:
                # ['Xo,Yo,Zo','Xf,Yo,Zo','Xf,Yf,Zo','Xo,Yf,Zo','Xo,Yo,Zf','Xf,Yo,Zf','Xf,Yf,Zf','Xo,Yf,Zf']
                spot = self.mesh_spots[frame.object_manager.call(pieces).labelspot]
                spotx = x[spot[0],spot[1]]
                spoty = y[spot[0],spot[1]]
                spotz = v[spot[0],spot[1]]
                labels = frame.object_manager.call(pieces).mylabel
                color = frame.object_manager.call(pieces).mylabelcolor
                opacity = frame.object_manager.call(pieces).mylabelopacity
                lsize = frame.object_manager.call(pieces).mylabelsize
                orientation = frame.object_manager.call(pieces).mylabelorientation
                camera = frame.object_manager.call(pieces).mylabelusescamera
                maya.text3d(spotx,spoty,spotz,labels,color=color,opacity=opacity,orientation=orientation,scale=lsize,orient_to_camera=camera)        
            if colorbar_preferences[0]:
                """
                if colorbar_preferences[1] and colorbar_preferences[6]:
                    maya.colorbar(sfs,title = colorbar_preferences[2],orientation = colorbar_preferences[3])
                elif colorbar_preferences[1] and not colorbar_preferences[6]:
                    maya.colorbar(sfs,title = colorbar_preferences[2],orientation = colorbar_preferences[3])
                elif not colorbar_preferences[1] and colorbar_preferences[6]:
                    maya.colorbar(sfs,orientation = colorbar_preferences[3])
                """
                if colorbar_preferences[1]:
                    maya.colorbar(sfs,title = colorbar_preferences[2],orientation = colorbar_preferences[3])
                else:
                    maya.colorbar(sfs,orientation = colorbar_preferences[3])
        else:
            vrange = [frame.object_manager.call(pieces).map_variable.min(),frame.object_manager.call(pieces).map_variable.max()]
            sfs = maya.mesh(x,
                            y
                            ,v[:,:,0]
                            ,colormap=colormap
                            ,scalars=frame.object_manager.call(pieces).map_variable
                            ,representation='surface'
                            ,vmin=vrange[0],vmax=vrange[1],figure = self.scene.mayavi_scene)
            if frame.object_manager.call(pieces).uselabel:
                # ['Xo,Yo,Zo','Xf,Yo,Zo','Xf,Yf,Zo','Xo,Yf,Zo','Xo,Yo,Zf','Xf,Yo,Zf','Xf,Yf,Zf','Xo,Yf,Zf']
                spot = self.mesh_spots[frame.object_manager.call(pieces).labelspot]
                spotx = x[spot[0],spot[1]]
                spoty = y[spot[0],spot[1]]
                spotz = v[spot[0],spot[1]]
                labels = frame.object_manager.call(pieces).mylabel
                color = frame.object_manager.call(pieces).mylabelcolor
                opacity = frame.object_manager.call(pieces).mylabelopacity
                lsize = frame.object_manager.call(pieces).mylabelsize
                orientation = frame.object_manager.call(pieces).mylabelorientation
                camera = frame.object_manager.call(pieces).mylabelusescamera
                maya.text3d(spotx,spoty,spotz,labels,color=color,opacity=opacity,orientation=orientation,scale=lsize,orient_to_camera=camera)
            # flat, 'gouraud', 'phong' 
            sfs.actor.property.interpolation = self.world_interpolator
            sfs.actor.mapper.interpolate_scalars_before_mapping = False
        self.view_objects_names[pieces[0]]  = len(self.scene.mayavi_scene.children)-1
        self.view_variables_names[pieces[0]] = pieces[1]
        self.view_objects_attributes[pieces[0]] = [sfs]
        
    def view_triangle_mesh(self,x,y,z,triangles,pieces,colormap='jet',variable_range=False,colorbar_preferences = [False,False,'None','horizontal',8,20,False,'%.3f']):
        if pieces[0] not in self.view_objects_names.keys():
            #print x,y,z,triangles
            if frame.object_manager.call(pieces).color_flag:
                #print frame.object_manager.call(pieces).color_flag
                tts = maya.triangular_mesh(x,y,z,triangles,color=frame.object_manager.call(pieces).mesh_color,opacity=frame.object_manager.call(pieces).myopacity)
                self.view_objects_names[pieces[0]]  = len(self.scene.mayavi_scene.children)-1
                self.view_variables_names[pieces[0]] = pieces[1]
                self.view_objects_attributes[pieces[0]] = [tts]
            else:
                tts = maya.triangular_mesh(x,y,z,triangles,colormap=colormap,scalars=frame.object_manager.call(pieces).data,opacity=frame.object_manager.call(pieces).myopacity)
                self.view_objects_names[pieces[0]]  = len(self.scene.mayavi_scene.children)-1
                self.view_variables_names[pieces[0]] = pieces[1]
                self.view_objects_attributes[pieces[0]] = [tts]

    def view_mesh(self,mesh,x,y,z,pieces,colormap='jet',variable_range=False,colorbar_preferences = [False,False,'None','horizontal',8,20,False,'%.3f']):
        '''
        view_mesh(...)
            view_mesh(mesh,x,y,z,pieces,colormap,variable_range)
            
            Brings up the mesh (grid) plot to viewer.
            
        Parameters
        ----------
        mesh : numpy array
            3D numpy array of the mesh.
        
        x : numpy array
            3D numpy array of the coordinates in X.
            
        y : numpy array
            3D numpy array of the coordinates in Y.
            
        z : numpy array
            3D numpy array of the coordinates in Z.
            
        colormap : string
            String of the colormap used in the mesh plot.
            
        variable_range : bool or list
            If bool (False) natural minimum and maximum from variable are used,
            if list first position is minimum, second is maximum.
            
        Returns
        -------
        out: None
            The result is visual on the 3D viewer. 
        
        See also
        --------
        view_point
        '''
        if pieces[0] not in self.view_objects_names.keys():
            if frame.object_manager.call(pieces).world_view:
                m = maya.mesh(frame.object_manager.call_top(pieces).spherex,
                              frame.object_manager.call_top(pieces).spherey
                              ,frame.object_manager.call_top(pieces).spherez
                              ,colormap=colormap
                              ,scalars=mesh[:,:,0]
                              ,representation='surface'
                              ,vmin=variable_range[0],vmax=variable_range[1],figure = self.scene.mayavi_scene)
                # flat, 'gouraud', 'phong' 
                m.actor.property.interpolation = self.world_interpolator
                m.actor.mapper.interpolate_scalars_before_mapping = False
                self.view_objects_names[pieces[0]]  = len(self.scene.mayavi_scene.children)-1
                self.view_variables_names[pieces[0]] = pieces[1]
                self.view_objects_attributes[pieces[0]] = [m]
            else:
                scl = maya.pipeline.scalar_field(x,y,z,mesh)
                if type(variable_range)==bool: variable_range = [mesh.min(),mesh.max()]
                a = maya.pipeline.image_plane_widget(scl,
                                            plane_orientation='x_axes',
                                            slice_index=mesh.shape[0],colormap=colormap,vmin=variable_range[0],vmax=variable_range[1],figure = self.scene.mayavi_scene
                                        )
                b = maya.pipeline.image_plane_widget(scl,
                                            plane_orientation='y_axes',
                                            slice_index=mesh.shape[1],colormap=colormap,vmin=variable_range[0],vmax=variable_range[1],figure = self.scene.mayavi_scene
                                        )
                c = maya.pipeline.image_plane_widget(scl,
                                            plane_orientation='z_axes',
                                            slice_index=mesh.shape[2],colormap=colormap,vmin=variable_range[0],vmax=variable_range[1],figure = self.scene.mayavi_scene
                                        )
                # [ 0: SE EXISTE, 1: SE EXISTE TITULO, 2: TITULO, 3: orientacao, 4: nb_labels, 5: nb_colors, 6: string formatter, 7: format]
                # vertical, horizontal
                # maya.colorbar()
                # (object=None, title=None, orientation=None, nb_labels=None, nb_colors=None, label_fmt=None)
                """
                if colorbar_preferences[0]:
                    a.module_manager.scalar_lut_manager.show_scalar_bar = True # or False
                    a.module_manager.scalar_lut_manager.scalar_bar.orientation = colorbar_preferences[3]
                    #a.module_manager.scalar_lut_manager.scalar_bar.nb_labels = colorbar_preferences[4]
                    #a.module_manager.scalar_lut_manager.scalar_bar.nb_colors = colorbar_preferences[5]
                    #if colorbar_preferences[6]: a.module_manager.scalar_lut_manager.scalar_bar.label_fmt = colorbar_preferences[7]
                    if colorbar_preferences[1]: a.module_manager.scalar_lut_manager.scalar_bar.title = colorbar_preferences[2]
                """
                if frame.object_manager.call(pieces).useoutline:
                    maya.outline()
                if frame.object_manager.call(pieces).uselabel:
                    # ['Xo,Yo,Zo','Xf,Yo,Zo','Xf,Yf,Zo','Xo,Yf,Zo','Xo,Yo,Zf','Xf,Yo,Zf','Xf,Yf,Zf','Xo,Yf,Zf']
                    spot = self.mesh_spots[frame.object_manager.call(pieces).labelspot]
                    spotx = x[spot[0],spot[1],spot[2]]
                    spoty = y[spot[0],spot[1],spot[2]]
                    spotz = z[spot[0],spot[1],spot[2]]
                    labels = frame.object_manager.call(pieces).mylabel
                    color = frame.object_manager.call(pieces).mylabelcolor
                    opacity = frame.object_manager.call(pieces).mylabelopacity
                    lsize = frame.object_manager.call(pieces).mylabelsize
                    orientation = frame.object_manager.call(pieces).mylabelorientation
                    camera = frame.object_manager.call(pieces).mylabelusescamera
                    maya.text3d(spotx,spoty,spotz,labels,color=color,opacity=opacity,orientation=orientation,scale=lsize,orient_to_camera=camera)
                if colorbar_preferences[0]:
                    if colorbar_preferences[1]:
                        maya.colorbar(a,title = colorbar_preferences[2],orientation = colorbar_preferences[3])
                    else:
                        maya.colorbar(a,orientation = colorbar_preferences[3])
                #ipw.ipw.add_observer('InteractionEvent', move_view)
                #ipw.ipw.add_observer('StartInteractionEvent', move_view)
                #a.ipw.add_observer('InteractionEvent', move_view)
                #a.ipw.add_observer('StartInteractionEvent', move_view)
                #c.ipw.interaction = 0
                #self.scene.scene.interactor.interactor_style = tvtk.InteractorStyleTerrain()
                #a.ipw.foreground = (0,0,0)
                #self.scene.background = (0,0,0)
                a.ipw.margin_size_x = 0.0
                a.ipw.margin_size_y = 0.0
                b.ipw.margin_size_x = 0.0
                b.ipw.margin_size_y = 0.0
                c.ipw.margin_size_x = 0.0
                c.ipw.margin_size_y = 0.0
                a.ipw.texture_interpolate = self.use_texture_interpolate
                b.ipw.texture_interpolate = self.use_texture_interpolate
                c.ipw.texture_interpolate = self.use_texture_interpolate
                a.ipw.reslice_interpolate = self.texture_interpolator
                b.ipw.reslice_interpolate = self.texture_interpolator
                c.ipw.reslice_interpolate = self.texture_interpolator
                self.view_objects_names[pieces[0]]  = len(self.scene.mayavi_scene.children)-1
                self.view_variables_names[pieces[0]] = pieces[1]
                self.view_objects_attributes[pieces[0]] = [a,b,c]
            
    def view_point(self,v,x,y,z,pieces,colormap='jet',variable_range=False,glyph='sphere',size=1,colorbar_preferences = [False,False,'None','horizontal',8,20,False,'%.3f']):
        '''
        view_point(...)
            view_point(v,x,y,z,pieces,colormap,variable_range,glyph,size)
            
            Brings up the point plot to viewer.
            
        Parameters
        ----------
        v : numpy array
            1D numpy array of the point variable.
        
        x : numpy array
            1D numpy array of the coordinates in X.
            
        y : numpy array
            1D numpy array of the coordinates in Y.
            
        z : numpy array
            1D numpy array of the coordinates in Z.
            
        colormap : string
            String of the colormap used in the mesh plot.
            
        variable_range : bool or list
            If bool (False) natural minimum and maximum from variable are used,
            if list first position is minimum, second is maximum.
            
        glyph : string
            String of the point marker to be used. Default is sphere.
            
        size : int
            Size of the glyph. Default is 1.
            
        Returns
        -------
        out: None
            The result is visual on the 3D viewer. 
        
        See also
        --------
        view_mesh
        '''
        if frame.object_manager.call(pieces).quiver_flag==False and frame.object_manager.call(pieces).stream_flag==False and frame.object_manager.call(pieces).fracture_flag==False and frame.object_manager.call(pieces).graph_flag==False:
            mi = size-0.1
            ma = size
            if (v.max()-v.min())!=0: s = (v-v.min())*(ma-mi)/(v.max()-v.min())+mi
            else: s = np.ones(v.shape,dtype='int8')
            s0 = (variable_range[0]-v.min())*(ma-mi)/(v.max()-v.min())+mi
            s1 = (variable_range[1]-v.min())*(ma-mi)/(v.max()-v.min())+mi
            #pts = maya.points3d(x,y,z,s,colormap=colormap,vmin=s0,vmax=s1,scale_factor=1,mode = glyph)
            pts = maya.points3d(x,y,z,v,colormap=colormap,vmin=variable_range[0],vmax=variable_range[1],scale_factor=size,scale_mode='none',mode = glyph)
            # [ 0: SE EXISTE, 1: SE EXISTE TITULO, 2: TITULO, 3: orientacao, 4: nb_labels, 5: nb_colors, 6: string formatter, 7: format]
            # vertical, horizontal
            # maya.colorbar()
            # (object=None, title=None, orientation=None, nb_labels=None, nb_colors=None, label_fmt=None)
            self.scene.disable_render = True
            if frame.object_manager.call(pieces).uselabel:
                labels = frame.object_manager.call(pieces).mylabel
                color = frame.object_manager.call(pieces).mylabelcolor
                opacity = frame.object_manager.call(pieces).mylabelopacity
                lsize = frame.object_manager.call(pieces).mylabelsize
                orientation = frame.object_manager.call(pieces).mylabelorientation
                camera = frame.object_manager.call(pieces).mylabelusescamera
                for i in xrange(x.shape[0]):
                    maya.text3d(x[i]+size/2,y[i]+size/2,z[i]+size/2,labels[i],color=color,opacity=opacity,orientation=orientation,scale=lsize,orient_to_camera=camera)
            self.scene.disable_render = False
            if colorbar_preferences[0]:
                """
                if colorbar_preferences[1] and colorbar_preferences[6]:
                    maya.colorbar(pts,title = colorbar_preferences[2],orientation = colorbar_preferences[3])
                elif colorbar_preferences[1] and not colorbar_preferences[6]:
                    maya.colorbar(pts,title = colorbar_preferences[2],orientation = colorbar_preferences[3])
                elif not colorbar_preferences[1] and colorbar_preferences[6]:
                    maya.colorbar(pts,orientation = colorbar_preferences[3])
                """
                if colorbar_preferences[1]:
                    maya.colorbar(pts,title = colorbar_preferences[2],orientation = colorbar_preferences[3])
                else:
                    maya.colorbar(pts,orientation = colorbar_preferences[3])
        elif frame.object_manager.call(pieces).quiver_flag:
            u = frame.object_manager.call(pieces).u
            v = frame.object_manager.call(pieces).v
            w = frame.object_manager.call(pieces).w
            o = frame.object_manager.call(pieces).quiver_opacity
            pts = maya.quiver3d(x,y,z,u,v,w,colormap=colormap,opacity=o,scale_mode='vector',line_width=3, scale_factor=1, mode='arrow')
            self.scene.disable_render = True            
            if frame.object_manager.call(pieces).uselabel:
                labels = frame.object_manager.call(pieces).mylabel
                color = frame.object_manager.call(pieces).mylabelcolor
                opacity = frame.object_manager.call(pieces).mylabelopacity
                lsize = frame.object_manager.call(pieces).mylabelsize
                orientation = frame.object_manager.call(pieces).mylabelorientation
                camera = frame.object_manager.call(pieces).mylabelusescamera
                for i in xrange(x.shape[0]):
                    maya.text3d(x[i]+size/2,y[i]+size/2,z[i]+size/2,labels[i],color=color,opacity=opacity,orientation=orientation,scale=lsize,orient_to_camera=camera)
            self.scene.disable_render = False
        elif frame.object_manager.call(pieces).stream_flag:
            pts = maya.plot3d(x,y,z,v,colormap=colormap,vmin=variable_range[0],vmax=variable_range[1],tube_radius=size)
            self.scene.disable_render = True
            if frame.object_manager.call(pieces).uselabel:
                labels = frame.object_manager.call(pieces).mylabel
                color = frame.object_manager.call(pieces).mylabelcolor
                opacity = frame.object_manager.call(pieces).mylabelopacity
                lsize = frame.object_manager.call(pieces).mylabelsize
                orientation = frame.object_manager.call(pieces).mylabelorientation
                camera = frame.object_manager.call(pieces).mylabelusescamera
                for i in xrange(x.shape[0]):
                    maya.text3d(x[i]+size/2,y[i]+size/2,z[i]+size/2,labels[i],color=color,opacity=opacity,orientation=orientation,scale=lsize,orient_to_camera=camera)
            self.scene.disable_render = False
        elif frame.object_manager.call(pieces).fracture_flag:
            pts = maya.triangular_mesh(frame.object_manager.call(pieces).xxs,frame.object_manager.call(pieces).yys,frame.object_manager.call(pieces).zzs,frame.object_manager.call(pieces).triangles,color=frame.object_manager.call(pieces).fracture_color)
            #self.scene.disable_render = True
            #fts = []
            #for i in xrange(x.shape[0]):
            #    fts.append(maya.mesh(frame.object_manager.call(pieces).xxs[:,:,i],frame.object_manager.call(pieces).yys[:,:,i],frame.object_manager.call(pieces).zzs[:,:,i],color=frame.object_manager.call(pieces).fracture_color))
            self.scene.disable_render = True            
            if frame.object_manager.call(pieces).uselabel:
                labels = frame.object_manager.call(pieces).mylabel
                color = frame.object_manager.call(pieces).mylabelcolor
                opacity = frame.object_manager.call(pieces).mylabelopacity
                lsize = frame.object_manager.call(pieces).mylabelsize
                orientation = frame.object_manager.call(pieces).mylabelorientation
                camera = frame.object_manager.call(pieces).mylabelusescamera
                for i in xrange(x.shape[0]):
                    maya.text3d(x[i]+size/2,y[i]+size/2,z[i]+size/2,labels[i],color=color,opacity=opacity,orientation=orientation,scale=lsize,orient_to_camera=camera)
            self.scene.disable_render = False
        elif frame.object_manager.call(pieces).graph_flag:
            src = maya.pipeline.scalar_scatter(x, y, z, v)
            src.mlab_source.dataset.lines = frame.object_manager.call(pieces).graph_data
            lines = maya.pipeline.stripper(src)
            pts = maya.pipeline.surface(lines, color = frame.object_manager.call(pieces).graph_color, line_width=frame.object_manager.call(pieces).graph_line, opacity=1)
        self.view_objects_names[pieces[0]]  = len(self.scene.mayavi_scene.children)-1
        self.view_variables_names[pieces[0]] = pieces[1]
        self.view_objects_attributes[pieces[0]] = [pts]
        #if frame.object_manager.call(pieces).fracture_flag:
        #    for i in fts: self.view_objects_attributes[pieces[0]].append(i)
        
class ViewerDefinitionsFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Viewer Definitions Frame",size=(400,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        wx.StaticBox(panel,-1,'Mesh specifics',(10,10),(380,120))
        self.mesh_interpolation_flag = wx.CheckBox(panel,-1,'   Use mesh interpolation',(30,40))
        self.mesh_interpolation_flag.SetValue(frame.mayavi_view.use_texture_interpolate)
        wx.StaticText(panel,-1,'Method:',(190,40))
        self.mesh_interpolation = wx.ComboBox(panel,-1,'nearest_neighbour',(250,37),(120,-1),
                                              choices = ['nearest_neighbour','linear','cubic']
                                              ,style = wx.CB_READONLY)
        # ['flat','gouraud','phong']
        #self.world_interpolator = 'flat'                
        self.world_interpolation = wx.ComboBox(panel,-1,'flat',(250,77),(120,-1),
                                              choices = ['flat','gouraud','phong']
                                              ,style = wx.CB_READONLY)
        self.mesh_interpolation.SetValue(frame.mayavi_view.texture_interpolator)
        self.world_interpolation.SetValue(frame.mayavi_view.world_interpolator)
        
        wx.StaticText(panel,-1,'General opacity:',(30,80))
        self.general_opacity = wx.SpinCtrl(panel,-1,'',(120,77),(100,-1),min=0,max=1000,initial=int(frame.mayavi_view.general_opacity*100))
        
        wx.StaticText(panel,-1,'Viewer background color:',(30,140))
        choice = frame.mayavi_view.mycolors.keys()
        self.bg_color = wx.ComboBox(panel,-1,frame.mayavi_view.mycolor,(170,137),(100,-1),choices = choice,style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'Viewer foreground color:',(30,170))
        choice = frame.mayavi_view.fycolors.keys()
        self.fg_color = wx.ComboBox(panel,-1,frame.mayavi_view.fycolor,(170,167),(100,-1),choices = choice,style=wx.CB_READONLY)
                                              
        self.btn_apply = wx.Button(panel,-1,'Apply',(60,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onapply(self,event):
        '''
        onapply(...)
            onapply(event)
            
            Destroys the frame and changes the definitions inplace of the
            viewer.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        if self.bg_color.GetValue() != frame.mayavi_view.mycolor: 
            frame.mayavi_view.change_scene_background(self.bg_color.GetValue())
        if self.fg_color.GetValue() != frame.mayavi_view.fycolor: 
            frame.mayavi_view.change_scene_foreground(self.fg_color.GetValue())
        frame.mayavi_view.use_texture_interpolate = self.mesh_interpolation_flag.GetValue()
        frame.mayavi_view.texture_interpolator = self.mesh_interpolation.GetValue()
        frame.mayavi_view.general_opacity = self.general_opacity.GetValue()/100
        frame.mayavi_view.world_interpolator = self.world_interpolation.GetValue()
        self.Destroy()
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class definitionsFrame(wx.Frame):
    def __init__(self,parent,id,pieces,t,item):
        wx.Frame.__init__(self,parent,id,"Object definitions",size=(400,235),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.item = item
        self.pieces = pieces
        self.t = t
        wx.StaticText(panel,-1,'Rename:',(30,30))
        if self.t == 'object': self.rename = wx.TextCtrl(panel,-1,pieces[0],(100,27),(200,-1))
        elif self.t == 'variable': self.rename = wx.TextCtrl(panel,-1,pieces[1],(100,27),(200,-1))
        
        if self.t == 'variable':
            wx.StaticText(panel,-1,'Type:',(30,90))
            self.vtype = wx.ComboBox(panel,-1,frame.object_manager.object_list[pieces[0]].variable[pieces[1]].vtype,(100,87),(200,-1),choices=['continuous','discrete'],style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onvtype,id=self.vtype.GetId())
        else:
            wx.StaticText(panel,-1,'Cant change variable type in object definitions.',(30,90))
            
        if frame.object_manager.object_type[pieces[0]]=='mesh':
            slice_positions = frame.mayavi_view.get_slice_positions(pieces)
            wx.StaticText(panel,-1,'Slice positions: '+str(slice_positions[0])+' ; '+str(slice_positions[1])+' ; '+str(slice_positions[2]),(30,150))
        
        self.apply = wx.Button (panel,-1,'Change',(310,15),(70,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.apply.GetId())
        
    def onvtype(self,event):
        if self.vtype!=frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].vtype:
            res = frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].change_type()
            if res == False: wx.MessageBox('Conversion failed. Maximum number of unique values is 255.', 'Error', wx.OK | wx.ICON_INFORMATION)
            self.vtype.SetValue(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].vtype)
        
    def onapply(self,event):
        '''
        onapply(...)
            onapply(event)
            
            Changes name of the object or variable.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        name = self.rename.GetValue()
        if self.t == 'object':
            if name not in frame.object_manager.object_name:
                if self.pieces[0] in frame.mayavi_view.view_objects_names.keys():
                    items = frame.__get_item_by_list__([self.pieces[0],frame.mayavi_view.view_variables_names[self.pieces[0]]])
                    frame.remove_bold_from_selection(items,[self.pieces[0],frame.mayavi_view.view_variables_names[self.pieces[0]]])
                    frame.mayavi_view.remove_something([self.pieces[0],frame.mayavi_view.view_variables_names[self.pieces[0]]])
                frame.object_manager.change_name(self.pieces[0],name)
                frame.object_tree.SetItemText(self.item,name)
                self.Destroy()
            else:
                wx.MessageBox('That name already exists on object manager.', 'Error', wx.OK | wx.ICON_INFORMATION)
        elif self.t == 'variable':
            if name not in frame.object_manager.object_list[self.pieces[0]].get_variable_names():
                if self.pieces[0] in frame.mayavi_view.view_objects_names.keys():
                    if frame.mayavi_view.view_variables_names[self.pieces[0]] == self.pieces[1]:
                        items = frame.__get_item_by_list__(self.pieces)
                        frame.remove_bold_from_selection(items,[self.pieces[0],frame.mayavi_view.view_variables_names[self.pieces[0]]])
                        frame.mayavi_view.remove_something(self.pieces)
                frame.object_manager.object_list[self.pieces[0]].change_name(self.pieces[1],name)
                frame.object_tree.SetItemText(self.item,name)
                self.Destroy()
            else:
                wx.MessageBox('That name already exists in this object variables.', 'Error', wx.OK | wx.ICON_INFORMATION)
        #else:
        #    wx.MessageBox('Limits must be either integers or floats.', 'Error', wx.OK | wx.ICON_INFORMATION)
        #self.Destroy()
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class ObjectSurfSpecificsFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Object Surface Specifics",size=(400,335),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticBox(panel,-1,'Colormap',(10,10),(380,150))
        
        wx.StaticText(panel,-1,'Colormap:',(30,40))
        self.point_colormap = wx.ComboBox(panel,-1,'jet',(120,37),(100,-1),choices=frame.object_manager.mayavi_colormaps,style=wx.CB_READONLY)
        self.point_colormap.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mycolormap)
        
        wx.StaticText(panel,-1,'Opacity:',(30,70))
        self.opacity = wx.SpinCtrl(panel,-1,'',(120,67),(100,-1),min=1,max=100,initial=np.int(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].myopacity*100))
        
        self.cflag = wx.CheckBox(panel,-1,'  Colorbar',(30,100))
        self.cflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[0])
        self.tflag = wx.CheckBox(panel,-1,'',(100,100))
        self.tflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[1])
        self.Bind(wx.EVT_CHECKBOX,self.ontitle,id=self.tflag.GetId())
        self.title = wx.TextCtrl(panel,-1,frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[2],(120,97),(70,-1))
        if not self.tflag.GetValue():
            self.title.Disable()
        self.orientation = wx.ComboBox(panel,-1,'horizontal',(200,97),(70,-1),choices=['horizontal','vertical'],style=wx.CB_READONLY)
        self.orientation.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[3])
        self.fflag = wx.CheckBox(panel,-1,' prec.',(280,100))
        self.Bind(wx.EVT_CHECKBOX,self.onfmt,id=self.fflag.GetId())
        self.fflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[6])
        self.precision = wx.SpinCtrl(panel,-1,'',(330,97),(50,-1),min=1,max=10,initial=3)
        if not self.fflag.GetValue():
            self.precision.Disable()
        wx.StaticText(panel,-1,'Number of labels:',(30,130))
        wx.StaticText(panel,-1,'Number of colors:',(210,130))
        self.labels = wx.SpinCtrl(panel,-1,'',(120,127),(80,-1),min=2,max=100,initial=frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[4])
        self.colors = wx.SpinCtrl(panel,-1,'',(300,127),(80,-1),min=0,max=100,initial=frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[5])        
        self.labels.Disable()
        self.colors.Disable()
        self.fflag.Disable()        
        
        wx.StaticBox(panel,-1,'Range',(10,160),(380,60))
        wx.StaticText(panel,-1,'Minimum:',(30,190))
        wx.StaticText(panel,-1,'Maximum:',(210,190))
        self.minimum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[0]),(90,187),(100,-1))
        self.maximum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[1]),(270,187),(100,-1))
        self.recover = wx.Button(panel,-1,'Recover',(310,155),(60,-1))
        self.Bind(wx.EVT_BUTTON,self.onrecover,id=self.recover.GetId())        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(60,230),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,230),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onrecover(self,event):
        self.minimum.SetValue(str(frame.object_manager.call(self.pieces).basic_statistics[3]))
        self.maximum.SetValue(str(frame.object_manager.call(self.pieces).basic_statistics[4]))
        
    def ontitle(self,event):
        if self.tflag.GetValue():
            self.title.Enable()
        else:
            self.title.Disable()
            
    def onfmt(self,event):
        if self.fflag.GetValue():
            self.precision.Enable()
        else:
            self.precision.Disable()
        
    def onapply(self,event):
        '''
        onapply(...)
            onapply(event)
            
            Destroys (not anymore) the frame and changes the definitions 
            inplace of the viewer.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        try:
            flag = True
            minimum = np.float(self.minimum.GetValue())
            maximum = np.float(self.maximum.GetValue())
        except ValueError:
            flag = False
        if flag:
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].mycolormap = self.point_colormap.GetValue()
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].variable_range = [minimum,maximum]
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].myopacity = self.opacity.GetValue()/100
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].update_colorbar_preferences(self.cflag.GetValue(),self.tflag.GetValue(),self.title.GetValue(),self.orientation.GetValue(),self.labels.GetValue(),self.colors.GetValue(),self.fflag.GetValue(),'%.'+str(self.precision.GetValue())+'f')
            frame.onreview_object(self.pieces)
        else:
            wx.MessageBox('Limits must be either integers or floats.', 'Error', wx.OK | wx.ICON_INFORMATION)
            #self.Destroy()
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class ObjectTriangleMeshSpecificsFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Object triangle mesh Specifics",size=(400,335),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticBox(panel,-1,'Colormap',(10,10),(380,150))
        
        wx.StaticText(panel,-1,'Colormap:',(30,40))
        self.point_colormap = wx.ComboBox(panel,-1,'jet',(120,37),(100,-1),choices=frame.object_manager.mayavi_colormaps,style=wx.CB_READONLY)
        self.point_colormap.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mycolormap)
        
        self.color_flag = wx.CheckBox(panel,-1,'  color flag',(250,37))
        self.color_flag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].color_flag)
        
        self.color_btn = wx.Button(panel,-1,'Choose color',(250,67),(100,-1))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.color_btn.GetId())
        
        wx.StaticText(panel,-1,'Opacity:',(30,70))
        self.opacity = wx.SpinCtrl(panel,-1,'',(120,67),(100,-1),min=1,max=100,initial=np.int(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].myopacity*100))
        
        self.cflag = wx.CheckBox(panel,-1,'  Colorbar',(30,100))
        self.cflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[0])
        self.tflag = wx.CheckBox(panel,-1,'',(100,100))
        self.tflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[1])
        self.Bind(wx.EVT_CHECKBOX,self.ontitle,id=self.tflag.GetId())
        self.title = wx.TextCtrl(panel,-1,frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[2],(120,97),(70,-1))
        if not self.tflag.GetValue():
            self.title.Disable()
        self.orientation = wx.ComboBox(panel,-1,'horizontal',(200,97),(70,-1),choices=['horizontal','vertical'],style=wx.CB_READONLY)
        self.orientation.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[3])
        self.fflag = wx.CheckBox(panel,-1,' prec.',(280,100))
        self.Bind(wx.EVT_CHECKBOX,self.onfmt,id=self.fflag.GetId())
        self.fflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[6])
        self.precision = wx.SpinCtrl(panel,-1,'',(330,97),(50,-1),min=1,max=10,initial=3)
        if not self.fflag.GetValue():
            self.precision.Disable()
        wx.StaticText(panel,-1,'Number of labels:',(30,130))
        wx.StaticText(panel,-1,'Number of colors:',(210,130))
        self.labels = wx.SpinCtrl(panel,-1,'',(120,127),(80,-1),min=2,max=100,initial=frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[4])
        self.colors = wx.SpinCtrl(panel,-1,'',(300,127),(80,-1),min=0,max=100,initial=frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[5])        
        self.labels.Disable()
        self.colors.Disable()
        self.fflag.Disable()        
        
        wx.StaticBox(panel,-1,'Range',(10,160),(380,60))
        wx.StaticText(panel,-1,'Minimum:',(30,190))
        wx.StaticText(panel,-1,'Maximum:',(210,190))
        self.minimum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[0]),(90,187),(100,-1))
        self.maximum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[1]),(270,187),(100,-1))
        self.recover = wx.Button(panel,-1,'Recover',(310,155),(60,-1))
        self.Bind(wx.EVT_BUTTON,self.onrecover,id=self.recover.GetId())        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(60,230),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,230),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            frame.object_manager.call(self.pieces).mesh_color = (color[0]/255,color[1]/255,color[2]/255)
        
    def onrecover(self,event):
        self.minimum.SetValue(str(frame.object_manager.call(self.pieces).basic_statistics[3]))
        self.maximum.SetValue(str(frame.object_manager.call(self.pieces).basic_statistics[4]))
        
    def ontitle(self,event):
        if self.tflag.GetValue():
            self.title.Enable()
        else:
            self.title.Disable()
            
    def onfmt(self,event):
        if self.fflag.GetValue():
            self.precision.Enable()
        else:
            self.precision.Disable()
        
    def onapply(self,event):
        '''
        onapply(...)
            onapply(event)
            
            Destroys (not anymore) the frame and changes the definitions 
            inplace of the viewer.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        try:
            flag = True
            minimum = np.float(self.minimum.GetValue())
            maximum = np.float(self.maximum.GetValue())
        except ValueError:
            flag = False
        if flag:
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].color_flag = self.color_flag.GetValue()
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].mycolormap = self.point_colormap.GetValue()
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].variable_range = [minimum,maximum]
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].myopacity = self.opacity.GetValue()/100
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].update_colorbar_preferences(self.cflag.GetValue(),self.tflag.GetValue(),self.title.GetValue(),self.orientation.GetValue(),self.labels.GetValue(),self.colors.GetValue(),self.fflag.GetValue(),'%.'+str(self.precision.GetValue())+'f')
            frame.onreview_object(self.pieces)
        else:
            wx.MessageBox('Limits must be either integers or floats.', 'Error', wx.OK | wx.ICON_INFORMATION)
            #self.Destroy()
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class ObjectMeshSpecificsFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Object Mesh Specifics",size=(400,395),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticBox(panel,-1,'Colormap',(10,10),(380,130))
        
        wx.StaticText(panel,-1,'Colormap:',(30,40))
        self.point_colormap = wx.ComboBox(panel,-1,'jet',(120,37),(100,-1),choices=frame.object_manager.mayavi_colormaps,style=wx.CB_READONLY)
        self.point_colormap.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mycolormap)
        
        self.outline = wx.CheckBox(panel,-1,'  Use outline',(240,40))
        self.outline.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].useoutline)
        
        self.cflag = wx.CheckBox(panel,-1,'  Colorbar',(30,80))
        self.cflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[0])
        self.tflag = wx.CheckBox(panel,-1,'',(100,80))
        self.tflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[1])
        self.Bind(wx.EVT_CHECKBOX,self.ontitle,id=self.tflag.GetId())
        self.title = wx.TextCtrl(panel,-1,frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[2],(120,77),(70,-1))
        if not self.tflag.GetValue():
            self.title.Disable()
        self.orientation = wx.ComboBox(panel,-1,'horizontal',(200,77),(70,-1),choices=['horizontal','vertical'],style=wx.CB_READONLY)
        self.orientation.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[3])
        self.fflag = wx.CheckBox(panel,-1,' prec.',(280,80))
        self.Bind(wx.EVT_CHECKBOX,self.onfmt,id=self.fflag.GetId())
        self.fflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[6])
        self.precision = wx.SpinCtrl(panel,-1,'',(330,77),(50,-1),min=1,max=10,initial=3)
        if not self.fflag.GetValue():
            self.precision.Disable()
        wx.StaticText(panel,-1,'Number of labels:',(30,110))
        wx.StaticText(panel,-1,'Number of colors:',(210,110))
        self.labels = wx.SpinCtrl(panel,-1,'',(120,107),(80,-1),min=2,max=100,initial=frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[4])
        self.colors = wx.SpinCtrl(panel,-1,'',(300,107),(80,-1),min=0,max=100,initial=frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[5])
        self.labels.Disable()
        self.colors.Disable()
        self.fflag.Disable()   
        
        wx.StaticBox(panel,-1,'Range',(10,140),(380,60))
        wx.StaticText(panel,-1,'Minimum:',(30,170))
        wx.StaticText(panel,-1,'Maximum:',(210,170))
        self.minimum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[0]),(90,167),(100,-1))
        self.maximum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[1]),(270,167),(100,-1))
        self.recover = wx.Button(panel,-1,'Recover',(310,135),(60,-1))
        self.Bind(wx.EVT_BUTTON,self.onrecover,id=self.recover.GetId())       
        
        wx.StaticBox(panel,-1,'World view',(10,210),(380,60))
        self.world_flag = wx.CheckBox(panel,-1,' use world view with diameter:',(30,240))
        self.world_flag.SetValue(frame.object_manager.call(pieces).world_view)
        self.diameter = wx.SpinCtrl(panel,-1,'',(230,237),(100,-1),min=1,max=10000,initial=frame.object_manager.call_top(pieces).sphere_diameter)
        if frame.object_manager.call_top(pieces).blocks[2]!=1:
            self.world_flag.Disable()
            self.diameter.Disable()            
            
        self.btn_apply = wx.Button(panel,-1,'Apply',(60,290),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,290),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onrecover(self,event):
        self.minimum.SetValue(str(frame.object_manager.call(self.pieces).basic_statistics[3]))
        self.maximum.SetValue(str(frame.object_manager.call(self.pieces).basic_statistics[4]))
        
    def ontitle(self,event):
        if self.tflag.GetValue():
            self.title.Enable()
        else:
            self.title.Disable()
            
    def onfmt(self,event):
        if self.fflag.GetValue():
            self.precision.Enable()
        else:
            self.precision.Disable()
        
    def onapply(self,event):
        '''
        onapply(...)
            onapply(event)
            
            Destroys (not anymore) the frame and changes the definitions 
            inplace of the viewer.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        try:
            flag = True
            minimum = np.float(self.minimum.GetValue())
            maximum = np.float(self.maximum.GetValue())
        except ValueError:
            flag = False
        if flag:
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].useoutline = self.outline.GetValue()
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].mycolormap = self.point_colormap.GetValue()
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].variable_range = [minimum,maximum]
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].update_colorbar_preferences(self.cflag.GetValue(),self.tflag.GetValue(),self.title.GetValue(),self.orientation.GetValue(),self.labels.GetValue(),self.colors.GetValue(),self.fflag.GetValue(),'%.'+str(self.precision.GetValue())+'f')
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].world_view = self.world_flag.GetValue()
            old_value = int(frame.object_manager.object_list[self.pieces[0]].sphere_diameter)
            frame.object_manager.object_list[self.pieces[0]].sphere_diameter = self.diameter.GetValue()
            if self.world_flag.GetValue():
                if frame.object_manager.object_list[self.pieces[0]].sphere_flag==False:
                    frame.object_manager.object_list[self.pieces[0]].calculate_sphere_coordinates()
                else:
                    if self.diameter.GetValue()!=old_value:
                        frame.object_manager.object_list[self.pieces[0]].calculate_sphere_coordinates()
                        
            frame.onreview_object(self.pieces)
        else:
            wx.MessageBox('Limits must be either integers or floats.', 'Error', wx.OK | wx.ICON_INFORMATION)
        #self.Destroy()
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class ObjectPointSpecificsFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Object Point Specifics",size=(400,365),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticBox(panel,-1,'Colormap and glyph',(10,10),(380,180))
        
        wx.StaticText(panel,-1,'Colormap:',(30,40))
        self.point_colormap = wx.ComboBox(panel,-1,'jet',(120,37),(100,-1),choices=frame.object_manager.mayavi_colormaps,style=wx.CB_READONLY)
        self.point_colormap.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mycolormap)
        
        wx.StaticText(panel,-1,'Glyph:',(30,70))
        self.point_glyph = wx.ComboBox(panel,-1,'sphere',(120,67),(100,-1),choices=frame.object_manager.mayavi_glyphs,style=wx.CB_READONLY)
        self.point_glyph.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].glyph)
        
        wx.StaticText(panel,-1,'Glyph size:',(30,100))
        self.point_size = wx.SpinCtrl(panel,-1,'',(120,97),min=1,max=10000,initial=frame.object_manager.object_list[pieces[0]].variable[pieces[1]].glyph_size)
        
        self.cflag = wx.CheckBox(panel,-1,'  Colorbar',(30,130))
        self.cflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[0])
        self.tflag = wx.CheckBox(panel,-1,'',(100,130))
        self.tflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[1])
        self.Bind(wx.EVT_CHECKBOX,self.ontitle,id=self.tflag.GetId())
        self.title = wx.TextCtrl(panel,-1,frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[2],(120,127),(70,-1))
        if not self.tflag.GetValue():
            self.title.Disable()
        self.orientation = wx.ComboBox(panel,-1,'horizontal',(200,127),(70,-1),choices=['horizontal','vertical'],style=wx.CB_READONLY)
        self.orientation.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[3])
        self.fflag = wx.CheckBox(panel,-1,' prec.',(280,130))
        self.Bind(wx.EVT_CHECKBOX,self.onfmt,id=self.fflag.GetId())
        self.fflag.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[6])
        self.precision = wx.SpinCtrl(panel,-1,'',(330,127),(50,-1),min=1,max=10,initial=3)
        if not self.fflag.GetValue():
            self.precision.Disable()
        wx.StaticText(panel,-1,'Number of labels:',(30,160))
        wx.StaticText(panel,-1,'Number of colors:',(210,160))
        self.labels = wx.SpinCtrl(panel,-1,'',(120,157),(80,-1),min=2,max=100,initial=frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[4])
        self.colors = wx.SpinCtrl(panel,-1,'',(300,157),(80,-1),min=0,max=100,initial=frame.object_manager.object_list[pieces[0]].variable[pieces[1]].colorbar_preferences[5])         
        self.labels.Disable()
        self.colors.Disable()
        self.fflag.Disable()           
        
        wx.StaticBox(panel,-1,'Range',(10,190),(380,60))
        wx.StaticText(panel,-1,'Minimum:',(30,220))
        wx.StaticText(panel,-1,'Maximum:',(210,220))
        self.minimum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[0]),(90,217),(100,-1))
        self.maximum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[1]),(270,217),(100,-1))
        self.recover = wx.Button(panel,-1,'Recover',(310,185),(60,-1))
        self.Bind(wx.EVT_BUTTON,self.onrecover,id=self.recover.GetId())        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(60,270),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,270),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onrecover(self,event):
        self.minimum.SetValue(str(frame.object_manager.call(self.pieces).basic_statistics[3]))
        self.maximum.SetValue(str(frame.object_manager.call(self.pieces).basic_statistics[4]))
        
    def ontitle(self,event):
        if self.tflag.GetValue():
            self.title.Enable()
        else:
            self.title.Disable()
            
    def onfmt(self,event):
        if self.fflag.GetValue():
            self.precision.Enable()
        else:
            self.precision.Disable()
        
    def onapply(self,event):
        '''
        onapply(...)
            onapply(event)
            
            Destroys (not anymore) the frame and changes the definitions 
            inplace of the viewer.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        try:
            flag = True
            minimum = np.float(self.minimum.GetValue())
            maximum = np.float(self.maximum.GetValue())
        except ValueError:
            flag = False
        if flag:
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].mycolormap = self.point_colormap.GetValue()
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].glyph = self.point_glyph.GetValue()
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].glyph_size = self.point_size.GetValue()
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].variable_range = [minimum,maximum]
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].update_colorbar_preferences(self.cflag.GetValue(),self.tflag.GetValue(),self.title.GetValue(),self.orientation.GetValue(),self.labels.GetValue(),self.colors.GetValue(),self.fflag.GetValue(),'%.'+str(self.precision.GetValue())+'f')
            frame.onreview_object(self.pieces)
        else:
            wx.MessageBox('Limits must be either integers or floats.', 'Error', wx.OK | wx.ICON_INFORMATION)
        #self.Destroy()
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXmeshIvariogramFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Mesh indicator variogram",size=(830,790),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP|wx.RESIZE_BORDER|wx.MAXIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        #panel=self.panel=scrolled.ScrolledPanel(self) #wx.Panel(self)
        #vbox = wx.BoxSizer(wx.VERTICAL)
        #self.panel.SetSizer(vbox) 
        #self.panel.SetAutoLayout(1) 
        #self.panel.SetupScrolling()
        
        panel=self.panel=wx.ScrolledWindow(self,wx.ID_ANY)
        panel.SetBackgroundColour('white')
        panel.SetScrollbars(1,1,1250,750)
        
        self.pieces = pieces
        self.line0 = []
        self.pts0  = []
        self.ndir0 = []
        self.dirs = []
        blocks = frame.object_manager.call_top(pieces).blocks
        size = frame.object_manager.call_top(pieces).size
        
        #if frame.object_manager.call(pieces).variogram_adjusted_flag:
        #    ini1 = frame.object_manager.call(pieces).model_angles[0]
        #else:
        ini1 = 0
        
        wx.StaticBox(panel,-1,'Variogram parameters',(10,10),(300,250))
        self.refresh = wx.Button(panel,-1,'Refresh',(220,7),(50,-1))
        self.Bind(wx.EVT_BUTTON,self.update_directional_variograms,id=self.refresh.GetId())
        
        wx.StaticText(panel,-1,'Phase:',(30,720))
        escl = []
        for i in xrange(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata.shape[3]): escl.append(str(i))
        escl.append('multiphase')
        self.phase = wx.ComboBox(panel,-1,'0',(100,717),(100,-1),choices = escl,style=wx.CB_READONLY)
        #self.check_list = np.zeros(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata.shape[1])
        self.check_i = wx.CheckBox(panel,-1,'  use this',(230,720))
        if frame.object_manager.call(self.pieces).imodel_checks[0]==True: self.check_i.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck_i,id=self.check_i.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onphase,id=self.phase.GetId())        
        
        wx.StaticText(panel,-1,'Step X:',(30,45))
        self.angle1 = wx.SpinCtrl(panel,-1,'',(90,42),(200,-1),min=0,max=blocks[0],initial=1) #wx.Slider(panel, -1, ini1, -89, 90, (90,27), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.Bind(wx.EVT_SLIDER,self.update_nunesplot,id=self.angle1.GetId())
        wx.StaticText(panel,-1,'Step Y:',(30,95))
        self.angle2 = wx.SpinCtrl(panel,-1,'',(90,92),(200,-1),min=0,max=blocks[1],initial=0) #wx.Slider(panel, -1, 0, -89, 90, (90,77), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle2.Disable()
        wx.StaticText(panel,-1,'Step Z:',(30,145))
        self.angle3 = wx.SpinCtrl(panel,-1,'',(90,142),(200,-1),min=0,max=blocks[2],initial=0) #wx.Slider(panel, -1, 0, -89, 90, (90,137), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        if frame.object_manager.call_top(pieces).blocks[0]==1: self.angle3.Disable()
        
        wx.StaticText(panel,-1,'Tol.:',(30,195))
        self.tolerance = wx.SpinCtrl(panel,-1,'',(60,192),(50,-1),min=1,max=90,initial=15)
        wx.StaticText(panel,-1,'Bins:',(120,195))
        self.bins = wx.SpinCtrl(panel,-1,'',(150,192),(50,-1),min=2,max=500,initial=10)
        wx.StaticText(panel,-1,'Max:',(210,195))
        self.maximum = FS.FloatSpin(panel, -1,(240, 192),(60,-1),min_val=0,max_val=100000000,value = 0,digits=3)
        self.tolerance.Disable()
        self.bins.Disable()
        self.maximum.Disable()
        
        wx.StaticText(panel,-1,'Sill:',(30,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: sill = frame.object_manager.call(pieces).full_sill
        else: sill = frame.object_manager.call(pieces).basic_statistics[1]
        self.sill = FS.FloatSpin(panel, -1,(50, 222),(60,-1),min_val=0,max_val=1000000000,value = sill,digits=3)
        wx.StaticText(panel,-1,'Nug.:',(120,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: nug = frame.object_manager.call(pieces).model_nugget
        else: nug = 0
        self.nugget = wx.SpinCtrl(panel,-1,'',(150,222),(50,-1),min=0,max=100,initial=nug)
        wx.StaticText(panel,-1,'dZ:',(210,225))
        self.dz = FS.FloatSpin(panel, -1,(240, 222),(60,-1),min_val=0,max_val=1000000000,value = 0,digits=3)
        self.dz.Disable()
        
        wx.StaticBox(panel,-1,'Model 1 parameters',(10,260),(300,150))
        self.check1 = wx.CheckBox(panel,-1,' Plot model 1',(30,290))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck1,id=self.check1.GetId())
        wx.StaticText(panel,-1,'Model 1 sill:',(30,320))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 1:
                self.check1.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[0]
                ini2 = frame.object_manager.call(pieces).model_types[0]
                ini3 = frame.object_manager.call(pieces).model1_ranges[0]
                ini4 = frame.object_manager.call(pieces).model1_ranges[1]
                ini5 = frame.object_manager.call(pieces).model1_ranges[2]
            else:
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill1 = wx.SpinCtrl(panel,-1,'',(90,317),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,350))
        self.model1 = wx.ComboBox(panel,-1,ini2,(90,347),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,380))
        self.range1 = FS.FloatSpin(panel, -1,(70, 377),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range1_m1 = FS.FloatSpin(panel, -1,(155, 377),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range1_m2 = FS.FloatSpin(panel, -1,(235, 377),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check1.GetValue()==False:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model1.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill1.GetId())
            
        wx.StaticBox(panel,-1,'Model 2 parameters',(10,410),(300,150))
        self.check2 = wx.CheckBox(panel,-1,' Plot model 2',(30,440))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.check2.GetId())
        wx.StaticText(panel,-1,'Model 2 sill:',(30,470))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 2:
                self.check2.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[1]
                ini2 = frame.object_manager.call(pieces).model_types[1]
                ini3 = frame.object_manager.call(pieces).model2_ranges[0]
                ini4 = frame.object_manager.call(pieces).model2_ranges[1]
                ini5 = frame.object_manager.call(pieces).model2_ranges[2]
            else:
                self.check2.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check2.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill2 = wx.SpinCtrl(panel,-1,'',(90,467),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,500))
        self.model2 = wx.ComboBox(panel,-1,ini2,(90,497),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,530))
        self.range2 = FS.FloatSpin(panel, -1,(70, 527),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range2_m1 = FS.FloatSpin(panel, -1,(155, 527),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range2_m2 = FS.FloatSpin(panel, -1,(235, 527),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check2.GetValue()==False:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model2.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill2.GetId())
            
        wx.StaticBox(panel,-1,'Model 3 parameters',(10,560),(300,150))
        self.check3 = wx.CheckBox(panel,-1,' Plot model 3',(30,590))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck3,id=self.check3.GetId())
        wx.StaticText(panel,-1,'Model 3 sill:',(30,620))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 3:
                self.check3.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[2]
                ini2 = frame.object_manager.call(pieces).model_types[2]
                ini3 = frame.object_manager.call(pieces).model3_ranges[0]
                ini4 = frame.object_manager.call(pieces).model3_ranges[1]
                ini5 = frame.object_manager.call(pieces).model3_ranges[2]
            else:
                self.check3.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check3.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill3 = wx.SpinCtrl(panel,-1,'',(90,617),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,650))
        self.model3 = wx.ComboBox(panel,-1,ini2,(90,647),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,680))
        self.range3 = FS.FloatSpin(panel, -1,(70, 677),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range3_m1 = FS.FloatSpin(panel, -1,(155, 677),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range3_m2 = FS.FloatSpin(panel, -1,(235, 677),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check3.GetValue()==False:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
        
        if self.check1.GetValue()==False:
            self.check2.Disable()
            self.check3.Disable()
        elif self.check1.GetValue()==True and self.check2.GetValue()==False:
            self.check3.Disable()
            
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model3.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill3.GetId())
            
        self.angle1_plot = wxplot.PlotCanvas(panel,pos=(320,20))
        self.angle1_plot.SetInitialSize(size=(450,330))
        
        self.btn_mplplot1 = wx.Button(panel,-1,'Main plot',(350,660),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onmplplot1,id=self.btn_mplplot1.GetId())
        
        wx.StaticText(panel,-1,'Style:',(600,670))
        styles = ['GEOMS2','GeoMS','SGeMS','Basic','BasicX']
        self.btn_plot_style = wx.ComboBox(panel,-1,'GEOMS2',(650,667),choices = styles,style=wx.CB_READONLY)
        
    def onmplplot1(self,event):
        #dist, points, limits, sills, nugget, model_check, models, model_ranges, style='GeoMS'
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())        
        sills = [(self.sill1.GetValue()/100)*self.sill.GetValue(),(self.sill2.GetValue()/100)*self.sill.GetValue(),(self.sill3.GetValue()/100)*self.sill.GetValue()]
        nugget = self.nugget.GetValue()*self.sill.GetValue()
        model_check = [self.check1.GetValue(),self.check2.GetValue(),self.check3.GetValue()]
        models = [self.model1.GetValue(),self.model2.GetValue(),self.model3.GetValue()]
        model_ranges = [self.range1.GetValue(),self.range2.GetValue(),self.range3.GetValue()]
        style = self.btn_plot_style.GetValue()
        pympl.variogram_plot(self.ndir0[:,0,index],self.ndir0[:,1,index],[self.ndir0[:,0,index].max()],self.sill.GetValue(),sills, nugget, model_check, models, model_ranges, style)
        
    def oncheck_i(self,event):
        """
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        frame.object_manager.call(self.pieces).imodel_checks[index]=self.check_i.GetValue()
        s = 0
        for i in xrange(len(frame.object_manager.call(self.pieces).imodel_checks)-1):
            if frame.object_manager.call(self.pieces).imodel_checks[i]: s = s + frame.object_manager.call(self.pieces).imodel_full_sills[i]
        frame.object_manager.call(self.pieces).imodel_full_sills[-1]=s
        self.update_directional_variograms()
        """
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        frame.object_manager.call(self.pieces).imodel_checks[index]=self.check_i.GetValue()
        s = 0
        for i in xrange(len(frame.object_manager.call(self.pieces).imodel_checks)-1):
            if frame.object_manager.call(self.pieces).imodel_checks[i]: s = s + frame.object_manager.call(self.pieces).imodel_full_sills[i]
        frame.object_manager.call(self.pieces).imodel_full_sills[-1]=s
        self.update_directional_variograms2()
        #print frame.object_manager.call(self.pieces).imodel_checks
        
    def onphase(self,event):
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        self.sill.SetValue(frame.object_manager.call(self.pieces).imodel_full_sills[index])
        self.check_i.SetValue(frame.object_manager.call(self.pieces).imodel_checks[index])
        if self.check1.GetValue():
            self.sill1.SetValue(frame.object_manager.call(self.pieces).imodel_sills[index][0])
            self.model1.SetValue(frame.object_manager.call(self.pieces).imodel_types[index][0])
            self.range1.SetValue(frame.object_manager.call(self.pieces).imodel1_ranges[index][0])
            self.range1_m1.SetValue(frame.object_manager.call(self.pieces).imodel1_ranges[index][1])
            self.range1_m2.SetValue(frame.object_manager.call(self.pieces).imodel1_ranges[index][2])
        if self.check2.GetValue():
            self.sill2.SetValue(frame.object_manager.call(self.pieces).imodel_sills[index][1])
            self.model2.SetValue(frame.object_manager.call(self.pieces).imodel_types[index][1])
            self.range2.SetValue(frame.object_manager.call(self.pieces).imodel2_ranges[index][0])
            self.range2_m1.SetValue(frame.object_manager.call(self.pieces).imodel2_ranges[index][1])
            self.range2_m2.SetValue(frame.object_manager.call(self.pieces).imodel2_ranges[index][2])
        if self.check3.GetValue():
            self.sill3.SetValue(frame.object_manager.call(self.pieces).imodel_sills[index][2])
            self.model3.SetValue(frame.object_manager.call(self.pieces).imodel_types[index][2])
            self.range3.SetValue(frame.object_manager.call(self.pieces).imodel3_ranges[index][0])
            self.range3_m1.SetValue(frame.object_manager.call(self.pieces).imodel3_ranges[index][1])
            self.range3_m2.SetValue(frame.object_manager.call(self.pieces).imodel3_ranges[index][2])
        #self.directional_variograms()
        self.up_directional_models()
        
    def oncheck1(self,event):
        if self.check1.GetValue():
            self.sill1.Enable()
            self.model1.Enable()
            self.range1.Enable()
            self.range1_m1.Enable()
            self.range1_m2.Enable()
            self.check2.Enable()
        else:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check2.SetValue(False)
            self.check2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck2(self,event):
        if self.check2.GetValue():
            self.sill2.Enable()
            self.model2.Enable()
            self.range2.Enable()
            self.range2_m1.Enable()
            self.range2_m2.Enable()
            self.check3.Enable()
        else:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck3(self,event):
        if self.check3.GetValue():
            self.sill3.Enable()
            self.model3.Enable()
            self.range3_m1.Enable()
            self.range3_m2.Enable()
            self.range3.Enable()
        else:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            
    def up_directional_models(self):
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 300
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            blocks = frame.object_manager.call_top(self.pieces).blocks
            size = frame.object_manager.call_top(self.pieces).size
            maximum = max(blocks[0]*size[0],blocks[1]*size[1],blocks[2]*size[2])
            model_line[:,0,0] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,1] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,2] = np.linspace(0,maximum+per*maximum,msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)
        
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        ndir0 = self.ndir0 #= np.zeros((self.dirs[index][0].shape[0],2))
        if len(ndir0)>0:
            self.line0 = line0 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir0[:,0,index].max()+ndir0[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts0 = pts0  = wxplot.PolyMarker(ndir0[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line0,pts0,model_line0])
            else: gc = wxplot.PlotGraphics([line0,pts0])
            self.angle1_plot.Draw(gc,xAxis=(-1,ndir0[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir0[:,1,index].max()+ndir0[:,1,index].max()*0.1])))
        """
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        #self.dirs = frame.object_manager.call(self.pieces).directional_variogram(direction,frame.object_manager.call_top(self.pieces).size)
        self.ndir0 = ndir0 = np.zeros((self.dirs[index][0].shape[0],2))
        ndir0[:,0] = self.dirs[index][1][:]
        ndir0[:,1] = self.dirs[index][0][:]
        if len(ndir0)>0:
            self.line0 = line0 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir0[:,0].max()+ndir0[:,0].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts0 = pts0  = wxplot.PolyMarker(ndir0,marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line0,pts0,model_line0])
            else: gc = wxplot.PlotGraphics([line0,pts0])
            self.angle1_plot.Draw(gc,xAxis=(-1,ndir0[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir0[:,1].max()+ndir0[:,1].max()*0.1])))
        """            
            
    def update_directional_models(self,event):
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 300
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            blocks = frame.object_manager.call_top(self.pieces).blocks
            size = frame.object_manager.call_top(self.pieces).size
            maximum = max(blocks[0]*size[0],blocks[1]*size[1],blocks[2]*size[2])
            model_line[:,0,0] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,1] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,2] = np.linspace(0,maximum+per*maximum,msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)
            
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        #self.dirs = frame.object_manager.call(self.pieces).directional_variogram(direction,frame.object_manager.call_top(self.pieces).size)
        ndir0 = self.ndir0 #= np.zeros((self.dirs[index][0].shape[0],2))
        #ndir0[:,0] = self.dirs[index][1][:]
        #ndir0[:,1] = self.dirs[index][0][:]
        if len(ndir0)>0:
            self.line0 = line0 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir0[:,0,index].max()+ndir0[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts0 = pts0  = wxplot.PolyMarker(ndir0[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line0,pts0,model_line0])
            else: gc = wxplot.PlotGraphics([line0,pts0])
            self.angle1_plot.Draw(gc,xAxis=(-1,ndir0[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir0[:,1,index].max()+ndir0[:,1,index].max()*0.1])))
    
    def update_directional_variograms2(self):
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 300
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            blocks = frame.object_manager.call_top(self.pieces).blocks
            size = frame.object_manager.call_top(self.pieces).size
            maximum = max(blocks[0]*size[0],blocks[1]*size[1],blocks[2]*size[2])
            model_line[:,0,0] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,1] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,2] = np.linspace(0,maximum+per*maximum,msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)
        
        direction = [self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue()]
        #if direction[0]<0: newazimuth=direction[0]+90
        #else: newazimuth=direction[0]-90
        #direction2 = [newazimuth,self.angle2.GetValue()]
        #direction3 = [0,90]
        # directional_variogram(self,azimuth,dip,tolerance,bins,maximum=False,dz=False)
        #tol = self.tolerance.GetValue()
        #bins = self.bins.GetValue()
        #if self.maximum.GetValue()<1: maximum = False
        #else: maximum = self.maximum.GetValue()
        #if self.dz.GetValue()<0.1: dz = False
        #else: dz = self.dz.GetValue()
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        self.dirs = frame.object_manager.call(self.pieces).directional_multiphasic_variogram(direction,frame.object_manager.call_top(self.pieces).size)
        #print self.dirs 
        self.ndir0 = ndir0 = np.zeros((self.dirs[index][0].shape[0],2,len(self.dirs)))
        for i in xrange(len(self.dirs)):
            ndir0[:,0,i] = self.dirs[i][1][:]
            ndir0[:,1,i] = self.dirs[i][0][:]
        if len(ndir0)>0:
            self.line0 = line0 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir0[:,0,index].max()+ndir0[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts0 = pts0  = wxplot.PolyMarker(ndir0[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line0,pts0,model_line0])
            else: gc = wxplot.PlotGraphics([line0,pts0])
            self.angle1_plot.Draw(gc,xAxis=(-1,ndir0[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir0[:,1,index].max()+ndir0[:,1,index].max()*0.1])))
        

    def update_directional_variograms(self,event):
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 300
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            blocks = frame.object_manager.call_top(self.pieces).blocks
            size = frame.object_manager.call_top(self.pieces).size
            maximum = max(blocks[0]*size[0],blocks[1]*size[1],blocks[2]*size[2])
            model_line[:,0,0] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,1] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,2] = np.linspace(0,maximum+per*maximum,msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)
        
        direction = [self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue()]
        #if direction[0]<0: newazimuth=direction[0]+90
        #else: newazimuth=direction[0]-90
        #direction2 = [newazimuth,self.angle2.GetValue()]
        #direction3 = [0,90]
        # directional_variogram(self,azimuth,dip,tolerance,bins,maximum=False,dz=False)
        #tol = self.tolerance.GetValue()
        #bins = self.bins.GetValue()
        #if self.maximum.GetValue()<1: maximum = False
        #else: maximum = self.maximum.GetValue()
        #if self.dz.GetValue()<0.1: dz = False
        #else: dz = self.dz.GetValue()
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        self.dirs = frame.object_manager.call(self.pieces).directional_multiphasic_variogram(direction,frame.object_manager.call_top(self.pieces).size)
        #print self.dirs 
        self.ndir0 = ndir0 = np.zeros((self.dirs[index][0].shape[0],2,len(self.dirs)))
        for i in xrange(len(self.dirs)):
            ndir0[:,0,i] = self.dirs[i][1][:]
            ndir0[:,1,i] = self.dirs[i][0][:]
        if len(ndir0)>0:
            self.line0 = line0 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir0[:,0,index].max()+ndir0[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts0 = pts0  = wxplot.PolyMarker(ndir0[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line0,pts0,model_line0])
            else: gc = wxplot.PlotGraphics([line0,pts0])
            self.angle1_plot.Draw(gc,xAxis=(-1,ndir0[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir0[:,1,index].max()+ndir0[:,1,index].max()*0.1])))
        
        
class CTXmeshvariogramFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Mesh variogram",size=(830,790),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP|wx.RESIZE_BORDER|wx.MAXIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        #panel=self.panel=scrolled.ScrolledPanel(self) #wx.Panel(self)
        #vbox = wx.BoxSizer(wx.VERTICAL)
        #self.panel.SetSizer(vbox) 
        #self.panel.SetAutoLayout(1) 
        #self.panel.SetupScrolling()
        
        panel=self.panel=wx.ScrolledWindow(self,wx.ID_ANY)
        panel.SetBackgroundColour('white')
        panel.SetScrollbars(1,1,1250,750)
        
        self.pieces = pieces
        self.line0 = []
        self.pts0  = []
        self.ndir0 = []
        blocks = frame.object_manager.call_top(pieces).blocks
        size = frame.object_manager.call_top(pieces).size
        
        #if frame.object_manager.call(pieces).variogram_adjusted_flag:
        #    ini1 = frame.object_manager.call(pieces).model_angles[0]
        #else:
        ini1 = 0
        
        wx.StaticBox(panel,-1,'Variogram parameters',(10,10),(300,250))
        self.refresh = wx.Button(panel,-1,'Refresh',(220,7),(50,-1))
        self.Bind(wx.EVT_BUTTON,self.update_directional_variograms,id=self.refresh.GetId())
        wx.StaticText(panel,-1,'Step X:',(30,45))
        self.angle1 = wx.SpinCtrl(panel,-1,'',(90,42),(200,-1),min=0,max=blocks[0],initial=1) #wx.Slider(panel, -1, ini1, -89, 90, (90,27), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.Bind(wx.EVT_SLIDER,self.update_nunesplot,id=self.angle1.GetId())
        wx.StaticText(panel,-1,'Step Y:',(30,95))
        self.angle2 = wx.SpinCtrl(panel,-1,'',(90,92),(200,-1),min=0,max=blocks[1],initial=0) #wx.Slider(panel, -1, 0, -89, 90, (90,77), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle2.Disable()
        wx.StaticText(panel,-1,'Step Z:',(30,145))
        self.angle3 = wx.SpinCtrl(panel,-1,'',(90,142),(200,-1),min=0,max=blocks[2],initial=0) #wx.Slider(panel, -1, 0, -89, 90, (90,137), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        if frame.object_manager.call_top(pieces).blocks[0]==1: self.angle3.Disable()
        
        wx.StaticText(panel,-1,'Tol.:',(30,195))
        self.tolerance = wx.SpinCtrl(panel,-1,'',(60,192),(50,-1),min=1,max=90,initial=15)
        wx.StaticText(panel,-1,'Bins:',(120,195))
        self.bins = wx.SpinCtrl(panel,-1,'',(150,192),(50,-1),min=2,max=500,initial=10)
        wx.StaticText(panel,-1,'Max:',(210,195))
        self.maximum = FS.FloatSpin(panel, -1,(240, 192),(60,-1),min_val=0,max_val=100000000,value = 0,digits=3)
        self.tolerance.Disable()
        self.bins.Disable()
        self.maximum.Disable()
        
        wx.StaticText(panel,-1,'Sill:',(30,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: sill = frame.object_manager.call(pieces).full_sill
        else: sill = frame.object_manager.call(pieces).basic_statistics[1]
        self.sill = FS.FloatSpin(panel, -1,(50, 222),(60,-1),min_val=0,max_val=1000000000,value = sill,digits=3)
        wx.StaticText(panel,-1,'Nug.:',(120,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: nug = frame.object_manager.call(pieces).model_nugget
        else: nug = 0
        self.nugget = wx.SpinCtrl(panel,-1,'',(150,222),(50,-1),min=0,max=100,initial=nug)
        wx.StaticText(panel,-1,'dZ:',(210,225))
        self.dz = FS.FloatSpin(panel, -1,(240, 222),(60,-1),min_val=0,max_val=1000000000,value = 0,digits=3)
        self.dz.Disable()
        
        wx.StaticBox(panel,-1,'Model 1 parameters',(10,260),(300,150))
        self.check1 = wx.CheckBox(panel,-1,' Plot model 1',(30,290))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck1,id=self.check1.GetId())
        wx.StaticText(panel,-1,'Model 1 sill:',(30,320))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 1:
                self.check1.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[0]
                ini2 = frame.object_manager.call(pieces).model_types[0]
                ini3 = frame.object_manager.call(pieces).model1_ranges[0]
                ini4 = frame.object_manager.call(pieces).model1_ranges[1]
                ini5 = frame.object_manager.call(pieces).model1_ranges[2]
            else:
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill1 = wx.SpinCtrl(panel,-1,'',(90,317),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,350))
        self.model1 = wx.ComboBox(panel,-1,ini2,(90,347),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,380))
        self.range1 = FS.FloatSpin(panel, -1,(70, 377),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range1_m1 = FS.FloatSpin(panel, -1,(155, 377),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range1_m2 = FS.FloatSpin(panel, -1,(235, 377),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check1.GetValue()==False:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model1.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill1.GetId())
            
        wx.StaticBox(panel,-1,'Model 2 parameters',(10,410),(300,150))
        self.check2 = wx.CheckBox(panel,-1,' Plot model 2',(30,440))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.check2.GetId())
        wx.StaticText(panel,-1,'Model 2 sill:',(30,470))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 2:
                self.check2.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[1]
                ini2 = frame.object_manager.call(pieces).model_types[1]
                ini3 = frame.object_manager.call(pieces).model2_ranges[0]
                ini4 = frame.object_manager.call(pieces).model2_ranges[1]
                ini5 = frame.object_manager.call(pieces).model2_ranges[2]
            else:
                self.check2.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check2.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill2 = wx.SpinCtrl(panel,-1,'',(90,467),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,500))
        self.model2 = wx.ComboBox(panel,-1,ini2,(90,497),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,530))
        self.range2 = FS.FloatSpin(panel, -1,(70, 527),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range2_m1 = FS.FloatSpin(panel, -1,(155, 527),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range2_m2 = FS.FloatSpin(panel, -1,(235, 527),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check2.GetValue()==False:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model2.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill2.GetId())
            
        wx.StaticBox(panel,-1,'Model 3 parameters',(10,560),(300,150))
        self.check3 = wx.CheckBox(panel,-1,' Plot model 3',(30,590))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck3,id=self.check3.GetId())
        wx.StaticText(panel,-1,'Model 3 sill:',(30,620))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 3:
                self.check3.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[2]
                ini2 = frame.object_manager.call(pieces).model_types[2]
                ini3 = frame.object_manager.call(pieces).model3_ranges[0]
                ini4 = frame.object_manager.call(pieces).model3_ranges[1]
                ini5 = frame.object_manager.call(pieces).model3_ranges[2]
            else:
                self.check3.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check3.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill3 = wx.SpinCtrl(panel,-1,'',(90,617),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,650))
        self.model3 = wx.ComboBox(panel,-1,ini2,(90,647),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,680))
        self.range3 = FS.FloatSpin(panel, -1,(70, 677),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range3_m1 = FS.FloatSpin(panel, -1,(155, 677),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range3_m2 = FS.FloatSpin(panel, -1,(235, 677),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check3.GetValue()==False:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
        
        if self.check1.GetValue()==False:
            self.check2.Disable()
            self.check3.Disable()
        elif self.check1.GetValue()==True and self.check2.GetValue()==False:
            self.check3.Disable()
            
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model3.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill3.GetId())
            
        self.angle1_plot = wxplot.PlotCanvas(panel,pos=(320,20))
        self.angle1_plot.SetInitialSize(size=(450,330))
        
        self.btn_mplplot1 = wx.Button(panel,-1,'Main plot',(350,660),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onmplplot1,id=self.btn_mplplot1.GetId())
        
        wx.StaticText(panel,-1,'Style:',(600,670))
        styles = ['GEOMS2','GeoMS','SGeMS','Basic','BasicX']
        self.btn_plot_style = wx.ComboBox(panel,-1,'GEOMS2',(650,667),choices = styles,style=wx.CB_READONLY)
        
    def onmplplot1(self,event):
        #dist, points, limits, sills, nugget, model_check, models, model_ranges, style='GeoMS'
        sills = [(self.sill1.GetValue()/100)*self.sill.GetValue(),(self.sill2.GetValue()/100)*self.sill.GetValue(),(self.sill3.GetValue()/100)*self.sill.GetValue()]
        nugget = self.nugget.GetValue()*self.sill.GetValue()
        model_check = [self.check1.GetValue(),self.check2.GetValue(),self.check3.GetValue()]
        models = [self.model1.GetValue(),self.model2.GetValue(),self.model3.GetValue()]
        model_ranges = [self.range1.GetValue(),self.range2.GetValue(),self.range3.GetValue()]
        style = self.btn_plot_style.GetValue()
        pympl.variogram_plot(self.ndir0[:,0],self.ndir0[:,1],[self.ndir0[:,0].max()],self.sill.GetValue(),sills, nugget, model_check, models, model_ranges, style)
        
    def oncheck1(self,event):
        if self.check1.GetValue():
            self.sill1.Enable()
            self.model1.Enable()
            self.range1.Enable()
            self.range1_m1.Enable()
            self.range1_m2.Enable()
            self.check2.Enable()
        else:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check2.SetValue(False)
            self.check2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck2(self,event):
        if self.check2.GetValue():
            self.sill2.Enable()
            self.model2.Enable()
            self.range2.Enable()
            self.range2_m1.Enable()
            self.range2_m2.Enable()
            self.check3.Enable()
        else:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck3(self,event):
        if self.check3.GetValue():
            self.sill3.Enable()
            self.model3.Enable()
            self.range3_m1.Enable()
            self.range3_m2.Enable()
            self.range3.Enable()
        else:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
    
    def update_directional_models(self,event):
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 300
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            blocks = frame.object_manager.call_top(self.pieces).blocks
            size = frame.object_manager.call_top(self.pieces).size
            maximum = max(blocks[0]*size[0],blocks[1]*size[1],blocks[2]*size[2])
            model_line[:,0,0] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,1] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,2] = np.linspace(0,maximum+per*maximum,msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)
            
        if mflag1: gc = wxplot.PlotGraphics([self.line0,self.pts0,model_line0])
        else: gc = wxplot.PlotGraphics([self.line0,self.pts0])
        self.angle1_plot.Draw(gc,xAxis=(-1,self.ndir0[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,self.ndir0[:,1].max()+self.ndir0[:,1].max()*0.1])))
            
    def update_directional_variograms(self,event):
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 300
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            blocks = frame.object_manager.call_top(self.pieces).blocks
            size = frame.object_manager.call_top(self.pieces).size
            maximum = max(blocks[0]*size[0],blocks[1]*size[1],blocks[2]*size[2])
            model_line[:,0,0] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,1] = np.linspace(0,maximum+per*maximum,msize)
            model_line[:,0,2] = np.linspace(0,maximum+per*maximum,msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)
        
        direction = [self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue()]
        #if direction[0]<0: newazimuth=direction[0]+90
        #else: newazimuth=direction[0]-90
        #direction2 = [newazimuth,self.angle2.GetValue()]
        #direction3 = [0,90]
        # directional_variogram(self,azimuth,dip,tolerance,bins,maximum=False,dz=False)
        #tol = self.tolerance.GetValue()
        #bins = self.bins.GetValue()
        #if self.maximum.GetValue()<1: maximum = False
        #else: maximum = self.maximum.GetValue()
        #if self.dz.GetValue()<0.1: dz = False
        #else: dz = self.dz.GetValue()
        dir0,dir1 = frame.object_manager.call(self.pieces).directional_variogram(direction,frame.object_manager.call_top(self.pieces).size)
        self.ndir0 = ndir0 = np.zeros((dir0.shape[0],2))
        ndir0[:,0] = dir1[:]
        ndir0[:,1] = dir0[:]
        if len(ndir0)>0:
            self.line0 = line0 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir0[:,0].max()+ndir0[:,0].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts0 = pts0  = wxplot.PolyMarker(ndir0,marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line0,pts0,model_line0])
            else: gc = wxplot.PlotGraphics([line0,pts0])
            self.angle1_plot.Draw(gc,xAxis=(-1,ndir0[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir0[:,1].max()+ndir0[:,1].max()*0.1])))
        
        
class CTXpointIVariogramFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Point indicator variogram",size=(1250,850),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP|wx.RESIZE_BORDER|wx.MAXIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        #panel=self.panel=scrolled.ScrolledPanel(self) #wx.Panel(self)
        #vbox = wx.BoxSizer(wx.VERTICAL)
        #self.panel.SetSizer(vbox) 
        #self.panel.SetAutoLayout(1) 
        #self.panel.SetupScrolling()
        
        panel=self.panel=wx.ScrolledWindow(self,wx.ID_ANY)
        panel.SetBackgroundColour('white')
        panel.SetScrollbars(1,1,1250,850)        
        #panel.SetScrollbars(wx.HORIZONTAL, 0, 6, 1250)
        #panel.SetScrollbars(wx.VERTICAL, 1, 6, 850)
        
        self.pieces = pieces
        self.axis_data = None
        self.axis_data2 = None
        self.var_data = None
        
        self.line0 = []
        self.pts0  = []
        self.line1 = []
        self.pts1  = []
        self.line2 = []
        self.pts2  = []
        self.ndir0 = []
        self.ndir1 = []
        self.ndir2 = []
        
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag:
            ini1 = frame.object_manager.call(pieces).imodel_angles[0]
            ini2 = frame.object_manager.call(pieces).imodel_angles[1]
            ini3 = frame.object_manager.call(pieces).imodel_angles[2]
        else:
            ini1 = 0
            ini2 = 0
            ini3 = 0
        
        wx.StaticBox(panel,-1,'Variogram parameters',(10,10),(300,250))
        self.refresh = wx.Button(panel,-1,'Refresh',(220,7),(50,-1))
        self.Bind(wx.EVT_BUTTON,self.update_directional_variograms,id=self.refresh.GetId())
        
        wx.StaticText(panel,-1,'Phase:',(30,720))
        escl = []
        for i in xrange(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata.shape[1]-1): escl.append(str(i))
        escl.append('multiphase')
        self.phase = wx.ComboBox(panel,-1,'0',(100,717),(100,-1),choices = escl,style=wx.CB_READONLY)
        #self.check_list = np.zeros(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata.shape[1])
        self.check_i = wx.CheckBox(panel,-1,'  use this',(230,720))
        if frame.object_manager.call(self.pieces).imodel_checks[0]==True: self.check_i.SetValue(True)
        self.Bind(wx.EVT_CHECKBOX,self.oncheck_i,id=self.check_i.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onphase,id=self.phase.GetId())
        
        wx.StaticText(panel,-1,'Angle 1:',(30,45))
        self.angle1 = wx.Slider(panel, -1, ini1, -89, 90, (90,27), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.Bind(wx.EVT_SLIDER,self.update_nunesplot,id=self.angle1.GetId())
        wx.StaticText(panel,-1,'Angle 2:',(30,95))
        self.angle2 = wx.Slider(panel, -1, ini2, -89, 90, (90,77), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle2.Disable()
        wx.StaticText(panel,-1,'Angle 3:',(30,145))
        self.angle3 = wx.Slider(panel, -1, ini3, -89, 90, (90,137), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle3.Disable()
        
        wx.StaticText(panel,-1,'Tol.:',(30,195))
        self.tolerance = wx.SpinCtrl(panel,-1,'',(60,192),(50,-1),min=1,max=90,initial=15)
        wx.StaticText(panel,-1,'Bins:',(120,195))
        self.bins = wx.SpinCtrl(panel,-1,'',(150,192),(50,-1),min=2,max=500,initial=10)
        wx.StaticText(panel,-1,'Max:',(210,195))
        self.maximum = FS.FloatSpin(panel, -1,(240, 192),(60,-1),min_val=0,max_val=100000000,value = 0,digits=3)
        
        wx.StaticText(panel,-1,'Sill:',(30,225))
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag: sill = frame.object_manager.call(pieces).imodel_full_sills[0]
        else: sill = frame.object_manager.call(pieces).imodel_full_sills[0] #.basic_statistics[1]
        self.sill = FS.FloatSpin(panel, -1,(50, 222),(60,-1),min_val=0,max_val=1000000000,value = sill,digits=3)
        wx.StaticText(panel,-1,'Nug.:',(120,225))
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag: nug = frame.object_manager.call(pieces).imodel_nugget
        else: nug = 0
        self.nugget = wx.SpinCtrl(panel,-1,'',(150,222),(50,-1),min=0,max=100,initial=nug)
        wx.StaticText(panel,-1,'dZ:',(210,225))
        self.dz = FS.FloatSpin(panel, -1,(240, 222),(60,-1),min_val=0,max_val=1000000000,value = 0,digits=3)
        
        wx.StaticBox(panel,-1,'Model 1 parameters',(10,260),(300,150))
        self.check1 = wx.CheckBox(panel,-1,' Plot model 1',(30,290))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck1,id=self.check1.GetId())
        wx.StaticText(panel,-1,'Model 1 sill:',(30,320))
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_imodels >= 1:
                self.check1.SetValue(True)
                ini1 = frame.object_manager.call(pieces).imodel_sills[0][0]
                ini2 = frame.object_manager.call(pieces).imodel_types[0][0]
                ini3 = frame.object_manager.call(pieces).imodel1_ranges[0][0]
                ini4 = frame.object_manager.call(pieces).imodel1_ranges[0][1]
                ini5 = frame.object_manager.call(pieces).imodel1_ranges[0][2]
            else:
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill1 = wx.SpinCtrl(panel,-1,'',(90,317),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,350))
        self.model1 = wx.ComboBox(panel,-1,ini2,(90,347),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,380))
        self.range1 = FS.FloatSpin(panel, -1,(70, 377),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range1_m1 = FS.FloatSpin(panel, -1,(155, 377),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range1_m2 = FS.FloatSpin(panel, -1,(235, 377),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check1.GetValue()==False:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model1.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill1.GetId())
            
        wx.StaticBox(panel,-1,'Model 2 parameters',(10,410),(300,150))
        self.check2 = wx.CheckBox(panel,-1,' Plot model 2',(30,440))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.check2.GetId())
        wx.StaticText(panel,-1,'Model 2 sill:',(30,470))
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_imodels >= 2:
                self.check2.SetValue(True)
                ini1 = frame.object_manager.call(pieces).imodel_sills[0][1]
                ini2 = frame.object_manager.call(pieces).imodel_types[0][1]
                ini3 = frame.object_manager.call(pieces).imodel2_ranges[0][0]
                ini4 = frame.object_manager.call(pieces).imodel2_ranges[0][1]
                ini5 = frame.object_manager.call(pieces).imodel2_ranges[0][2]
            else:
                self.check2.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check2.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill2 = wx.SpinCtrl(panel,-1,'',(90,467),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,500))
        self.model2 = wx.ComboBox(panel,-1,ini2,(90,497),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,530))
        self.range2 = FS.FloatSpin(panel, -1,(70, 527),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range2_m1 = FS.FloatSpin(panel, -1,(155, 527),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range2_m2 = FS.FloatSpin(panel, -1,(235, 527),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check2.GetValue()==False:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model2.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill2.GetId())
            
        wx.StaticBox(panel,-1,'Model 3 parameters',(10,560),(300,150))
        self.check3 = wx.CheckBox(panel,-1,' Plot model 3',(30,590))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck3,id=self.check3.GetId())
        wx.StaticText(panel,-1,'Model 3 sill:',(30,620))
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_imodels >= 3:
                self.check3.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[0][2]
                ini2 = frame.object_manager.call(pieces).model_types[0][2]
                ini3 = frame.object_manager.call(pieces).model3_ranges[0][0]
                ini4 = frame.object_manager.call(pieces).model3_ranges[0][1]
                ini5 = frame.object_manager.call(pieces).model3_ranges[0][2]
            else:
                self.check3.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check3.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill3 = wx.SpinCtrl(panel,-1,'',(90,617),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,650))
        self.model3 = wx.ComboBox(panel,-1,ini2,(90,647),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,680))
        self.range3 = FS.FloatSpin(panel, -1,(70, 677),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range3_m1 = FS.FloatSpin(panel, -1,(155, 677),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range3_m2 = FS.FloatSpin(panel, -1,(235, 677),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check3.GetValue()==False:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
        
        if self.check1.GetValue()==False:
            self.check2.Disable()
            self.check3.Disable()
        elif self.check1.GetValue()==True and self.check2.GetValue()==False:
            self.check3.Disable()
            
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model3.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill3.GetId())
            
        
        self.angle1_plot = wxplot.PlotCanvas(panel,pos=(320,20))
        self.angle1_plot.SetInitialSize(size=(450,330))
        #self.angle1_plot.SetBackgroundColour(wx.Colour(0,255,0,255))
        self.angle2_plot = wxplot.PlotCanvas(panel,pos=(780,20))
        self.angle2_plot.SetInitialSize(size=(450,330))
        #self.angle2_plot.SetBackgroundColour(wx.Colour(0,255,0,0))
        self.angle3_plot = wxplot.PlotCanvas(panel,pos=(320,370))
        self.angle3_plot.SetInitialSize(size=(450,330))
        
        self.angle4_plot = wxplot.PlotCanvas(panel,pos=(780,370))
        self.angle4_plot.SetInitialSize(size=(450,330))
        self.angle4_plot.SetXSpec('none')
        self.angle4_plot.SetYSpec('none')
        self.do_nunesplot_variables(pieces)
        self.directional_variograms()
        
        wx.StaticText(panel,-1,'Main',(545,350))
        wx.StaticText(panel,-1,'Minor1',(1005,350))
        wx.StaticText(panel,-1,'Minor2',(545,700))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(50,750),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id=self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(200,750),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.btn_cancel.GetId())
        self.btn_mplplot1 = wx.Button(panel,-1,'Main plot',(350,750),(100,40))
        self.btn_mplplot2 = wx.Button(panel,-1,'Minor1 plot',(500,750),(100,40))
        self.btn_mplplot3 = wx.Button(panel,-1,'Minor2 plot',(650,750),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onmplplot1,id=self.btn_mplplot1.GetId())
        self.Bind(wx.EVT_BUTTON,self.onmplplot2,id=self.btn_mplplot2.GetId())
        self.Bind(wx.EVT_BUTTON,self.onmplplot3,id=self.btn_mplplot3.GetId())
        
        wx.StaticText(panel,-1,'Style:',(780,770))
        styles = ['GEOMS2','GeoMS','SGeMS','Basic','BasicX']
        self.btn_plot_style = wx.ComboBox(panel,-1,'GEOMS2',(830,767),choices = styles,style=wx.CB_READONLY)
        
        self.btn_nunes = wx.Button(panel,-1,'Nunesplot',(930,750),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onnunesplot,id=self.btn_nunes.GetId())
        nstyles = ['GEOMS2','GeoMS','SGeMS','Basic','BasicX']
        self.pic_n = wx.SpinCtrl(panel,-1,'',(1060,737),(50,-1),min=1,max=1000,initial=10)
        self.btn_nunesplot_style = wx.ComboBox(panel,-1,'GEOMS2',(1060,767),choices=nstyles,style=wx.CB_READONLY)
        
    def onnunesplot(self,event):
        #dist, points, limits, sills, nugget, model_check, models, model_ranges, style='GeoMS'
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        direction = [self.angle1.GetValue(),self.angle2.GetValue()]
        rots = self.rotate_angles(self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue())
        direction2 = [rots[1][0],rots[1][1]]
        direction3 = [rots[2][0],rots[2][1]]
        pieces = self.pieces
        style = self.btn_nunesplot_style.GetValue()
        passo = self.pic_n.GetValue()
        dist    = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].ivariogram_list[:,0,index][0:-1:passo]
        azimuth = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].ivariogram_list[:,1,index][0:-1:passo]
        dip     = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].ivariogram_list[:,2,index][0:-1:passo]
        var     = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].ivariogram_list[:,3,index][0:-1:passo]
        pympl.nunesplot(azimuth,dip,dist,var,direction,direction2,direction3,style)
        
    def onmplplot1(self,event):
        #dist, points, limits, sills, nugget, model_check, models, model_ranges, style='GeoMS'
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        sills = [(self.sill1.GetValue()/100)*self.sill.GetValue(),(self.sill2.GetValue()/100)*self.sill.GetValue(),(self.sill3.GetValue()/100)*self.sill.GetValue()]
        nugget = self.nugget.GetValue()*self.sill.GetValue()
        model_check = [self.check1.GetValue(),self.check2.GetValue(),self.check3.GetValue()]
        models = [self.model1.GetValue(),self.model2.GetValue(),self.model3.GetValue()]
        model_ranges = [self.range1.GetValue(),self.range2.GetValue(),self.range3.GetValue()]
        style = self.btn_plot_style.GetValue()
        pympl.variogram_plot(self.ndir0[:,0,index],self.ndir0[:,1,index],[self.ndir0[:,0,index].max()],self.sill.GetValue(),sills, nugget, model_check, models, model_ranges, style)
        
    def onmplplot2(self,event):
        #dist, points, limits, sills, nugget, model_check, models, model_ranges, style='GeoMS'
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        sills = [(self.sill1.GetValue()/100)*self.sill.GetValue(),(self.sill2.GetValue()/100)*self.sill.GetValue(),(self.sill3.GetValue()/100)*self.sill.GetValue()]
        nugget = self.nugget.GetValue()*self.sill.GetValue()
        model_check = [self.check1.GetValue(),self.check2.GetValue(),self.check3.GetValue()]
        models = [self.model1.GetValue(),self.model2.GetValue(),self.model3.GetValue()]
        model_ranges = [self.range1_m1.GetValue(),self.range2_m1.GetValue(),self.range3_m1.GetValue()]
        style = self.btn_plot_style.GetValue()
        pympl.variogram_plot(self.ndir1[:,0,index],self.ndir1[:,1,index],[self.ndir1[:,0,index].max()],self.sill.GetValue(),sills, nugget, model_check, models, model_ranges, style)
        
    def onmplplot3(self,event):
        #dist, points, limits, sills, nugget, model_check, models, model_ranges, style='GeoMS'
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        sills = [(self.sill1.GetValue()/100)*self.sill.GetValue(),(self.sill2.GetValue()/100)*self.sill.GetValue(),(self.sill3.GetValue()/100)*self.sill.GetValue()]
        nugget = self.nugget.GetValue()*self.sill.GetValue()
        model_check = [self.check1.GetValue(),self.check2.GetValue(),self.check3.GetValue()]
        models = [self.model1.GetValue(),self.model2.GetValue(),self.model3.GetValue()]
        model_ranges = [self.range1_m2.GetValue(),self.range2_m2.GetValue(),self.range3_m2.GetValue()]
        style = self.btn_plot_style.GetValue()
        pympl.variogram_plot(self.ndir2[:,0,index],self.ndir2[:,1,index],[self.ndir2[:,0,index].max()],self.sill.GetValue(),sills, nugget, model_check, models, model_ranges, style)
        
    def oncheck_i(self,event):
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        frame.object_manager.call(self.pieces).imodel_checks[index]=self.check_i.GetValue()
        s = 0
        for i in xrange(len(frame.object_manager.call(self.pieces).imodel_checks)-1):
            if frame.object_manager.call(self.pieces).imodel_checks[i]: s = s + frame.object_manager.call(self.pieces).imodel_full_sills[i]
        frame.object_manager.call(self.pieces).imodel_full_sills[-1]=s
        self.directional_variograms()
        #print s,frame.object_manager.call(self.pieces).imodel_full_sills,frame.object_manager.call(self.pieces).imodel_checks
        #print frame.object_manager.call(self.pieces).imodel_checks
        
    def onphase(self,event):
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        self.sill.SetValue(frame.object_manager.call(self.pieces).imodel_full_sills[index])
        self.check_i.SetValue(frame.object_manager.call(self.pieces).imodel_checks[index])
        if self.check1.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 1
            self.sill1.SetValue(frame.object_manager.call(self.pieces).imodel_sills[index][0])
            self.model1.SetValue(frame.object_manager.call(self.pieces).imodel_types[index][0])
            self.range1.SetValue(frame.object_manager.call(self.pieces).imodel1_ranges[index][0])
            self.range1_m1.SetValue(frame.object_manager.call(self.pieces).imodel1_ranges[index][1])
            self.range1_m2.SetValue(frame.object_manager.call(self.pieces).imodel1_ranges[index][2])
        if self.check2.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 2
            self.sill2.SetValue(frame.object_manager.call(self.pieces).imodel_sills[index][1])
            self.model2.SetValue(frame.object_manager.call(self.pieces).imodel_types[index][1])
            self.range2.SetValue(frame.object_manager.call(self.pieces).imodel2_ranges[index][0])
            self.range2_m1.SetValue(frame.object_manager.call(self.pieces).imodel2_ranges[index][1])
            self.range2_m2.SetValue(frame.object_manager.call(self.pieces).imodel2_ranges[index][2])
        if self.check3.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 3
            self.sill3.SetValue(frame.object_manager.call(self.pieces).imodel_sills[index][2])
            self.model3.SetValue(frame.object_manager.call(self.pieces).imodel_types[index][2])
            self.range3.SetValue(frame.object_manager.call(self.pieces).imodel3_ranges[index][0])
            self.range3_m1.SetValue(frame.object_manager.call(self.pieces).imodel3_ranges[index][1])
            self.range3_m2.SetValue(frame.object_manager.call(self.pieces).imodel3_ranges[index][2])
        self.update_variogram_plots()
        
    def onapply(self,event):
        """
        if self.check1.GetValue(): 
            frame.object_manager.call(self.pieces).number_of_models = 1
            frame.object_manager.call(self.pieces).model1_ranges = [self.range1.GetValue(),self.range1_m1.GetValue(),self.range1_m2.GetValue()]
        if self.check2.GetValue(): 
            frame.object_manager.call(self.pieces).number_of_models = 2
            frame.object_manager.call(self.pieces).model2_ranges = [self.range2.GetValue(),self.range2_m1.GetValue(),self.range2_m2.GetValue()]
        if self.check3.GetValue(): 
            frame.object_manager.call(self.pieces).number_of_models = 3
            frame.object_manager.call(self.pieces).model3_ranges = [self.range3.GetValue(),self.range3_m1.GetValue(),self.range3_m2.GetValue()]
        """
        #frame.object_manager.call(self.pieces).imodel_full_sill = self.sill.GetValue()
        frame.object_manager.call(self.pieces).imodel_nugget = self.nugget.GetValue()
        frame.object_manager.call(self.pieces).imodel_angles = [self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue()]
        #frame.object_manager.call(self.pieces).model_sills = [self.sill1.GetValue(),self.sill2.GetValue(),self.sill3.GetValue()]
        #frame.object_manager.call(self.pieces).model_types = [self.model1.GetValue(),self.model2.GetValue(),self.model3.GetValue()]
        frame.object_manager.call(self.pieces).ivariogram_adjusted_flag = True
        self.Destroy()
        
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
    def oncheck1(self,event):
        if self.check1.GetValue():
            self.sill1.Enable()
            self.model1.Enable()
            self.range1.Enable()
            self.range1_m1.Enable()
            self.range1_m2.Enable()
            self.check2.Enable()
        else:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check2.SetValue(False)
            self.check2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck2(self,event):
        if self.check2.GetValue():
            self.sill2.Enable()
            self.model2.Enable()
            self.range2.Enable()
            self.range2_m1.Enable()
            self.range2_m2.Enable()
            self.check3.Enable()
        else:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck3(self,event):
        if self.check3.GetValue():
            self.sill3.Enable()
            self.model3.Enable()
            self.range3_m1.Enable()
            self.range3_m2.Enable()
            self.range3.Enable()
        else:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()

    def update_variogram_plots(self):
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 300
        ######################UPDATE I-INFORMATION#############################
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        frame.object_manager.call(self.pieces).imodel_full_sills[index] = self.sill.GetValue()
        if self.check1.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 1
            frame.object_manager.call(self.pieces).imodel_sills[index][0]=self.sill1.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][0]=self.model1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][0]=self.range1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][1]=self.range1_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][2]=self.range1_m2.GetValue()
        if self.check2.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 2
            frame.object_manager.call(self.pieces).imodel_sills[index][1]=self.sill2.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][1]=self.model2.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][0]=self.range2.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][1]=self.range2_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][2]=self.range2_m2.GetValue()
        if self.check3.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 3
            frame.object_manager.call(self.pieces).imodel_sills[index][2]=self.sill3.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][2]=self.model3.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][0]=self.range3.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][1]=self.range3_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][2]=self.range3_m2.GetValue()
        #######################################################################
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            model_line[:,0,0] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            model_line[:,0,1] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            model_line[:,0,2] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)
        ndir0 = self.ndir0
        ndir1 = self.ndir1
        ndir2 = self.ndir2
        if len(ndir0)>0:
            self.line0 = line0 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir0[:,0,index].max()+ndir0[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts0 = pts0  = wxplot.PolyMarker(ndir0[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line0,pts0,model_line0])
            else: gc = wxplot.PlotGraphics([line0,pts0])
            self.angle1_plot.Draw(gc,xAxis=(-1,ndir0[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir0[:,1,index].max()+ndir0[:,1,index].max()*0.1])))
        
        if len(ndir1)>0:
            self.line1 = line1 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir1[:,0,index].max()+ndir1[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts1 = pts1  = wxplot.PolyMarker(ndir1[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line1,pts1,model_line1])
            else: gc = wxplot.PlotGraphics([line1,pts1])
            self.angle2_plot.Draw(gc,xAxis=(-1,ndir1[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir1[:,1,index].max()+ndir1[:,1,index].max()*0.1])))        

        if len(ndir2)>0:
            self.line2 = line2 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir2[:,0,index].max()+ndir2[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts2 = pts2  = wxplot.PolyMarker(ndir2[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line2,pts2,model_line2])
            else: gc = wxplot.PlotGraphics([line2,pts2])
            self.angle3_plot.Draw(gc,xAxis=(-1,ndir2[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir2[:,1,index].max()+ndir2[:,1,index].max()*0.1])))
    
    def directional_variograms(self):
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 300
        ######################UPDATE I-INFORMATION#############################
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        frame.object_manager.call(self.pieces).imodel_full_sills[index] = self.sill.GetValue()
        if self.check1.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 1
            frame.object_manager.call(self.pieces).imodel_sills[index][0]=self.sill1.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][0]=self.model1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][0]=self.range1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][1]=self.range1_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][2]=self.range1_m2.GetValue()
        if self.check2.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 2
            frame.object_manager.call(self.pieces).imodel_sills[index][1]=self.sill2.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][1]=self.model2.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][0]=self.range2.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][1]=self.range2_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][2]=self.range2_m2.GetValue()
        if self.check3.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 3
            frame.object_manager.call(self.pieces).imodel_sills[index][2]=self.sill3.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][2]=self.model3.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][0]=self.range3.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][1]=self.range3_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][2]=self.range3_m2.GetValue()
        #######################################################################
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            model_line[:,0,0] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            model_line[:,0,1] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            model_line[:,0,2] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)        
        
        direction = [self.angle1.GetValue(),self.angle2.GetValue()]
        rots = self.rotate_angles(self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue())
        direction2 = [rots[1][0],rots[1][1]]
        direction3 = [rots[2][0],rots[2][1]]
        # directional_variogram(self,azimuth,dip,tolerance,bins,maximum=False,dz=False)
        tol = self.tolerance.GetValue()
        bins = self.bins.GetValue()
        if self.maximum.GetValue()<1: maximum = False
        else: maximum = self.maximum.GetValue()
        if self.dz.GetValue()<0.1: dz = False
        else: dz = self.dz.GetValue()
        
        if self.phase.GetValue()=='multiphase': index = -1
        else: index = int(self.phase.GetValue())
        for i in xrange(frame.object_manager.call(self.pieces).idata.shape[1]):
            dir0 = frame.object_manager.call(self.pieces).directional_ivariogram(direction[0],direction[1],tol,bins,i,maximum,dz)        
            if i==0: self.ndir0 = ndir0 = np.zeros((dir0[0].shape[0],2,frame.object_manager.call(self.pieces).idata.shape[1]))            
            self.ndir0[:,0,i] = dir0[1]
            self.ndir0[:,1,i] = dir0[0]
        if len(ndir0)>0:
            self.line0 = line0 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir0[:,0,index].max()+ndir0[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts0 = pts0  = wxplot.PolyMarker(ndir0[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line0,pts0,model_line0])
            else: gc = wxplot.PlotGraphics([line0,pts0])
            self.angle1_plot.Draw(gc,xAxis=(-1,ndir0[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir0[:,1,index].max()+ndir0[:,1,index].max()*0.1])))
        
        for i in xrange(frame.object_manager.call(self.pieces).idata.shape[1]):
            dir1 = frame.object_manager.call(self.pieces).directional_ivariogram(direction2[0],direction2[1],tol,bins,index,maximum,dz)
            if i==0: self.ndir1 = ndir1 = np.zeros((dir1[0].shape[0],2,frame.object_manager.call(self.pieces).idata.shape[1]))            
            self.ndir1[:,0,i] = dir1[1]
            self.ndir1[:,1,i] = dir1[0]
        if len(ndir1)>0:
            self.line1 = line1 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir1[:,0,index].max()+ndir1[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts1 = pts1  = wxplot.PolyMarker(ndir1[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line1,pts1,model_line1])
            else: gc = wxplot.PlotGraphics([line1,pts1])
            self.angle2_plot.Draw(gc,xAxis=(-1,ndir1[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir1[:,1,index].max()+ndir1[:,1,index].max()*0.1])))        

        for i in xrange(frame.object_manager.call(self.pieces).idata.shape[1]):        
            dir2 = frame.object_manager.call(self.pieces).directional_ivariogram(direction3[0],direction3[1],tol,bins,index,maximum,dz)
            if i==0: self.ndir2 = ndir2 = np.zeros((dir2[0].shape[0],2,frame.object_manager.call(self.pieces).idata.shape[1]))            
            self.ndir2[:,0,i] = dir2[1]
            self.ndir2[:,1,i] = dir2[0]
        if len(ndir2)>0:
            self.line2 = line2 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir2[:,0,index].max()+ndir2[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts2 = pts2  = wxplot.PolyMarker(ndir2[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line2,pts2,model_line2])
            else: gc = wxplot.PlotGraphics([line2,pts2])
            self.angle3_plot.Draw(gc,xAxis=(-1,ndir2[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir2[:,1,index].max()+ndir2[:,1,index].max()*0.1])))

    def rotate_angles(self,A,D,R):
        # BASED ON: https://docs.google.com/viewer?a=v&pid=sites&srcid=ZGVmYXVsdGRvbWFpbnxnbGVubm11cnJheXxneDoyMTJiZTZlNzVlMjFiZTFi
        A = A*np.pi/180
        D = D*np.pi/180
        R = R*np.pi/180
        cos = np.cos
        sin = np.sin
        # gamma = azimuth = A ; beta = dip = D ; alpha = rake = R
        # cosD*cosA  cosA*sinR*sinD-cosR*sinA  cosR*cosA*sinD+sinR*sinA
        # cosD*sinA  cosR*cosA+sinR*sinD*sinA  -cosA*sinR+cosR*sinD*sinA
        # -sinD      cosD*sinR                 cosR*cosD
        
        r = np.array([[cos(D)*cos(A),cos(A)*sin(R)*sin(D)-cos(R)*sin(A),cos(R)*cos(A)*sin(D)+sin(R)*sin(A)],
                       [cos(D)*sin(A),cos(R)*cos(A)+sin(R)*sin(D)*sin(A),-cos(A)*sin(R)+cos(R)*sin(D)*sin(A)]
                       ,[-sin(D),cos(D)*sin(R),cos(R)*cos(D)]])
        res = r.dot(np.array([1,0,0]))
        res1 = r.dot(np.array([0,1,0]))
        res2 = r.dot(np.array([0,0,1]))
        rad = 1
        #return (np.int(A*180/np.pi+0.5),np.int(D*180/np.pi+0.5)),(np.int(np.arctan(res1[1]/res1[0])*180/np.pi+0.5),np.int(np.arccos(res1[2]/rad)*180/np.pi-90+0.5)),(np.int(np.arctan(res2[1]/res2[0])*180/np.pi+0.5),np.int(np.arccos(res2[2]/rad)*180/np.pi+0.5)*-1)       
        lista = [[np.int(A*180/np.pi),np.int(D*180/np.pi)],[np.int(np.arctan2(res1[1],res1[0])*180/np.pi),np.int(np.arccos(res1[2]/rad)*180/np.pi-90)],[np.int(np.arctan2(res2[1],res2[0])*180/np.pi),90+np.int(np.arccos(res2[2]/rad)*180/np.pi)]]
        if lista[1][0]>90: lista[1][0]=lista[1][0]-180
        elif lista[1][0]<-90: lista[1][0] = lista[1][0]+180
        if lista[2][0]>90: lista[2][0]=lista[2][0]-180
        elif lista[2][0]<-90: lista[2][0] = lista[2][0]+180
        if lista[2][1]>90: lista[2][1] = 90-lista[2][1]
        return lista

    def update_directional_models(self,event):
        ######################UPDATE I-INFORMATION#############################
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        frame.object_manager.call(self.pieces).imodel_full_sills[index] = self.sill.GetValue()
        if self.check1.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 1
            frame.object_manager.call(self.pieces).imodel_sills[index][0]=self.sill1.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][0]=self.model1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][0]=self.range1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][1]=self.range1_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][2]=self.range1_m2.GetValue()
        if self.check2.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 2
            frame.object_manager.call(self.pieces).imodel_sills[index][1]=self.sill2.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][1]=self.model2.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][0]=self.range2.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][1]=self.range2_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][2]=self.range2_m2.GetValue()
        if self.check3.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 3
            frame.object_manager.call(self.pieces).imodel_sills[index][2]=self.sill3.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][2]=self.model3.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][0]=self.range3.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][1]=self.range3_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][2]=self.range3_m2.GetValue()
        #######################################################################
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 300
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            model_line[:,0,0] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            model_line[:,0,1] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            model_line[:,0,2] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)
            
        if mflag1: gc = wxplot.PlotGraphics([self.line0,self.pts0,model_line0])
        else: gc = wxplot.PlotGraphics([self.line0,self.pts0])
        self.angle1_plot.Draw(gc,xAxis=(-1,self.ndir0[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,self.ndir0[:,1,index].max()+self.ndir0[:,1,index].max()*0.1])))
        
        if mflag1: gc = wxplot.PlotGraphics([self.line1,self.pts1,model_line1])
        else: gc = wxplot.PlotGraphics([self.line1,self.pts1])
        self.angle2_plot.Draw(gc,xAxis=(-1,self.ndir1[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,self.ndir1[:,1,index].max()+self.ndir1[:,1,index].max()*0.1])))        
    
        if mflag1: gc = wxplot.PlotGraphics([self.line2,self.pts2,model_line2])
        else: gc = wxplot.PlotGraphics([self.line2,self.pts2])
        self.angle3_plot.Draw(gc,xAxis=(-1,self.ndir2[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,self.ndir2[:,1,index].max()+self.ndir2[:,1,index].max()*0.1])))
        
        
    def update_directional_variograms(self,event):
        ######################UPDATE I-INFORMATION#############################
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        frame.object_manager.call(self.pieces).imodel_full_sills[index] = self.sill.GetValue()
        if self.check1.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 1
            frame.object_manager.call(self.pieces).imodel_sills[index][0]=self.sill1.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][0]=self.model1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][0]=self.range1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][1]=self.range1_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel1_ranges[index][2]=self.range1_m2.GetValue()
        if self.check2.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 2
            frame.object_manager.call(self.pieces).imodel_sills[index][1]=self.sill2.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][1]=self.model2.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][0]=self.range2.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][1]=self.range2_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel2_ranges[index][2]=self.range2_m2.GetValue()
        if self.check3.GetValue():
            frame.object_manager.call(self.pieces).number_of_imodels = 3
            frame.object_manager.call(self.pieces).imodel_sills[index][2]=self.sill3.GetValue()
            frame.object_manager.call(self.pieces).imodel_types[index][2]=self.model3.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][0]=self.range3.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][1]=self.range3_m1.GetValue()
            frame.object_manager.call(self.pieces).imodel3_ranges[index][2]=self.range3_m2.GetValue()
        #######################################################################
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 300
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            model_line[:,0,0] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            model_line[:,0,1] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            model_line[:,0,2] = np.linspace(0,frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max()+per*frame.object_manager.call(self.pieces).ivariogram_list[:,0,0].max(),msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)
        
        direction = [self.angle1.GetValue(),self.angle2.GetValue()]
        rots = self.rotate_angles(self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue())
        direction2 = [rots[1][0],rots[1][1]]
        direction3 = [rots[2][0],rots[2][1]]
        # directional_variogram(self,azimuth,dip,tolerance,bins,maximum=False,dz=False)
        tol = self.tolerance.GetValue()
        bins = self.bins.GetValue()
        if self.maximum.GetValue()<1: maximum = False
        else: maximum = self.maximum.GetValue()
        if self.dz.GetValue()<0.1: dz = False
        else: dz = self.dz.GetValue()
        
        if self.phase.GetValue()=='multiphase': index = -1
        else: index = int(self.phase.GetValue())
        for i in xrange(frame.object_manager.call(self.pieces).idata.shape[1]):
            dir0 = frame.object_manager.call(self.pieces).directional_ivariogram(direction[0],direction[1],tol,bins,i,maximum,dz)        
            if i==0: self.ndir0 = ndir0 = np.zeros((dir0[0].shape[0],2,frame.object_manager.call(self.pieces).idata.shape[1]))            
            self.ndir0[:,0,i] = dir0[1]
            self.ndir0[:,1,i] = dir0[0]
        if len(ndir0)>0:
            self.line0 = line0 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir0[:,0,index].max()+ndir0[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts0 = pts0  = wxplot.PolyMarker(ndir0[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line0,pts0,model_line0])
            else: gc = wxplot.PlotGraphics([line0,pts0])
            self.angle1_plot.Draw(gc,xAxis=(-1,ndir0[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir0[:,1,index].max()+ndir0[:,1,index].max()*0.1])))
        
        for i in xrange(frame.object_manager.call(self.pieces).idata.shape[1]):
            dir1 = frame.object_manager.call(self.pieces).directional_ivariogram(direction2[0],direction2[1],tol,bins,index,maximum,dz)
            if i==0: self.ndir1 = ndir1 = np.zeros((dir1[0].shape[0],2,frame.object_manager.call(self.pieces).idata.shape[1]))            
            self.ndir1[:,0,i] = dir1[1]
            self.ndir1[:,1,i] = dir1[0]
        if len(ndir1)>0:
            self.line1 = line1 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir1[:,0,index].max()+ndir1[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts1 = pts1  = wxplot.PolyMarker(ndir1[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line1,pts1,model_line1])
            else: gc = wxplot.PlotGraphics([line1,pts1])
            self.angle2_plot.Draw(gc,xAxis=(-1,ndir1[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir1[:,1,index].max()+ndir1[:,1,index].max()*0.1])))        

        for i in xrange(frame.object_manager.call(self.pieces).idata.shape[1]):        
            dir2 = frame.object_manager.call(self.pieces).directional_ivariogram(direction3[0],direction3[1],tol,bins,index,maximum,dz)
            if i==0: self.ndir2 = ndir2 = np.zeros((dir2[0].shape[0],2,frame.object_manager.call(self.pieces).idata.shape[1]))            
            self.ndir2[:,0,i] = dir2[1]
            self.ndir2[:,1,i] = dir2[0]
        if len(ndir2)>0:
            self.line2 = line2 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir2[:,0,index].max()+ndir2[:,0,index].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts2 = pts2  = wxplot.PolyMarker(ndir2[:,:,index],marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line2,pts2,model_line2])
            else: gc = wxplot.PlotGraphics([line2,pts2])
            self.angle3_plot.Draw(gc,xAxis=(-1,ndir2[:,0,index].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir2[:,1,index].max()+ndir2[:,1,index].max()*0.1])))
    
    def do_nunesplot_variables(self,pieces):
        self.axis_data = np.zeros((1000,2))
        self.axis_data[:,0] = np.linspace(-90,90,1000)
        self.axis_data[:,1] = np.sqrt(90**2-self.axis_data[:,0]**2)
        self.axis_data2 = [(-90,0),(90,0)]
        self.var_data = np.zeros((frame.object_manager.object_list[pieces[0]].variable[pieces[1]].ivariogram_list.shape[0],2))
        self.var_data[:,0] = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].ivariogram_list[:,1,0]
        self.var_data[:,1] = np.abs(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].ivariogram_list[:,2,0])
        azimuth = self.var_data[:,0].copy()
        self.var_data[:,0] = np.cos(azimuth*np.pi/180-np.pi/2)*(90-np.abs(self.var_data[:,1]))
        self.var_data[:,1] = np.sin(azimuth*np.pi/180+np.pi/2)*(90-np.abs(self.var_data[:,1]))
        line = wxplot.PolyLine(self.axis_data, legend='', colour='black', width=2)
        line2 = wxplot.PolyLine(self.axis_data2, legend='', colour='black', width=2)
        vpoints = wxplot.PolyMarker(self.var_data, marker='circle',colour='red',width=1)
        gc = wxplot.PlotGraphics([line,line2,vpoints])
        self.angle4_plot.Draw(gc,xAxis=(-90,90), yAxis=(-20,110))
        #dpoints = wxplot.PolyMarker([(0,90),(90,0)], marker='circle',colour='green',width=7)
        #gc = wxplot.PlotGraphics([dpoints])
        #self.angle5_plot.Draw(gc,xAxis=(-90,90), yAxis=(0,90))
        
    def update_nunesplot(self,event):
        direction = [self.angle1.GetValue(),self.angle2.GetValue()]
        """
        self.angle5_plot.Clear()
        azimuth0 = np.cos(direction[0]*np.pi/180-np.pi/2)*(90-np.abs(direction[1]))
        dip0 = np.sin(direction[0]*np.pi/180+np.pi/2)*(90-np.abs(direction[1]))
        if direction[0]<0: newazimuth=direction[0]+90
        else: newazimuth=direction[0]-90
        azimuth1 = np.cos(newazimuth*np.pi/180-np.pi/2)*(90-np.abs(direction[1]))
        dip1 = np.sin(newazimuth*np.pi/180+np.pi/2)*(90-np.abs(direction[1]))
        dpoints = wxplot.PolyMarker([(azimuth0,dip0),(azimuth1,dip1)], marker='circle',colour='green',width=7)
        gc = wxplot.PlotGraphics([dpoints])
        self.angle5_plot.Draw(gc,xAxis=(-90,90), yAxis=(0,90))
        """
        
class CTXpointVariogramFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Point variogram",size=(1250,850),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP|wx.RESIZE_BORDER|wx.MAXIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        #panel=self.panel=scrolled.ScrolledPanel(self) #wx.Panel(self)
        #vbox = wx.BoxSizer(wx.VERTICAL)
        #self.panel.SetSizer(vbox) 
        #self.panel.SetAutoLayout(1) 
        #self.panel.SetupScrolling()
        
        panel=self.panel=wx.ScrolledWindow(self,wx.ID_ANY)
        panel.SetBackgroundColour('white')
        panel.SetScrollbars(1,1,1250,850)
        #panel.SetScrollbars(wx.HORIZONTAL, 0, 6, 1250)
        #panel.SetScrollbars(wx.VERTICAL, 1, 6, 850)
        
        self.pieces = pieces
        self.axis_data = None
        self.axis_data2 = None
        self.var_data = None
        
        self.line0 = []
        self.pts0  = []
        self.line1 = []
        self.pts1  = []
        self.line2 = []
        self.pts2  = []
        self.ndir0 = []
        self.ndir1 = []
        self.ndir2 = []
        
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            ini1 = frame.object_manager.call(pieces).model_angles[0]
            ini2 = frame.object_manager.call(pieces).model_angles[1]
            ini3 = frame.object_manager.call(pieces).model_angles[2]
        else:
            ini1 = 0
            ini2 = 0
            ini3 = 0
        
        wx.StaticBox(panel,-1,'Variogram parameters',(10,10),(300,250))
        self.refresh = wx.Button(panel,-1,'Refresh',(220,7),(50,-1))
        self.Bind(wx.EVT_BUTTON,self.update_directional_variograms,id=self.refresh.GetId())
        wx.StaticText(panel,-1,'Azimuth (1):',(30,45))
        self.angle1 = wx.Slider(panel, -1, ini1, -89, 90, (90,27), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.Bind(wx.EVT_SLIDER,self.update_nunesplot,id=self.angle1.GetId())
        wx.StaticText(panel,-1,'Dip (2):',(30,95))
        self.angle2 = wx.Slider(panel, -1, 0, -89, 90, (90,77), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle2.Disable()
        wx.StaticText(panel,-1,'Rake (3):',(30,145))
        self.angle3 = wx.Slider(panel, -1, 0, -89, 90, (90,137), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle3.Disable()
        
        wx.StaticText(panel,-1,'Tol.:',(30,195))
        self.tolerance = wx.SpinCtrl(panel,-1,'',(60,192),(50,-1),min=1,max=90,initial=15)
        wx.StaticText(panel,-1,'Bins:',(120,195))
        self.bins = wx.SpinCtrl(panel,-1,'',(150,192),(50,-1),min=2,max=500,initial=10)
        wx.StaticText(panel,-1,'Max:',(210,195))
        self.maximum = FS.FloatSpin(panel, -1,(240, 192),(60,-1),min_val=0,max_val=100000000,value = 0,digits=3)
        
        wx.StaticText(panel,-1,'Sill:',(30,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: sill = frame.object_manager.call(pieces).full_sill
        else: sill = frame.object_manager.call(pieces).basic_statistics[1]
        self.sill = FS.FloatSpin(panel, -1,(50, 222),(60,-1),min_val=0,max_val=1000000000,value = sill,digits=3)
        wx.StaticText(panel,-1,'Nug.:',(120,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: nug = frame.object_manager.call(pieces).model_nugget
        else: nug = 0
        self.nugget = wx.SpinCtrl(panel,-1,'',(150,222),(50,-1),min=0,max=100,initial=nug)
        wx.StaticText(panel,-1,'dZ:',(210,225))
        self.dz = FS.FloatSpin(panel, -1,(240, 222),(60,-1),min_val=0,max_val=1000000000,value = 0,digits=3)
        
        wx.StaticBox(panel,-1,'Model 1 parameters',(10,260),(300,150))
        self.check1 = wx.CheckBox(panel,-1,' Plot model 1',(30,290))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck1,id=self.check1.GetId())
        wx.StaticText(panel,-1,'Model 1 sill:',(30,320))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 1:
                self.check1.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[0]
                ini2 = frame.object_manager.call(pieces).model_types[0]
                ini3 = frame.object_manager.call(pieces).model1_ranges[0]
                ini4 = frame.object_manager.call(pieces).model1_ranges[1]
                ini5 = frame.object_manager.call(pieces).model1_ranges[2]
            else:
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill1 = wx.SpinCtrl(panel,-1,'',(90,317),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,350))
        self.model1 = wx.ComboBox(panel,-1,ini2,(90,347),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,380))
        self.range1 = FS.FloatSpin(panel, -1,(70, 377),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range1_m1 = FS.FloatSpin(panel, -1,(155, 377),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range1_m2 = FS.FloatSpin(panel, -1,(235, 377),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check1.GetValue()==False:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range1_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model1.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill1.GetId())
            
        wx.StaticBox(panel,-1,'Model 2 parameters',(10,410),(300,150))
        self.check2 = wx.CheckBox(panel,-1,' Plot model 2',(30,440))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.check2.GetId())
        wx.StaticText(panel,-1,'Model 2 sill:',(30,470))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 2:
                self.check2.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[1]
                ini2 = frame.object_manager.call(pieces).model_types[1]
                ini3 = frame.object_manager.call(pieces).model2_ranges[0]
                ini4 = frame.object_manager.call(pieces).model2_ranges[1]
                ini5 = frame.object_manager.call(pieces).model2_ranges[2]
            else:
                self.check2.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check2.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill2 = wx.SpinCtrl(panel,-1,'',(90,467),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,500))
        self.model2 = wx.ComboBox(panel,-1,ini2,(90,497),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,530))
        self.range2 = FS.FloatSpin(panel, -1,(70, 527),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range2_m1 = FS.FloatSpin(panel, -1,(155, 527),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range2_m2 = FS.FloatSpin(panel, -1,(235, 527),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check2.GetValue()==False:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range2_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model2.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill2.GetId())
        
            
        wx.StaticBox(panel,-1,'Model 3 parameters',(10,560),(300,150))
        self.check3 = wx.CheckBox(panel,-1,' Plot model 3',(30,590))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck3,id=self.check3.GetId())
        wx.StaticText(panel,-1,'Model 3 sill:',(30,620))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 3:
                self.check3.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[2]
                ini2 = frame.object_manager.call(pieces).model_types[2]
                ini3 = frame.object_manager.call(pieces).model3_ranges[0]
                ini4 = frame.object_manager.call(pieces).model3_ranges[1]
                ini5 = frame.object_manager.call(pieces).model3_ranges[2]
            else:
                self.check3.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check3.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill3 = wx.SpinCtrl(panel,-1,'',(90,617),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,650))
        self.model3 = wx.ComboBox(panel,-1,ini2,(90,647),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,680))
        self.range3 = FS.FloatSpin(panel, -1,(70, 677),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range3_m1 = FS.FloatSpin(panel, -1,(155, 677),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range3_m2 = FS.FloatSpin(panel, -1,(235, 677),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check3.GetValue()==False:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
        
        if self.check1.GetValue()==False:
            self.check2.Disable()
            self.check3.Disable()
        elif self.check1.GetValue()==True and self.check2.GetValue()==False:
            self.check3.Disable()
        
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3_m1.GetId())
        self.Bind(FS.EVT_FLOATSPIN,self.update_directional_models,id=self.range3_m2.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.update_directional_models,id=self.model3.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.update_directional_models,id=self.sill3.GetId())
        
        self.angle1_plot = wxplot.PlotCanvas(panel,pos=(320,20))
        self.angle1_plot.SetInitialSize(size=(450,330))
        #self.angle1_plot.SetBackgroundColour(wx.Colour(0,255,0,255))
        self.angle2_plot = wxplot.PlotCanvas(panel,pos=(780,20))
        self.angle2_plot.SetInitialSize(size=(450,330))
        #self.angle2_plot.SetBackgroundColour(wx.Colour(0,255,0,0))
        self.angle3_plot = wxplot.PlotCanvas(panel,pos=(320,370))
        self.angle3_plot.SetInitialSize(size=(450,330))
        
        self.angle4_plot = wxplot.PlotCanvas(panel,pos=(780,370))
        self.angle4_plot.SetInitialSize(size=(450,330))
        self.angle4_plot.SetXSpec('none')
        self.angle4_plot.SetYSpec('none')
        #self.do_nunesplot_variables(pieces)
        self.directional_variograms()
        
        wx.StaticText(panel,-1,'Main',(545,350))
        wx.StaticText(panel,-1,'Minor1',(1005,350))
        wx.StaticText(panel,-1,'Minor2',(545,700))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(50,750),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id=self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(200,750),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.btn_cancel.GetId())
        self.btn_mplplot1 = wx.Button(panel,-1,'Main plot',(350,750),(100,40))
        self.btn_mplplot2 = wx.Button(panel,-1,'Minor1 plot',(500,750),(100,40))
        self.btn_mplplot3 = wx.Button(panel,-1,'Minor2 plot',(650,750),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onmplplot1,id=self.btn_mplplot1.GetId())
        self.Bind(wx.EVT_BUTTON,self.onmplplot2,id=self.btn_mplplot2.GetId())
        self.Bind(wx.EVT_BUTTON,self.onmplplot3,id=self.btn_mplplot3.GetId())
        
        wx.StaticText(panel,-1,'Style:',(780,770))
        styles = ['GEOMS2','GeoMS','SGeMS','Basic','BasicX']
        self.btn_plot_style = wx.ComboBox(panel,-1,'GEOMS2',(830,767),choices = styles,style=wx.CB_READONLY)
        
        self.btn_nunes = wx.Button(panel,-1,'Nunesplot',(930,750),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onnunesplot,id=self.btn_nunes.GetId())
        nstyles = ['GEOMS2','GeoMS','SGeMS','Basic','BasicX']
        self.pic_n = wx.SpinCtrl(panel,-1,'',(1060,737),(50,-1),min=1,max=1000,initial=10)
        self.btn_nunesplot_style = wx.ComboBox(panel,-1,'GEOMS2',(1060,767),choices=nstyles,style=wx.CB_READONLY)
        
        self.maximo_mod_1 = 0
        self.maximo_mod_2 = 0
        self.maximo_mod_3 = 0        
        
    def onnunesplot(self,event):
        #dist, points, limits, sills, nugget, model_check, models, model_ranges, style='GeoMS'
        direction = [self.angle1.GetValue(),self.angle2.GetValue()]
        rots = self.rotate_angles(self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue())
        direction2 = [rots[1][0],rots[1][1]]
        direction3 = [rots[2][0],rots[2][1]]
        pieces = self.pieces
        style = self.btn_nunesplot_style.GetValue()
        passo = self.pic_n.GetValue()
        dist    = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variogram_list[:,0][0:-1:passo]
        azimuth = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variogram_list[:,1][0:-1:passo]
        dip     = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variogram_list[:,2][0:-1:passo]
        var     = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variogram_list[:,3][0:-1:passo]
        pympl.nunesplot(azimuth,dip,dist,var,direction,direction2,direction3,style)
        
    def onmplplot1(self,event):
        #dist, points, limits, sills, nugget, model_check, models, model_ranges, style='GeoMS'
        sills = [(self.sill1.GetValue()/100)*self.sill.GetValue(),(self.sill2.GetValue()/100)*self.sill.GetValue(),(self.sill3.GetValue()/100)*self.sill.GetValue()]
        nugget = self.nugget.GetValue()*self.sill.GetValue()
        model_check = [self.check1.GetValue(),self.check2.GetValue(),self.check3.GetValue()]
        models = [self.model1.GetValue(),self.model2.GetValue(),self.model3.GetValue()]
        model_ranges = [self.range1.GetValue(),self.range2.GetValue(),self.range3.GetValue()]
        style = self.btn_plot_style.GetValue()
        pympl.variogram_plot(self.ndir0[:,0],self.ndir0[:,1],[self.ndir0[:,0].max()],self.sill.GetValue(),sills, nugget, model_check, models, model_ranges, style)
        
    def onmplplot2(self,event):
        #dist, points, limits, sills, nugget, model_check, models, model_ranges, style='GeoMS'
        sills = [(self.sill1.GetValue()/100)*self.sill.GetValue(),(self.sill2.GetValue()/100)*self.sill.GetValue(),(self.sill3.GetValue()/100)*self.sill.GetValue()]
        nugget = self.nugget.GetValue()*self.sill.GetValue()
        model_check = [self.check1.GetValue(),self.check2.GetValue(),self.check3.GetValue()]
        models = [self.model1.GetValue(),self.model2.GetValue(),self.model3.GetValue()]
        model_ranges = [self.range1_m1.GetValue(),self.range2_m1.GetValue(),self.range3_m1.GetValue()]
        style = self.btn_plot_style.GetValue()
        pympl.variogram_plot(self.ndir1[:,0],self.ndir1[:,1],[self.ndir1[:,0].max()],self.sill.GetValue(),sills, nugget, model_check, models, model_ranges, style)
        
    def onmplplot3(self,event):
        #dist, points, limits, sills, nugget, model_check, models, model_ranges, style='GeoMS'
        sills = [(self.sill1.GetValue()/100)*self.sill.GetValue(),(self.sill2.GetValue()/100)*self.sill.GetValue(),(self.sill3.GetValue()/100)*self.sill.GetValue()]
        nugget = self.nugget.GetValue()*self.sill.GetValue()
        model_check = [self.check1.GetValue(),self.check2.GetValue(),self.check3.GetValue()]
        models = [self.model1.GetValue(),self.model2.GetValue(),self.model3.GetValue()]
        model_ranges = [self.range1_m2.GetValue(),self.range2_m2.GetValue(),self.range3_m2.GetValue()]
        style = self.btn_plot_style.GetValue()
        pympl.variogram_plot(self.ndir2[:,0],self.ndir2[:,1],[self.ndir2[:,0].max()],self.sill.GetValue(),sills, nugget, model_check, models, model_ranges, style)
        
    def onapply(self,event):
        if self.check1.GetValue(): 
            frame.object_manager.call(self.pieces).number_of_models = 1
            frame.object_manager.call(self.pieces).model1_ranges = [self.range1.GetValue(),self.range1_m1.GetValue(),self.range1_m2.GetValue()]
        if self.check2.GetValue(): 
            frame.object_manager.call(self.pieces).number_of_models = 2
            frame.object_manager.call(self.pieces).model2_ranges = [self.range2.GetValue(),self.range2_m1.GetValue(),self.range2_m2.GetValue()]
        if self.check3.GetValue(): 
            frame.object_manager.call(self.pieces).number_of_models = 3
            frame.object_manager.call(self.pieces).model3_ranges = [self.range3.GetValue(),self.range3_m1.GetValue(),self.range3_m2.GetValue()]
        frame.object_manager.call(self.pieces).full_sill = self.sill.GetValue()
        frame.object_manager.call(self.pieces).model_nugget = self.nugget.GetValue()
        frame.object_manager.call(self.pieces).model_angles = [self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue()]
        frame.object_manager.call(self.pieces).model_sills = [self.sill1.GetValue(),self.sill2.GetValue(),self.sill3.GetValue()]
        frame.object_manager.call(self.pieces).model_types = [self.model1.GetValue(),self.model2.GetValue(),self.model3.GetValue()]
        frame.object_manager.call(self.pieces).variogram_adjusted_flag = True
        self.Destroy()
        
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
    def oncheck1(self,event):
        if self.check1.GetValue():
            self.sill1.Enable()
            self.model1.Enable()
            self.range1.Enable()
            self.range1_m1.Enable()
            self.range1_m2.Enable()
            self.check2.Enable()
        else:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check2.SetValue(False)
            self.check2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck2(self,event):
        if self.check2.GetValue():
            self.sill2.Enable()
            self.model2.Enable()
            self.range2.Enable()
            self.range2_m1.Enable()
            self.range2_m2.Enable()
            self.check3.Enable()
        else:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck3(self,event):
        if self.check3.GetValue():
            self.sill3.Enable()
            self.model3.Enable()
            self.range3_m1.Enable()
            self.range3_m2.Enable()
            self.range3.Enable()
        else:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            
    def directional_variograms(self):
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 900
        direction = [self.angle1.GetValue(),self.angle2.GetValue()]
        rots = self.rotate_angles(self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue())
        direction2 = [rots[1][0],rots[1][1]]
        direction3 = [rots[2][0],rots[2][1]]
        tol = self.tolerance.GetValue()
        bins = self.bins.GetValue()
        if self.maximum.GetValue()<1: maximum = False
        else: maximum = self.maximum.GetValue()
        if self.dz.GetValue()<0.1: dz = False
        else: dz = self.dz.GetValue()
        dir0 = frame.object_manager.call(self.pieces).directional_variogram(direction[0],direction[1],tol,bins,maximum,dz)
        self.ndir0 = ndir0 = np.zeros((dir0[0].shape[0],2))
        ndir0[:,0] = dir0[1]
        ndir0[:,1] = dir0[0]       
        dir1 = frame.object_manager.call(self.pieces).directional_variogram(direction2[0],direction2[1],tol,bins,maximum,dz)
        self.ndir1 = ndir1 = np.zeros((dir1[0].shape[0],2))
        ndir1[:,0] = dir1[1]
        ndir1[:,1] = dir1[0]       
        dir2 = frame.object_manager.call(self.pieces).directional_variogram(direction3[0],direction3[1],tol,bins,maximum,dz)
        self.ndir2 = ndir2 = np.zeros((dir2[0].shape[0],2))
        ndir2[:,0] = dir2[1]
        ndir2[:,1] = dir2[0]
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            #if len(ndir0)>0: self.maximo_mod_1 = ndir0[:,0].max()
            #else: self.maximo_mod_1 = 100
            #if len(ndir1)>0: self.maximo_mod_2 = ndir1[:,0].max()
            #else: self.maximo_mod_2 = 100
            #if len(ndir2)>0: self.maximo_mod_2 = ndir2[:,0].max()
            #else: self.maximo_mod_2 = 100
            self.maximo_mod_1 = ndir0[:,0].max()
            self.maximo_mod_2 = ndir1[:,0].max()
            self.maximo_mod_3 = ndir2[:,0].max()
            model_line[:,0,0] = np.linspace(-1,self.maximo_mod_1+per*self.maximo_mod_1,msize)
            model_line[:,0,1] = np.linspace(-1,self.maximo_mod_2+per*self.maximo_mod_2,msize)
            model_line[:,0,2] = np.linspace(-1,self.maximo_mod_3+per*self.maximo_mod_3,msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)        
        
        #direction = [self.angle1.GetValue(),self.angle2.GetValue()]
        #rots = self.rotate_angles(self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue())
        #direction2 = [rots[1][0],rots[1][1]]
        #direction3 = [rots[2][0],rots[2][1]]
        # directional_variogram(self,azimuth,dip,tolerance,bins,maximum=False,dz=False)
        #tol = self.tolerance.GetValue()
        #bins = self.bins.GetValue()
        #if self.maximum.GetValue()<1: maximum = False
        #else: maximum = self.maximum.GetValue()
        #if self.dz.GetValue()<0.1: dz = False
        #else: dz = self.dz.GetValue()
        #dir0 = frame.object_manager.call(self.pieces).directional_variogram(direction[0],direction[1],tol,bins,maximum,dz)
        #self.ndir0 = ndir0 = np.zeros((dir0[0].shape[0],2))
        #ndir0[:,0] = dir0[1]
        #ndir0[:,1] = dir0[0]
        if len(ndir0)>0:
            self.line0 = line0 = wxplot.PolyLine([(-1,self.sill.GetValue()),(ndir0[:,0].max()+ndir0[:,0].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts0 = pts0  = wxplot.PolyMarker(ndir0,marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line0,pts0,model_line0])
            else: gc = wxplot.PlotGraphics([line0,pts0])
            self.angle1_plot.Draw(gc,xAxis=(0,ndir0[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir0[:,1].max()+ndir0[:,1].max()*0.1])))
        
        #dir1 = frame.object_manager.call(self.pieces).directional_variogram(direction2[0],direction2[1],tol,bins,maximum,dz)
        #self.ndir1 = ndir1 = np.zeros((dir1[0].shape[0],2))
        #ndir1[:,0] = dir1[1]
        #ndir1[:,1] = dir1[0]
        if len(ndir1)>0:
            self.line1 = line1 = wxplot.PolyLine([(-1,self.sill.GetValue()),(ndir1[:,0].max()+ndir1[:,0].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts1 = pts1  = wxplot.PolyMarker(ndir1,marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line1,pts1,model_line1])
            else: gc = wxplot.PlotGraphics([line1,pts1])
            self.angle2_plot.Draw(gc,xAxis=(0,ndir1[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir1[:,1].max()+ndir1[:,1].max()*0.1])))        
        
        #dir2 = frame.object_manager.call(self.pieces).directional_variogram(direction3[0],direction3[1],tol,bins,maximum,dz)
        #self.ndir2 = ndir2 = np.zeros((dir2[0].shape[0],2))
        #ndir2[:,0] = dir2[1]
        #ndir2[:,1] = dir2[0]
        if len(ndir2)>0:
            self.line2 = line2 = wxplot.PolyLine([(-1,self.sill.GetValue()),(ndir2[:,0].max()+ndir2[:,0].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts2 = pts2  = wxplot.PolyMarker(ndir2,marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line2,pts2,model_line2])
            else: gc = wxplot.PlotGraphics([line2,pts2])
            self.angle3_plot.Draw(gc,xAxis=(0,ndir2[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir2[:,1].max()+ndir2[:,1].max()*0.1])))
    
    def rotate_angles(self,A,D,R):
        # BASED ON: https://docs.google.com/viewer?a=v&pid=sites&srcid=ZGVmYXVsdGRvbWFpbnxnbGVubm11cnJheXxneDoyMTJiZTZlNzVlMjFiZTFi
        A = A*np.pi/180
        D = D*np.pi/180
        R = R*np.pi/180
        cos = np.cos
        sin = np.sin
        # gamma = azimuth = A ; beta = dip = D ; alpha = rake = R
        # cosD*cosA  cosA*sinR*sinD-cosR*sinA  cosR*cosA*sinD+sinR*sinA
        # cosD*sinA  cosR*cosA+sinR*sinD*sinA  -cosA*sinR+cosR*sinD*sinA
        # -sinD      cosD*sinR                 cosR*cosD
        
        r = np.array([[cos(D)*cos(A),cos(A)*sin(R)*sin(D)-cos(R)*sin(A),cos(R)*cos(A)*sin(D)+sin(R)*sin(A)],
                       [cos(D)*sin(A),cos(R)*cos(A)+sin(R)*sin(D)*sin(A),-cos(A)*sin(R)+cos(R)*sin(D)*sin(A)]
                       ,[-sin(D),cos(D)*sin(R),cos(R)*cos(D)]])
        res = r.dot(np.array([1,0,0]))
        res1 = r.dot(np.array([0,1,0]))
        res2 = r.dot(np.array([0,0,1]))
        rad = 1
        #return (np.int(A*180/np.pi+0.5),np.int(D*180/np.pi+0.5)),(np.int(np.arctan(res1[1]/res1[0])*180/np.pi+0.5),np.int(np.arccos(res1[2]/rad)*180/np.pi-90+0.5)),(np.int(np.arctan(res2[1]/res2[0])*180/np.pi+0.5),np.int(np.arccos(res2[2]/rad)*180/np.pi+0.5)*-1)       
        lista = [[np.int(A*180/np.pi),np.int(D*180/np.pi)],[np.int(np.arctan2(res1[1],res1[0])*180/np.pi),np.int(np.arccos(res1[2]/rad)*180/np.pi-90)],[np.int(np.arctan2(res2[1],res2[0])*180/np.pi),90+np.int(np.arccos(res2[2]/rad)*180/np.pi)]]
        if lista[1][0]>90: lista[1][0]=lista[1][0]-180
        elif lista[1][0]<-90: lista[1][0] = lista[1][0]+180
        if lista[2][0]>90: lista[2][0]=lista[2][0]-180
        elif lista[2][0]<-90: lista[2][0] = lista[2][0]+180
        if lista[2][1]>90: lista[2][1] = 90-lista[2][1]
        return lista

    def update_directional_models(self,event):
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 900
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            model_line[:,0,0] = np.linspace(-1,self.maximo_mod_1+per*self.maximo_mod_1,msize)
            model_line[:,0,1] = np.linspace(-1,self.maximo_mod_2+per*self.maximo_mod_2,msize)
            model_line[:,0,2] = np.linspace(-1,self.maximo_mod_3+per*self.maximo_mod_3,msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)
            
        if mflag1: gc = wxplot.PlotGraphics([self.line0,self.pts0,model_line0])
        else: gc = wxplot.PlotGraphics([self.line0,self.pts0])
        self.angle1_plot.Draw(gc,xAxis=(0,self.ndir0[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,self.ndir0[:,1].max()+self.ndir0[:,1].max()*0.1])))
        
        if mflag1: gc = wxplot.PlotGraphics([self.line1,self.pts1,model_line1])
        else: gc = wxplot.PlotGraphics([self.line1,self.pts1])
        self.angle2_plot.Draw(gc,xAxis=(0,self.ndir1[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,self.ndir1[:,1].max()+self.ndir1[:,1].max()*0.1])))        
    
        if mflag1: gc = wxplot.PlotGraphics([self.line2,self.pts2,model_line2])
        else: gc = wxplot.PlotGraphics([self.line2,self.pts2])
        self.angle3_plot.Draw(gc,xAxis=(0,self.ndir2[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,self.ndir2[:,1].max()+self.ndir2[:,1].max()*0.1])))
    
    def update_directional_variograms(self,event):
        mflag1 = False
        mflag2 = False
        mflag3 = False
        msize  = 900
        direction = [self.angle1.GetValue(),self.angle2.GetValue()]
        rots = self.rotate_angles(self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue())
        direction2 = [rots[1][0],rots[1][1]]
        direction3 = [rots[2][0],rots[2][1]]
        tol = self.tolerance.GetValue()
        bins = self.bins.GetValue()
        if self.maximum.GetValue()<1: maximum = False
        else: maximum = self.maximum.GetValue()
        if self.dz.GetValue()<0.1: dz = False
        else: dz = self.dz.GetValue()
        dir0 = frame.object_manager.call(self.pieces).directional_variogram(direction[0],direction[1],tol,bins,maximum,dz)
        #print dir0        
        self.ndir0 = ndir0 = np.zeros((dir0[0].shape[0],2))
        ndir0[:,0] = dir0[1]
        ndir0[:,1] = dir0[0]       
        dir1 = frame.object_manager.call(self.pieces).directional_variogram(direction2[0],direction2[1],tol,bins,maximum,dz)
        #print dir1        
        self.ndir1 = ndir1 = np.zeros((dir1[0].shape[0],2))
        ndir1[:,0] = dir1[1]
        ndir1[:,1] = dir1[0]       
        dir2 = frame.object_manager.call(self.pieces).directional_variogram(direction3[0],direction3[1],tol,bins,maximum,dz)
        #print dir2        
        self.ndir2 = ndir2 = np.zeros((dir2[0].shape[0],2))
        ndir2[:,0] = dir2[1]
        ndir2[:,1] = dir2[0]
        if self.check1.GetValue():
            per = 3
            model_line = np.zeros((msize,2,3))
            #model_line[:,0,0] = np.linspace(-1,frame.object_manager.call(self.pieces).variogram_list[:,0].max()+per*frame.object_manager.call(self.pieces).variogram_list[:,0].max(),msize)
            #model_line[:,0,1] = np.linspace(-1,frame.object_manager.call(self.pieces).variogram_list[:,0].max()+per*frame.object_manager.call(self.pieces).variogram_list[:,0].max(),msize)
            #model_line[:,0,2] = np.linspace(-1,frame.object_manager.call(self.pieces).variogram_list[:,0].max()+per*frame.object_manager.call(self.pieces).variogram_list[:,0].max(),msize)
            self.maximo_mod_1 = ndir0[:,0].max()
            self.maximo_mod_2 = ndir1[:,0].max()
            self.maximo_mod_3 = ndir2[:,0].max()
            model_line[:,0,0] = np.linspace(-1,ndir0[:,0].max()+ndir0[:,0].max()*0.3,msize)
            model_line[:,0,1] = np.linspace(-1,ndir1[:,0].max()+ndir1[:,0].max()*0.3,msize)
            model_line[:,0,2] = np.linspace(-1,ndir2[:,0].max()+ndir2[:,0].max()*0.3,msize)
            if self.model1.GetValue()=='Gaussian':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] =  (nugget+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model1.GetValue()=='Exponential':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                model_line[:,1,0] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range1_m1.GetValue()
                model_line[:,1,1] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range1_m2.GetValue()
                model_line[:,1,2] = (nugget+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model1.GetValue()=='Spherical':
                sill = (self.sill1.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = sill
                amp = self.range1_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = sill
                amp = self.range1_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = sill
            mflag1 = True
        if self.check2.GetValue():
            mflag2 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range2_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range2_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill2.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
                amp = self.range2_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100)*self.sill.GetValue()
        if self.check3.GetValue():
            mflag3 = True
            if self.model2.GetValue()=='Gaussian':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] =  (nugget+model_line[:,1,0]+(sill * (1 - np.e**(-3 * (model_line[:,0,0]/amp)**2))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] =  (nugget+model_line[:,1,1]+(sill * (1 - np.e**(-3 * (model_line[:,0,1]/amp)**2))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] =  (nugget+model_line[:,1,2]+(sill * (1 - np.e**(-3 * (model_line[:,0,2]/amp)**2))))
            elif self.model2.GetValue()=='Exponential':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                model_line[:,1,0] = (nugget+model_line[:,1,0]+(sill*(1-np.e**(-3*model_line[:,0,0]/amp))))
                amp = self.range3_m1.GetValue()
                model_line[:,1,1] = (nugget+model_line[:,1,1]+(sill*(1-np.e**(-3*model_line[:,0,1]/amp))))
                amp = self.range3_m2.GetValue()
                model_line[:,1,2] = (nugget+model_line[:,1,2]+(sill*(1-np.e**(-3*model_line[:,0,2]/amp))))
            elif self.model2.GetValue()=='Spherical':
                sill = (self.sill3.GetValue()/100)*self.sill.GetValue()
                nugget = (self.nugget.GetValue()/100)*self.sill.GetValue()
                amp = self.range3.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,0] < amp: model_line[i,1,0] = (nugget+model_line[i,1,0]+(sill * (1.5*model_line[i,0,0]/amp-0.5*(model_line[i,0,0]/amp)**3)))
                    else: model_line[i,1,0] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m1.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,1] < amp: model_line[i,1,1] = (nugget+model_line[i,1,1]+(sill * (1.5*model_line[i,0,1]/amp-0.5*(model_line[i,0,1]/amp)**3)))
                    else: model_line[i,1,1] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
                amp = self.range3_m2.GetValue()
                for i in xrange(model_line.shape[0]):
                    if model_line[i,0,2] < amp: model_line[i,1,2] = (nugget+model_line[i,1,2]+(sill * (1.5*model_line[i,0,2]/amp-0.5*(model_line[i,0,2]/amp)**3)))
                    else: model_line[i,1,2] = (self.sill2.GetValue()/100+self.sill1.GetValue()/100+self.sill3.GetValue()/100)*self.sill.GetValue()
        if self.check1.GetValue():            
            model_line0 = wxplot.PolyLine(model_line[:,:,0], legend='', colour='blue', width=2)
            model_line1 = wxplot.PolyLine(model_line[:,:,1], legend='', colour='blue', width=2)
            model_line2 = wxplot.PolyLine(model_line[:,:,2], legend='', colour='blue', width=2)
        
        #direction = [self.angle1.GetValue(),self.angle2.GetValue()]
        #rots = self.rotate_angles(self.angle1.GetValue(),self.angle2.GetValue(),self.angle3.GetValue())
        #direction2 = [rots[1][0],rots[1][1]]
        #direction3 = [rots[2][0],rots[2][1]]
        #tol = self.tolerance.GetValue()
        #bins = self.bins.GetValue()
        #if self.maximum.GetValue()<1: maximum = False
        #else: maximum = self.maximum.GetValue()
        #if self.dz.GetValue()<0.1: dz = False
        #else: dz = self.dz.GetValue()
        #dir0 = frame.object_manager.call(self.pieces).directional_variogram(direction[0],direction[1],tol,bins,maximum,dz)
        #self.ndir0 = ndir0 = np.zeros((dir0[0].shape[0],2))
        #ndir0[:,0] = dir0[1]
        #ndir0[:,1] = dir0[0]
        if len(ndir0)>0:
            self.line0 = line0 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir0[:,0].max()+ndir0[:,0].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts0 = pts0  = wxplot.PolyMarker(ndir0,marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line0,pts0,model_line0])
            else: gc = wxplot.PlotGraphics([line0,pts0])
            self.angle1_plot.Draw(gc,xAxis=(0,ndir0[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir0[:,1].max()+ndir0[:,1].max()*0.1])))
        
        #dir1 = frame.object_manager.call(self.pieces).directional_variogram(direction2[0],direction2[1],tol,bins,maximum,dz)
        #self.ndir1 = ndir1 = np.zeros((dir1[0].shape[0],2))
        #ndir1[:,0] = dir1[1]
        #ndir1[:,1] = dir1[0]
        if len(ndir1)>0:
            self.line1 = line1 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir1[:,0].max()+ndir1[:,0].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts1 = pts1  = wxplot.PolyMarker(ndir1,marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line1,pts1,model_line1])
            else: gc = wxplot.PlotGraphics([line1,pts1])
            self.angle2_plot.Draw(gc,xAxis=(0,ndir1[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir1[:,1].max()+ndir1[:,1].max()*0.1])))        
        
        #dir2 = frame.object_manager.call(self.pieces).directional_variogram(direction3[0],direction3[1],tol,bins,maximum,dz)
        #self.ndir2 = ndir2 = np.zeros((dir2[0].shape[0],2))
        #ndir2[:,0] = dir2[1]
        #ndir2[:,1] = dir2[0]
        if len(ndir2)>0:
            self.line2 = line2 = wxplot.PolyLine([(0,self.sill.GetValue()),(ndir2[:,0].max()+ndir2[:,0].max()*0.3,self.sill.GetValue())], legend='', colour='red', width=2)
            self.pts2 = pts2  = wxplot.PolyMarker(ndir2,marker='circle',colour='green',width=3)
            if mflag1: gc = wxplot.PlotGraphics([line2,pts2,model_line2])
            else: gc = wxplot.PlotGraphics([line2,pts2])
            self.angle3_plot.Draw(gc,xAxis=(0,ndir2[:,0].max()), yAxis=(0,max([self.sill.GetValue()+self.sill.GetValue()*0.1,ndir2[:,1].max()+ndir2[:,1].max()*0.1])))
        
    def do_nunesplot_variables(self,pieces):
        self.axis_data = np.zeros((1000,2))
        self.axis_data[:,0] = np.linspace(-90,90,1000)
        self.axis_data[:,1] = np.sqrt(90**2-self.axis_data[:,0]**2)
        self.axis_data2 = [(-90,0),(90,0)]
        self.var_data = np.zeros((frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variogram_list.shape[0],2))
        self.var_data[:,0] = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variogram_list[:,1]
        self.var_data[:,1] = np.abs(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variogram_list[:,2])
        #np.savetxt('variogram_variables.prn',frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variogram_list,fmt='%.1f')
        azimuth = self.var_data[:,0].copy()
        self.var_data[:,0] = np.cos(azimuth*np.pi/180-np.pi/2)*(90-np.abs(self.var_data[:,1]))
        self.var_data[:,1] = np.sin(azimuth*np.pi/180+np.pi/2)*(90-np.abs(self.var_data[:,1]))
        line = wxplot.PolyLine(self.axis_data, legend='', colour='black', width=2)
        line2 = wxplot.PolyLine(self.axis_data2, legend='', colour='black', width=2)
        vpoints = wxplot.PolyMarker(self.var_data, marker='circle',colour='red',width=1)
        gc = wxplot.PlotGraphics([line,line2,vpoints])
        self.angle4_plot.Draw(gc,xAxis=(-90,90), yAxis=(-20,110))
        #dpoints = wxplot.PolyMarker([(0,90),(90,0)], marker='circle',colour='green',width=7)
        #gc = wxplot.PlotGraphics([dpoints])
        #self.angle5_plot.Draw(gc,xAxis=(-90,90), yAxis=(0,90))
        
    def update_nunesplot(self,event):
        direction = [self.angle1.GetValue(),self.angle2.GetValue()]
        """
        self.angle5_plot.Clear()
        azimuth0 = np.cos(direction[0]*np.pi/180-np.pi/2)*(90-np.abs(direction[1]))
        dip0 = np.sin(direction[0]*np.pi/180+np.pi/2)*(90-np.abs(direction[1]))
        if direction[0]<0: newazimuth=direction[0]+90
        else: newazimuth=direction[0]-90
        azimuth1 = np.cos(newazimuth*np.pi/180-np.pi/2)*(90-np.abs(direction[1]))
        dip1 = np.sin(newazimuth*np.pi/180+np.pi/2)*(90-np.abs(direction[1]))
        dpoints = wxplot.PolyMarker([(azimuth0,dip0),(azimuth1,dip1)], marker='circle',colour='green',width=7)
        gc = wxplot.PlotGraphics([dpoints])
        self.angle5_plot.Draw(gc,xAxis=(-90,90), yAxis=(0,90))
        """
        
class CTXgridinterpolationFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Grid interpolation procedures",size=(370,330),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.RESIZE_BORDER)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        #panel=self.panel=wx.ScrolledWindow(self,wx.ID_ANY)
        #panel.SetBackgroundColour('white')
        #panel.SetScrollbars(1,1,400,300)
        
        self.pieces = pieces
        
        wh=30
        lh=50
        
        wx.StaticText(panel,-1,'Base parameters:',(wh,lh-17))
        if len(self.check_what_goes()):
            self.object = wx.ComboBox(panel,-1,self.check_what_goes()[0],(wh+90,lh-20),(100,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        
        wx.StaticText(panel,-1,
                      '                 Number          Size                   First coord.',
                      (wh,lh+10)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(wh,lh+30)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(wh,lh+55)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(wh,lh+80)).SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(wh+50,lh+27),(60,-1),min=1,max=100000000,initial=1)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(wh+50,lh+52),(60,-1),min=1,max=100000000,initial=1)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(wh+50,lh+77),(60,-1),min=1,max=100000000,initial=1)
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(wh+120, lh+27),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(wh+120, lh+52),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(wh+120, lh+77),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(wh+200, lh+27),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(wh+200, lh+52),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(wh+200, lh+77),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        if len(self.check_what_goes())!=0:
            self.blocks_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[0])
            self.blocks_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[1])
            self.blocks_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[2])
            
            self.size_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[0])
            self.size_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[1])
            self.size_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[2])
            
            self.first_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[0])
            self.first_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[1])
            self.first_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[2])
        
        wx.StaticText(panel,-1,'Procedure:',(wh,lh+110))
        choices=['nearest','linear'] #,'cubic']
        self.procedure_type = wx.ComboBox(panel,-1,'nearest',(wh+90,lh+107),(150,-1),choices=choices,style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'Name it:',(wh,lh+140))
        self.name = wx.TextCtrl(panel,-1,'interpolated_mesh',(wh+90,lh+137),(100,-1))
        self.vname = wx.TextCtrl(panel,-1,self.pieces[1],(wh+200,lh+137),(100,-1))
        
        self.btn_run = wx.Button(panel,-1,'Run procedure',(wh+30,lh+170),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onrun,id=self.btn_run.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(wh+160,lh+170),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.btn_cancel.GetId())
        
    def onrun(self,event):
        blocks = (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
        size = (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
        first = (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
        method = self.procedure_type.GetValue()
        name = self.name.GetValue()
        vname = self.vname.GetValue()
        
        flag = frame.object_manager.grid_interpolation(self.pieces,blocks,size,first,method,name,vname)
        if flag:
            frame.update_last_object_list()            
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Must have data inside grid to interpolate.","Error")
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onobjectcombo(self,event):
        self.blocks_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[0])
        self.blocks_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[1])
        self.blocks_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[2])
        
        self.size_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[0])
        self.size_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[1])
        self.size_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[2])
        
        self.first_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[0])
        self.first_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[1])
        self.first_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[2])
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXKrigingFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Estimation with Kriging",size=(660,770),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.RESIZE_BORDER)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        #panel=self.panel=wx.Panel(self)
        
        panel=self.panel=wx.ScrolledWindow(self,wx.ID_ANY)
        #panel.SetBackgroundColour('white')
        panel.SetScrollbars(1,1,640,750)
        
        self.pieces = pieces
        
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            ini1 = frame.object_manager.call(pieces).model_angles[0]
            ini2 = frame.object_manager.call(pieces).model_angles[1]
            ini3 = frame.object_manager.call(pieces).model_angles[2]
        else:
            ini1 = 0
            ini2 = 0
            ini3 = 0
        
        wx.StaticBox(panel,-1,'Variogram parameters',(10,10),(300,250))
        #self.refresh = wx.Button(panel,-1,'Refresh',(220,7),(50,-1))
        #self.Bind(wx.EVT_BUTTON,self.update_directional_variograms,id=self.refresh.GetId())
        wx.StaticText(panel,-1,'Azimuth (1):',(30,45))
        self.angle1 = wx.Slider(panel, -1, ini1, -89, 90, (90,27), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.Bind(wx.EVT_SLIDER,self.update_nunesplot,id=self.angle1.GetId())
        wx.StaticText(panel,-1,'Dip (2):',(30,95))
        self.angle2 = wx.Slider(panel, -1, ini2, -89, 90, (90,77), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle2.Disable()
        wx.StaticText(panel,-1,'Rake (3):',(30,145))
        self.angle3 = wx.Slider(panel, -1, ini3, -89, 90, (90,137), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle3.Disable()
        
        wx.StaticText(panel,-1,'Tol.:',(30,195))
        self.tolerance = wx.SpinCtrl(panel,-1,'',(60,192),(50,-1),min=1,max=90,initial=15)
        wx.StaticText(panel,-1,'Bins:',(120,195))
        self.bins = wx.SpinCtrl(panel,-1,'',(150,192),(50,-1),min=2,max=500,initial=10)
        wx.StaticText(panel,-1,'Max:',(210,195))
        self.maximum = FS.FloatSpin(panel, -1,(240, 192),(60,-1),min_val=0,max_val=100000000,value = 0,digits=3)
        self.tolerance.Disable()
        self.bins.Disable()
        self.maximum.Disable()
        
        wx.StaticText(panel,-1,'Sill:',(30,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: sill = frame.object_manager.call(pieces).full_sill
        else: sill = frame.object_manager.call(pieces).basic_statistics[1]
        self.sill = FS.FloatSpin(panel, -1,(50, 222),(60,-1),min_val=0,max_val=1000000000,value = sill,digits=3)
        wx.StaticText(panel,-1,'Nug.:',(120,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: nug = frame.object_manager.call(pieces).model_nugget
        else: nug = 0
        self.nugget = wx.SpinCtrl(panel,-1,'',(150,222),(50,-1),min=0,max=100,initial=nug)
        wx.StaticText(panel,-1,'dZ:',(210,225))
        self.dz = FS.FloatSpin(panel, -1,(240, 222),(60,-1),min_val=0,max_val=1000000000,value = 0,digits=3)
        self.dz.Disable()
        
        wx.StaticBox(panel,-1,'Model 1 parameters',(10,260),(300,150))
        self.check1 = wx.CheckBox(panel,-1,' Plot model 1',(30,290))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck1,id=self.check1.GetId())
        wx.StaticText(panel,-1,'Model 1 sill:',(30,320))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 1:
                self.check1.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[0]
                ini2 = frame.object_manager.call(pieces).model_types[0]
                ini3 = frame.object_manager.call(pieces).model1_ranges[0]
                ini4 = frame.object_manager.call(pieces).model1_ranges[1]
                ini5 = frame.object_manager.call(pieces).model1_ranges[2]
            else:
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill1 = wx.SpinCtrl(panel,-1,'',(90,317),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,350))
        self.model1 = wx.ComboBox(panel,-1,ini2,(90,347),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,380))
        self.range1 = FS.FloatSpin(panel, -1,(70, 377),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range1_m1 = FS.FloatSpin(panel, -1,(155, 377),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range1_m2 = FS.FloatSpin(panel, -1,(235, 377),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check1.GetValue()==False:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            
        wx.StaticBox(panel,-1,'Model 2 parameters',(10,410),(300,150))
        self.check2 = wx.CheckBox(panel,-1,' Plot model 2',(30,440))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.check2.GetId())
        wx.StaticText(panel,-1,'Model 2 sill:',(30,470))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 2:
                self.check2.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[1]
                ini2 = frame.object_manager.call(pieces).model_types[1]
                ini3 = frame.object_manager.call(pieces).model2_ranges[0]
                ini4 = frame.object_manager.call(pieces).model2_ranges[1]
                ini5 = frame.object_manager.call(pieces).model2_ranges[2]
            else:
                self.check2.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check2.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill2 = wx.SpinCtrl(panel,-1,'',(90,467),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,500))
        self.model2 = wx.ComboBox(panel,-1,ini2,(90,497),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,530))
        self.range2 = FS.FloatSpin(panel, -1,(70, 527),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range2_m1 = FS.FloatSpin(panel, -1,(155, 527),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range2_m2 = FS.FloatSpin(panel, -1,(235, 527),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check2.GetValue()==False:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            
        wx.StaticBox(panel,-1,'Model 3 parameters',(10,560),(300,150))
        self.check3 = wx.CheckBox(panel,-1,' Plot model 3',(30,590))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck3,id=self.check3.GetId())
        wx.StaticText(panel,-1,'Model 3 sill:',(30,620))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 3:
                self.check3.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[2]
                ini2 = frame.object_manager.call(pieces).model_types[2]
                ini3 = frame.object_manager.call(pieces).model3_ranges[0]
                ini4 = frame.object_manager.call(pieces).model3_ranges[1]
                ini5 = frame.object_manager.call(pieces).model3_ranges[2]
            else:
                self.check3.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check3.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill3 = wx.SpinCtrl(panel,-1,'',(90,617),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,650))
        self.model3 = wx.ComboBox(panel,-1,ini2,(90,647),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,680))
        self.range3 = FS.FloatSpin(panel, -1,(70, 677),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range3_m1 = FS.FloatSpin(panel, -1,(155, 677),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range3_m2 = FS.FloatSpin(panel, -1,(235, 677),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check3.GetValue()==False:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
        
        if self.check1.GetValue()==False:
            self.check2.Disable()
            self.check3.Disable()
        elif self.check1.GetValue()==True and self.check2.GetValue()==False:
            self.check3.Disable()
            
        wx.StaticBox(panel,-1,'General parameters',(320,10),(300,400))
        #wx.StaticText(panel,-1,'Number of simulations:',(340,40))
        wx.StaticText(panel,-1,'Minimum:',(340,80))
        wx.StaticText(panel,-1,'Maximum:',(470,80))
        wx.StaticText(panel,-1,'Kriging type:',(340,120))
        #self.simulations = wx.SpinCtrl(panel,-1,'',(460,37),(100,-1),min=2,max=300,initial=16)
        self.minimum = FS.FloatSpin(panel, -1,(390,77),(70,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call(pieces).basic_statistics[3],digits=3)
        self.maximum = FS.FloatSpin(panel, -1,(520,77),(70,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call(pieces).basic_statistics[4],digits=3)        
        if len(self.check_what_goes())==0:
            choices = ['Simple','Ordinary']
        else:
            if len(self.check_what_data_goes()):
                choices = ['Simple','Ordinary','Simple with locally varying mean','External Drift','Global Collocated CoKriging','Local Collocated CoKriging']
            else:
                choices = ['Simple','Ordinary','Simple with locally varying mean','External Drift','Global Collocated CoKriging','Local Collocated CoKriging']
        self.kriging_type = wx.ComboBox(panel,-1,'Simple',(420,117),(150,-1),choices=choices,style=wx.CB_READONLY)            
        wx.StaticText(panel,-1,'Nulldata:',(340,160))
        #wx.StaticText(panel,-1,'Seed:',(470,160))
        self.null = FS.FloatSpin(panel, -1,(390,157),(70,-1),min_val=-100000000,max_val=100000000,value = -999,digits=3)
        #self.seed = wx.SpinCtrl(panel,-1,'',(520,157),(70,-1),min=1000000,max=9999999,initial=1234567)
        
        self.output_dir = None
        
        self.btn_output = wx.Button(panel,-1,'Output directory',(340,200),(260,40))
        self.Bind(wx.EVT_BUTTON,self.ondiroutput,id=self.btn_output.GetId())
        
        wx.StaticText(panel,-1,'Soft data:',(340,260))
        if len(self.check_what_goes())!=0:
            self.object = wx.ComboBox(panel,-1,self.check_what_goes()[0],(400,257),(100,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0],(510,257),(90,-1),choices = frame.object_manager.object_list[self.object.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        else:
            self.object = wx.ComboBox(panel,-1,'None',(400,257),(100,-1),choices = ['None'],style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.variable = wx.ComboBox(panel,-1,'None',(510,257),(90,-1),choices = ['None'],style=wx.CB_READONLY)
            self.object.Disable()
            self.variable.Disable()
            
        wx.StaticText(panel,-1,'Cor. data:',(340,300))
        if len(self.check_what_goes())!=0:
            self.cobject = wx.ComboBox(panel,-1,self.check_what_goes()[0],(400,297),(100,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.cvariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0],(510,297),(90,-1),choices = frame.object_manager.object_list[self.object.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        else:
            self.cobject = wx.ComboBox(panel,-1,'None',(400,297),(100,-1),choices = ['None'],style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.oncobjectcombo,id=self.object.GetId())
            self.cvariable = wx.ComboBox(panel,-1,'None',(510,297),(90,-1),choices = ['None'],style=wx.CB_READONLY)
            self.cobject.Disable()
            self.cvariable.Disable()
            
        wx.StaticText(panel,-1,'Correlation:',(340,340))
        self.global_correlation = wx.SpinCtrl(panel,-1,'',(400,337),(100,-1),min=0,max=100,initial=70)
        
        self.bidistribution_path = None
        self.bidistribution_data = None
        
        #self.btn_bidistribution = wx.Button(panel,-1,'Bidistribution file',(340,380),(140,20))
        #self.Bind(wx.EVT_BUTTON,self.onbidisfile,id=self.btn_bidistribution.GetId())
        """
        if len(self.check_what_data_goes())!=0:
            wx.StaticText(panel,-1,'Bidistribution object; secondary; primary; bins',(340,360))
            self.bidis_object = wx.ComboBox(panel,-1,self.check_what_data_goes()[0],(335,380),(70,-1),choices = self.check_what_data_goes(),style=wx.CB_READONLY)
            self.bidis_variable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names()[0],(410,380),(70,-1),choices = frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.bidis_variable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names()[0],(485,380),(70,-1),choices = frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.bidistribution_classes = wx.SpinCtrl(panel,-1,'',(560,380),(60,-1),min=2,max=1000,initial=40)
            self.Bind(wx.EVT_COMBOBOX,self.onbidis,id=self.bidis_object.GetId())
        """
        
        wx.StaticBox(panel,-1,'Search Ellipsoid',(320,410),(300,150))
        wh = 310
        lh = 410
        wx.StaticText(panel,-1,'Orientation:',(wh+30,lh+50))
        wx.StaticText(panel,-1,'Range:',(wh+30,lh+90))
        wx.StaticText(panel,-1,'Azimuth',(wh+100-5,lh+30))
        wx.StaticText(panel,-1,'Dip',(wh+180-5,lh+30))
        wx.StaticText(panel,-1,'Rake',(wh+250-5,lh+30))
        wx.StaticText(panel,-1,'Main',(wh+100-5,lh+70))
        wx.StaticText(panel,-1,'minor1',(wh+180-5,lh+70))
        wx.StaticText(panel,-1,'minor2',(wh+250-5,lh+70))
        self.se_ang1=wx.SpinCtrl(panel,-1,'',(wh+100-5,lh+47),(70,-1),min=-90,max=90,initial=0)
        self.se_ang2=wx.SpinCtrl(panel,-1,'',(wh+175-5,lh+47),(70,-1),min=-90,max=90,initial=0)
        self.se_ang3=wx.SpinCtrl(panel,-1,'',(wh+250-5,lh+47),(60,-1),min=-90,max=90,initial=0)
        self.se_ran1=wx.SpinCtrl(panel,-1,'',(wh+100-5,lh+87),(70,-1),min=0,max=180000000,initial=100)
        self.se_ran2=wx.SpinCtrl(panel,-1,'',(wh+175-5,lh+87),(70,-1),min=0,max=180000000,initial=100)
        self.se_ran3=wx.SpinCtrl(panel,-1,'',(wh+250-5,lh+87),(60,-1),min=0,max=180000000,initial=100)
        
        wh=340
        lh=560
        wx.StaticText(panel,-1,
                      '                 Number          Size                   First coord.',
                      (340,lh+10)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(340,lh+30)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(340,lh+55)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(340,lh+80)).SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(wh+50,lh+27),(60,-1),min=1,max=100000000,initial=1)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(wh+50,lh+52),(60,-1),min=1,max=100000000,initial=1)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(wh+50,lh+77),(60,-1),min=1,max=100000000,initial=1)
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(wh+120, lh+27),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(wh+120, lh+52),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(wh+120, lh+77),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(wh+200, lh+27),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(wh+200, lh+52),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(wh+200, lh+77),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        if len(self.check_what_goes())!=0:
            self.blocks_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[0])
            self.blocks_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[1])
            self.blocks_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[2])
            
            self.size_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[0])
            self.size_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[1])
            self.size_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[2])
            
            self.first_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[0])
            self.first_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[1])
            self.first_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[2])
        
        self.btn_run = wx.Button(panel,-1,'Run Kriging',(370,670),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onrun,id=self.btn_run.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(490,670),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.btn_cancel.GetId())
        
    def write_hard(self,temp_path):
        fid = open(temp_path+os.sep+'temp_data.prn','w')
        fid.write('hard_data\n4\nx\ny\nz\nvariable\n')
        for i in xrange(frame.object_manager.object_list[self.pieces[0]].x.shape[0]):
            fid.write('%.3f     %.3f     %.3f     %.3f\n'%(frame.object_manager.object_list[self.pieces[0]].x[i],
                                                           frame.object_manager.object_list[self.pieces[0]].y[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].z[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data[i]))
        fid.close()
        
    def write_soft(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_soft.prn','w')
        fid.write('temp_soft\n1\ntsoft\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_soft_corr(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_corr.prn','w')
        fid.write('temp_soft\n1\ntcorr\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_trans_corr(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_corr.prn','w')
        fid.write('temp_soft\n1\ntcorr\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    value = (frame.object_manager.object_list[obj].variable[vrble].data[x,y,z]-frame.object_manager.object_list[obj].variable[vrble].basic_statistics[3])/(frame.object_manager.object_list[obj].variable[vrble].basic_statistics[4]-frame.object_manager.object_list[obj].variable[vrble].basic_statistics[3])
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_bidis(self,temp_path):
        np.savetxt(temp_path+os.sep+'temp_bidis.prn',self.bidistribution_data,fmt='%.3f')
        
    def onrun(self,event):
        if self.output_dir != None:
            if self.kriging_type.GetValue()=='Joint pobability distributions' and self.bidistribution_path==None:
                wx.MessageBox("Trying to run Joint Probability Distributions but theres no bidistribution file.","Warning")
            else:
                dpath= win32api.GetLongPathName(win32api.GetTempPath())
                #shutil.copyfile(self.wavelet_path,dpath+os.sep+'temp_wavelet.prn')
                if self.kriging_type.GetValue() not in ['Simple','Ordinary']:
                    self.write_soft(dpath,self.object.GetValue(),self.variable.GetValue())
                    if self.kriging_type.GetValue() in ['Local Collocated CoKriging','Local joint pobability distributions']:
                        if frame.object_manager.object_list[self.cobject.GetValue()].variable[self.cvariable.GetValue()].basic_statistics[3]<0 or frame.object_manager.object_list[self.cobject.GetValue()].variable[self.cvariable.GetValue()].basic_statistics[4] > 1:              
                            wx.MessageBox("Local correlation object will be transformed since it has values out of the range 0:1.","Warning")                            
                            self.write_trans_corr(dpath,self.cobject.GetValue(),self.cvariable.GetValue())
                        else:
                            self.write_soft_corr(dpath,self.cobject.GetValue(),self.cvariable.GetValue())
                self.write_hard(dpath)
                fid=open('PAR\\example_ssdir.par','U')
                total=fid.readlines()
                fid.close()
                total[14] = 'DATAFILE  = '+dpath+os.sep+'temp_data.prn'+'  # Hard Data file'+os.linesep
                total[21] = 'MINVAL    = '+repr(self.minimum.GetValue())+'   # Minimun threshold value'+os.linesep
                total[22] = 'MAXVAL    = '+repr(self.maximum.GetValue())+'   # Maximum threshold value'+os.linesep
                total[25] = 'ZMIN    = '+repr(self.minimum.GetValue())+'  # Minimum allowable data value'+os.linesep
                total[26] = 'ZMAX    = '+repr(self.maximum.GetValue())+'  # Maximum allowable data value'+os.linesep
                total[28] = 'LTPAR   = '+repr(self.minimum.GetValue())+'   # Parameter for the ltail=2'+os.linesep
                total[30] = 'UTPAR   = '+repr(self.maximum.GetValue())+'    # Parameter for the utail=2 '+os.linesep
                total[35] = 'OUTFILE   = '+self.output_dir+os.sep+'geoms2_'+'   # Filename of the resultant simulations'+os.linesep                
                #total[36] = 'NSIMS     = '+str(self.simulations.GetValue())+'                 # Number of Simulations to generate '+os.linesep
                
                total[45] = 'NX        ='+str(self.blocks_in_x.GetValue())+os.linesep
                total[46] = 'NY        ='+str(self.blocks_in_y.GetValue())+os.linesep
                total[47] = 'NZ        ='+str(self.blocks_in_z.GetValue())+os.linesep
                total[49] = 'ORIGX     ='+str(self.first_in_x.GetValue())+os.linesep
                total[50] = 'ORIGY     ='+str(self.first_in_y.GetValue())+os.linesep
                total[51] = 'ORIGZ     ='+str(self.first_in_z.GetValue())+os.linesep
                total[53] = 'SIZEX     ='+str(self.size_in_x.GetValue())+os.linesep
                total[54] = 'SIZEY     ='+str(self.size_in_y.GetValue())+os.linesep
                total[55] = 'SIZEZ     ='+str(self.size_in_z.GetValue())+os.linesep
                
                total[60] = 'NULLVAL   = '+str(self.null.GetValue())+'           # Definition of the null value '+os.linesep
                #total[61] = 'SEED      ='+str(self.seed.GetValue())+'            # Seed for the pseudorandom number generator - if you want repeatable simulations '+os.linesep
                
                total[74] = 'RADIUS1 ='+str(self.se_ran1.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[75] = 'RADIUS2 ='+str(self.se_ran2.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[76] = 'RADIUS3 ='+str(self.se_ran3.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[77] = 'SANG1   ='+str(self.se_ang1.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep
                total[78] = 'SANG2   ='+str(self.se_ang2.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep
                total[79] = 'SANG3   ='+str(self.se_ang3.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep

                # ['Simple','Ordinary','Simple with locally varying mean','External Drift',
                #'Gloabl Collocated CoKriging','Local Collocated CoKriging',
                #'Joint pobability distributions','Local joint pobability distributions']
                if self.kriging_type.GetValue() in ['Simple with locally varying mean','External Drift','Gloabl Collocated CoKriging','Local Collocated CoKriging','Joint pobability distributions','Local joint pobability distributions']:
                    if self.kriging_type.GetValue()=='Simple': ktype=0
                    elif self.kriging_type.GetValue()=='Ordinary': ktype=1 
                    elif self.kriging_type.GetValue()=='Simple with locally varying mean': ktype=2 
                    elif self.kriging_type.GetValue()=='External Drift': ktype=3 
                    elif self.kriging_type.GetValue()=='Gloabl Collocated CoKriging': ktype=4 
                    elif self.kriging_type.GetValue()=='Local Collocated CoKriging': ktype=5
                    #elif self.kriging_type.GetValue()=='Joint pobability distributions': ktype=4 
                    #elif self.kriging_type.GetValue()=='Local joint pobability distributions': ktype=5
                    
                    total[84] = 'KTYPE     ='+str(ktype)+'               # Kriging type ;0=simple,1=ordinary,2=simple with locally varying mean, '+os.linesep
                    total[86] = 'COLOCORR ='+str(self.global_correlation.GetValue()/100)+'                # Global CC to ktype=4'+os.linesep
                                      
                    total[87] = 'SOFTFILE  ='+dpath+os.sep+'temp_soft.prn'+'   # Filename of the soft data'+os.linesep
                    if self.kriging_type.GetValue() in ['Local Collocated CoKriging','Local joint pobability distributions']:
                        total[90] = 'CCFILE    ='+dpath+os.sep+'temp_corr.prn'+'      # Filename of correlation file for local correlations (ktype=5)'+os.linesep
                    """
                    if self.kriging_type.GetValue() in ['Joint pobability distributions','Local joint pobability distributions']:
                        total[110] = 'USEBIHIST =1 #Use Bihist? 1-yes 0-no'+os.linesep
                        self.write_bidis(dpath)
                        total[111] = 'BIHISTFILE ='+dpath+os.sep+'temp_bidis.prn'+'   # bihistogram file'+os.linesep
                        total[112] = 'NCLASSES = '+str(self.bidistribution_classes.GetValue())+'                           # number of classes to use '+os.linesep
                        total[113] = 'AUXILIARYFILE = '+dpath+os.sep+'temp_soft.prn'+'       # auxiliary image '+os.linesep
                    """
                total[95] = 'NSTRUCT = '+repr(int(self.check1.GetValue())+int(self.check2.GetValue())+int(self.check3.GetValue()))+'                   # Number of semivariograms structures (NST(1)) '+os.linesep
                total[96] = 'NUGGET = '+str(self.nugget.GetValue()/100)+'                    # Nugget constant (C0(1))'+os.linesep           
                
                dic = {}
                dic['Spherical'] = 1
                dic['Exponential'] = 2
                dic['Gaussian'] = 3        
                total[98]='TYPE = '+repr(dic[self.model1.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep
                if self.check1.GetValue():
                    total[99]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                else:
                    total[99]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                total[100]='ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                total[101]='ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep
                total[102]='ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep
                total[103]='AA   = '+repr(self.range1.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                total[104]='AA1  = '+repr(self.range1_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep
                total[105]='AA2  = '+repr(self.range1_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep
                if self.check2.GetValue():
                    total.append(os.linesep)
                    total.append('[VARIOGRAM2]'+os.linesep)
                    total.append('TYPE = '+repr(dic[self.model2.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep)
                    total.append('COV  = '+'%.3f'%(self.sill2.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep)
                    total.append('ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep)
                    total.append('ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep)
                    total.append('ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep)
                    total.append('AA   = '+repr(self.range2.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep)
                    total.append('AA1  = '+repr(self.range2_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep)
                    total.append('AA2  = '+repr(self.range2_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep)
                if self.check3.GetValue():
                    total.append(os.linesep)
                    total.append('[VARIOGRAM3]'+os.linesep)
                    total.append('TYPE = '+repr(dic[self.model3.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep)
                    total.append('COV  = '+'%.3f'%(self.sill3.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep)
                    total.append('ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep)
                    total.append('ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep)
                    total.append('ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep)
                    total.append('AA   = '+repr(self.range3.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep)
                    total.append('AA1  = '+repr(self.range3_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep)
                    total.append('AA2  = '+repr(self.range3_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep)     
                
                fid=open(dpath+'\\ssdir.par','w')
                fid.writelines(total)
                #for i in total:
                #    fid.write(i)
                fid.close()
                path1=os.getcwd()
                path2=path1+'\\EXE'
                os.chdir(path2)
                process=subprocess.Popen(r'krige.exe "'+dpath+'\\ssdir.par"').wait()
                os.chdir(path1)
                #self.do_image_statistics()
                blocks = (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
                size   = (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
                first  = (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
                path = self.output_dir+os.sep+'geoms2_Krig_mean.out'
                frame.object_manager.add_mesh_object_from_file(path,blocks,size,first,null=self.null.GetValue(),
                                                              filetype='ASCII'
                                                              ,dtype='float32'
                                                              ,at_least=3)
                                                              
                frame.update_last_object_list()
                
                path = self.output_dir+os.sep+'geoms2_Krig_var.out'
                frame.object_manager.add_mesh_object_from_file(path,blocks,size,first,null=self.null.GetValue(),
                                                              filetype='ASCII'
                                                              ,dtype='float32'
                                                              ,at_least=3)
                                                              
                frame.update_last_object_list()
                
                wx.MessageBox("Process is finished. Check output directory for confirmation.","Information")
                self.Destroy()
        else:
            wx.MessageBox("You must have an output path.","Warning")
            
    def do_image_statistics(self):
        gpaths=[self.output_dir+os.sep+'outfile.out']
        for i in xrange(2,self.simulations.GetValue()+1):
            gpaths.append(self.output_dir+os.sep+'outfile'+str(i)+'.out')
        sims=self.simulations.GetValue()
        fid = open(gpaths[0])
        for h in xrange(3): fid.readline()
        blocks=np.loadtxt(fid).shape[0]
        fid.close()
        d={}
    
        fmean=open(self.output_dir+os.sep+'mean.PRN','w')
        fvar=open(self.output_dir+os.sep+'variance.PRN','w')
        fmean.write('MEAN\n1\nmean\n')
        fvar.write('VARIANCE\n1\nvariance\n')     
        
        for k in xrange(sims):
            d[k]=open(gpaths[k],'r')
            for h in xrange(3): d[k].readline()
        t=blocks
        tc=t
        c=0
        l=0
        dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
        for i in xrange(t):
            if c>tc:
                tc=tc+t
                l=l+1
            c=c+1
            line=np.zeros(sims)
            for j in xrange(sims):
                line[j]=np.float(d[j].readline())
            fmean.write('%15.6f\n'%line.mean())
            fvar.write('%15.6f\n'%line.var())
            dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
        fmean.close()
        fvar.close()
        for k in xrange(sims):
            d[k].close()
    
    def onbidisfile(self,event):
        dlg=wx.FileDialog(self,"Choose input bidistribution file.",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            self.bidistribution_path = open(dlg.GetPath())
            try:
                data = np.loadtxt(self.bidistribution_path)
                flag=True
            except ValueError:
                self.bidistribution_path = None
                flag = False
                wx.MessageBox('Unable to open bidistribution file. Make certain the file has no header.', 'Error', wx.OK | wx.ICON_INFORMATION)
            if flag:
                if data.shape[1]!=2:
                    self.bidistribution_path = None
                    wx.MessageBox('The file should only have 2 columns.', 'Error', wx.OK | wx.ICON_INFORMATION)
                else:
                    self.bidistribution_data = data[np.argsort(data,axis=0)[:,0],:]
                    
    def onbidis(self,event):
        #self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        #self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.bidis_variable1.Clear()
        self.bidis_variable1.AppendItems(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names())
        self.bidis_variable1.SetValue(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0])
        self.bidis_variable2.Clear()
        self.bidis_variable2.AppendItems(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names())
        self.bidis_variable2.SetValue(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        self.blocks_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[0])
        self.blocks_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[1])
        self.blocks_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[2])
        
        self.size_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[0])
        self.size_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[1])
        self.size_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[2])
        
        self.first_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[0])
        self.first_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[1])
        self.first_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[2])
        
    def oncobjectcombo(self,event):
        self.cvariable.Clear()
        self.cvariable.AppendItems(frame.object_manager.object_list[self.cobject.GetValue()].get_variable_names())
        self.cvariable.SetValue(frame.object_manager.object_list[self.cobject.GetValue()].get_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def check_what_data_goes(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if len(frame.object_manager.object_list[i].get_numeric_variable_names())!=0:
                    what_gives.append(i)
        return what_gives
    
    def ondiroutput(self,event):
        dlg=wx.DirDialog(self,"Choose output directory.",style=wx.SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            self.output_dir=dlg.GetPath()        
            
    def oncheck1(self,event):
        if self.check1.GetValue():
            self.sill1.Enable()
            self.model1.Enable()
            self.range1.Enable()
            self.range1_m1.Enable()
            self.range1_m2.Enable()
            self.check2.Enable()
        else:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check2.SetValue(False)
            self.check2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck2(self,event):
        if self.check2.GetValue():
            self.sill2.Enable()
            self.model2.Enable()
            self.range2.Enable()
            self.range2_m1.Enable()
            self.range2_m2.Enable()
            self.check3.Enable()
        else:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck3(self,event):
        if self.check3.GetValue():
            self.sill3.Enable()
            self.model3.Enable()
            self.range3_m1.Enable()
            self.range3_m2.Enable()
            self.range3.Enable()
        else:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()

class CTXDSSFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Direct Sequential Simulation",size=(660,770),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.RESIZE_BORDER)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        #panel=self.panel=wx.Panel(self)
        
        panel=self.panel=wx.ScrolledWindow(self,wx.ID_ANY)
        #panel.SetBackgroundColour('white')
        panel.SetScrollbars(1,1,640,750)
        
        self.pieces = pieces
        
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            ini1 = frame.object_manager.call(pieces).model_angles[0]
            ini2 = frame.object_manager.call(pieces).model_angles[1]
            ini3 = frame.object_manager.call(pieces).model_angles[2]
        else:
            ini1 = 0
            ini2 = 0
            ini3 = 0
        
        wx.StaticBox(panel,-1,'Variogram parameters',(10,10),(300,250))
        #self.refresh = wx.Button(panel,-1,'Refresh',(220,7),(50,-1))
        #self.Bind(wx.EVT_BUTTON,self.update_directional_variograms,id=self.refresh.GetId())
        wx.StaticText(panel,-1,'Azimuth (1):',(30,45))
        self.angle1 = wx.Slider(panel, -1, ini1, -89, 90, (90,27), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.Bind(wx.EVT_SLIDER,self.update_nunesplot,id=self.angle1.GetId())
        wx.StaticText(panel,-1,'Dip (2):',(30,95))
        self.angle2 = wx.Slider(panel, -1, ini2, -89, 90, (90,77), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle2.Disable()
        wx.StaticText(panel,-1,'Rake (3):',(30,145))
        self.angle3 = wx.Slider(panel, -1, ini3, -89, 90, (90,137), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle3.Disable()
        
        wx.StaticText(panel,-1,'Tol.:',(30,195))
        self.tolerance = wx.SpinCtrl(panel,-1,'',(60,192),(50,-1),min=1,max=90,initial=15)
        wx.StaticText(panel,-1,'Bins:',(120,195))
        self.bins = wx.SpinCtrl(panel,-1,'',(150,192),(50,-1),min=2,max=500,initial=10)
        wx.StaticText(panel,-1,'Max:',(210,195))
        self.maximum = FS.FloatSpin(panel, -1,(240, 192),(60,-1),min_val=0,max_val=100000000,value = 0,digits=3)
        self.tolerance.Disable()
        self.bins.Disable()
        self.maximum.Disable()
        
        wx.StaticText(panel,-1,'Sill:',(30,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: sill = frame.object_manager.call(pieces).full_sill
        else: sill = frame.object_manager.call(pieces).basic_statistics[1]
        self.sill = FS.FloatSpin(panel, -1,(50, 222),(60,-1),min_val=0,max_val=1000000000,value = sill,digits=3)
        wx.StaticText(panel,-1,'Nug.:',(120,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: nug = frame.object_manager.call(pieces).model_nugget
        else: nug = 0
        self.nugget = wx.SpinCtrl(panel,-1,'',(150,222),(50,-1),min=0,max=100,initial=nug)
        wx.StaticText(panel,-1,'dZ:',(210,225))
        self.dz = FS.FloatSpin(panel, -1,(240, 222),(60,-1),min_val=0,max_val=1000000000,value = 0,digits=3)
        self.dz.Disable()
        
        wx.StaticBox(panel,-1,'Model 1 parameters',(10,260),(300,150))
        self.check1 = wx.CheckBox(panel,-1,' Plot model 1',(30,290))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck1,id=self.check1.GetId())
        wx.StaticText(panel,-1,'Model 1 sill:',(30,320))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 1:
                self.check1.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[0]
                ini2 = frame.object_manager.call(pieces).model_types[0]
                ini3 = frame.object_manager.call(pieces).model1_ranges[0]
                ini4 = frame.object_manager.call(pieces).model1_ranges[1]
                ini5 = frame.object_manager.call(pieces).model1_ranges[2]
            else:
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill1 = wx.SpinCtrl(panel,-1,'',(90,317),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,350))
        self.model1 = wx.ComboBox(panel,-1,ini2,(90,347),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,380))
        self.range1 = FS.FloatSpin(panel, -1,(70, 377),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range1_m1 = FS.FloatSpin(panel, -1,(155, 377),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range1_m2 = FS.FloatSpin(panel, -1,(235, 377),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check1.GetValue()==False:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            
        wx.StaticBox(panel,-1,'Model 2 parameters',(10,410),(300,150))
        self.check2 = wx.CheckBox(panel,-1,' Plot model 2',(30,440))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.check2.GetId())
        wx.StaticText(panel,-1,'Model 2 sill:',(30,470))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 2:
                self.check2.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[1]
                ini2 = frame.object_manager.call(pieces).model_types[1]
                ini3 = frame.object_manager.call(pieces).model2_ranges[0]
                ini4 = frame.object_manager.call(pieces).model2_ranges[1]
                ini5 = frame.object_manager.call(pieces).model2_ranges[2]
            else:
                self.check2.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check2.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill2 = wx.SpinCtrl(panel,-1,'',(90,467),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,500))
        self.model2 = wx.ComboBox(panel,-1,ini2,(90,497),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,530))
        self.range2 = FS.FloatSpin(panel, -1,(70, 527),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range2_m1 = FS.FloatSpin(panel, -1,(155, 527),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range2_m2 = FS.FloatSpin(panel, -1,(235, 527),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check2.GetValue()==False:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            
        wx.StaticBox(panel,-1,'Model 3 parameters',(10,560),(300,150))
        self.check3 = wx.CheckBox(panel,-1,' Plot model 3',(30,590))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck3,id=self.check3.GetId())
        wx.StaticText(panel,-1,'Model 3 sill:',(30,620))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 3:
                self.check3.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[2]
                ini2 = frame.object_manager.call(pieces).model_types[2]
                ini3 = frame.object_manager.call(pieces).model3_ranges[0]
                ini4 = frame.object_manager.call(pieces).model3_ranges[1]
                ini5 = frame.object_manager.call(pieces).model3_ranges[2]
            else:
                self.check3.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check3.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill3 = wx.SpinCtrl(panel,-1,'',(90,617),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,650))
        self.model3 = wx.ComboBox(panel,-1,ini2,(90,647),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,680))
        self.range3 = FS.FloatSpin(panel, -1,(70, 677),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range3_m1 = FS.FloatSpin(panel, -1,(155, 677),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range3_m2 = FS.FloatSpin(panel, -1,(235, 677),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check3.GetValue()==False:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
        
        if self.check1.GetValue()==False:
            self.check2.Disable()
            self.check3.Disable()
        elif self.check1.GetValue()==True and self.check2.GetValue()==False:
            self.check3.Disable()
            
        wx.StaticBox(panel,-1,'General parameters',(320,10),(300,400))
        wx.StaticText(panel,-1,'Number of simulations:',(340,40))
        wx.StaticText(panel,-1,'Minimum:',(340,80))
        wx.StaticText(panel,-1,'Maximum:',(470,80))
        wx.StaticText(panel,-1,'Kriging type:',(340,120))
        self.simulations = wx.SpinCtrl(panel,-1,'',(460,37),(100,-1),min=2,max=300,initial=16)
        self.minimum = FS.FloatSpin(panel, -1,(390,77),(70,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call(pieces).basic_statistics[3],digits=3)
        self.maximum = FS.FloatSpin(panel, -1,(520,77),(70,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call(pieces).basic_statistics[4],digits=3)        
        if len(self.check_what_goes())==0:
            choices = ['Simple','Ordinary']
        else:
            if len(self.check_what_data_goes()):
                choices = ['Simple','Ordinary','Simple with locally varying mean','External Drift','Global Collocated CoKriging','Local Collocated CoKriging','Joint pobability distributions','Local joint pobability distributions']
            else:
                choices = ['Simple','Ordinary','Simple with locally varying mean','External Drift','Global Collocated CoKriging','Local Collocated CoKriging']
        self.kriging_type = wx.ComboBox(panel,-1,'Simple',(420,117),(150,-1),choices=choices,style=wx.CB_READONLY)            
        wx.StaticText(panel,-1,'Nulldata:',(340,160))
        wx.StaticText(panel,-1,'Seed:',(470,160))
        self.null = FS.FloatSpin(panel, -1,(390,157),(70,-1),min_val=-100000000,max_val=100000000,value = -999,digits=3)
        self.seed = wx.SpinCtrl(panel,-1,'',(520,157),(70,-1),min=1000000,max=9999999,initial=1234567)
        
        self.output_dir = None
        
        self.btn_output = wx.Button(panel,-1,'Output directory',(340,200),(260,40))
        self.Bind(wx.EVT_BUTTON,self.ondiroutput,id=self.btn_output.GetId())
        
        wx.StaticText(panel,-1,'Soft data:',(340,260))
        if len(self.check_what_goes())!=0:
            self.object = wx.ComboBox(panel,-1,self.check_what_goes()[0],(400,257),(100,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0],(510,257),(90,-1),choices = frame.object_manager.object_list[self.object.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        else:
            self.object = wx.ComboBox(panel,-1,'None',(400,257),(100,-1),choices = ['None'],style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.variable = wx.ComboBox(panel,-1,'None',(510,257),(90,-1),choices = ['None'],style=wx.CB_READONLY)
            self.object.Disable()
            self.variable.Disable()
            
        wx.StaticText(panel,-1,'Cor. data:',(340,300))
        if len(self.check_what_goes())!=0:
            self.cobject = wx.ComboBox(panel,-1,self.check_what_goes()[0],(400,297),(100,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.oncobjectcombo,id=self.cobject.GetId())
            self.cvariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0],(510,297),(90,-1),choices = frame.object_manager.object_list[self.object.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        else:
            self.cobject = wx.ComboBox(panel,-1,'None',(400,297),(100,-1),choices = ['None'],style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.oncobjectcombo,id=self.cobject.GetId())
            self.cvariable = wx.ComboBox(panel,-1,'None',(510,297),(90,-1),choices = ['None'],style=wx.CB_READONLY)
            self.cobject.Disable()
            self.cvariable.Disable()
            
        wx.StaticText(panel,-1,'Correlation:',(340,340))
        self.global_correlation = wx.SpinCtrl(panel,-1,'',(400,337),(100,-1),min=0,max=100,initial=70)
        
        self.bidistribution_path = None
        self.bidistribution_data = None
        
        #self.btn_bidistribution = wx.Button(panel,-1,'Bidistribution file',(340,380),(140,20))
        #self.Bind(wx.EVT_BUTTON,self.onbidisfile,id=self.btn_bidistribution.GetId())
        if len(self.check_what_data_goes())!=0:
            wx.StaticText(panel,-1,'Bidistribution object; secondary; primary; bins',(340,360))
            self.bidis_object = wx.ComboBox(panel,-1,self.check_what_data_goes()[0],(335,380),(70,-1),choices = self.check_what_data_goes(),style=wx.CB_READONLY)
            self.bidis_variable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names()[0],(410,380),(70,-1),choices = frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.bidis_variable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names()[0],(485,380),(70,-1),choices = frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.bidistribution_classes = wx.SpinCtrl(panel,-1,'',(560,380),(60,-1),min=2,max=1000,initial=40)
            self.Bind(wx.EVT_COMBOBOX,self.onbidis,id=self.bidis_object.GetId())
        
        wx.StaticBox(panel,-1,'Search Ellipsoid',(320,410),(300,150))
        wh = 310
        lh = 410
        wx.StaticText(panel,-1,'Orientation:',(wh+30,lh+50))
        wx.StaticText(panel,-1,'Range:',(wh+30,lh+90))
        wx.StaticText(panel,-1,'Azimuth',(wh+100-5,lh+30))
        wx.StaticText(panel,-1,'Dip',(wh+180-5,lh+30))
        wx.StaticText(panel,-1,'Rake',(wh+250-5,lh+30))
        wx.StaticText(panel,-1,'Main',(wh+100-5,lh+70))
        wx.StaticText(panel,-1,'minor1',(wh+180-5,lh+70))
        wx.StaticText(panel,-1,'minor2',(wh+250-5,lh+70))
        self.se_ang1=wx.SpinCtrl(panel,-1,'',(wh+100-5,lh+47),(70,-1),min=-90,max=90,initial=0)
        self.se_ang2=wx.SpinCtrl(panel,-1,'',(wh+175-5,lh+47),(70,-1),min=-90,max=90,initial=0)
        self.se_ang3=wx.SpinCtrl(panel,-1,'',(wh+250-5,lh+47),(60,-1),min=-90,max=90,initial=0)
        self.se_ran1=wx.SpinCtrl(panel,-1,'',(wh+100-5,lh+87),(70,-1),min=0,max=180000000,initial=100)
        self.se_ran2=wx.SpinCtrl(panel,-1,'',(wh+175-5,lh+87),(70,-1),min=0,max=180000000,initial=100)
        self.se_ran3=wx.SpinCtrl(panel,-1,'',(wh+250-5,lh+87),(60,-1),min=0,max=180000000,initial=100)
        
        wh=340
        lh=560
        wx.StaticText(panel,-1,
                      '                 Number          Size                   First coord.',
                      (340,lh+10)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(340,lh+30)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(340,lh+55)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(340,lh+80)).SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(wh+50,lh+27),(60,-1),min=1,max=100000000,initial=1)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(wh+50,lh+52),(60,-1),min=1,max=100000000,initial=1)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(wh+50,lh+77),(60,-1),min=1,max=100000000,initial=1)
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(wh+120, lh+27),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(wh+120, lh+52),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(wh+120, lh+77),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(wh+200, lh+27),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(wh+200, lh+52),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(wh+200, lh+77),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        if len(self.check_what_goes())!=0:
            self.blocks_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[0])
            self.blocks_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[1])
            self.blocks_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[2])
            
            self.size_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[0])
            self.size_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[1])
            self.size_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[2])
            
            self.first_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[0])
            self.first_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[1])
            self.first_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[2])
        
        self.btn_run = wx.Button(panel,-1,'Run DSS',(370,670),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onrun,id=self.btn_run.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(490,670),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.btn_cancel.GetId())
        
    def write_hard(self,temp_path):
        fid = open(temp_path+os.sep+'temp_data.prn','w')
        fid.write('hard_data\n4\nx\ny\nz\nvariable\n')
        for i in xrange(frame.object_manager.object_list[self.pieces[0]].x.shape[0]):
            fid.write('%.3f     %.3f     %.3f     %.3f\n'%(frame.object_manager.object_list[self.pieces[0]].x[i],
                                                           frame.object_manager.object_list[self.pieces[0]].y[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].z[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data[i]))
        fid.close()
        
    def write_soft(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_soft.prn','w')
        fid.write('temp_soft\n1\ntsoft\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_soft_corr(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_corr.prn','w')
        fid.write('temp_soft\n1\ntcorr\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_trans_corr(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_corr.prn','w')
        fid.write('temp_soft\n1\ntcorr\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    value = (frame.object_manager.object_list[obj].variable[vrble].data[x,y,z]-frame.object_manager.object_list[obj].variable[vrble].basic_statistics[3])/(frame.object_manager.object_list[obj].variable[vrble].basic_statistics[4]-frame.object_manager.object_list[obj].variable[vrble].basic_statistics[3])
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_bidis(self,temp_path):
        np.savetxt(temp_path+os.sep+'temp_bidis.prn',self.bidistribution_data,fmt='%.3f')
        
    def onrun(self,event):
        if self.output_dir != None:
            if self.kriging_type.GetValue()=='Joint pobability distributions' and self.bidistribution_path==None:
                wx.MessageBox("Trying to run Joint Probability Distributions but theres no bidistribution file.","Warning")
            else:
                dpath= win32api.GetLongPathName(win32api.GetTempPath())
                #shutil.copyfile(self.wavelet_path,dpath+os.sep+'temp_wavelet.prn')
                if self.kriging_type.GetValue() not in ['Simple','Ordinary']:
                    self.write_soft(dpath,self.object.GetValue(),self.variable.GetValue())
                    if self.kriging_type.GetValue() in ['Local Collocated CoKriging','Local joint pobability distributions']:
                        if frame.object_manager.object_list[self.cobject.GetValue()].variable[self.cvariable.GetValue()].basic_statistics[3]<0 or frame.object_manager.object_list[self.cobject.GetValue()].variable[self.cvariable.GetValue()].basic_statistics[4] > 1:              
                            wx.MessageBox("Local correlation object will be transformed since it has values out of the range 0:1.","Warning")                            
                            self.write_trans_corr(dpath,self.cobject.GetValue(),self.cvariable.GetValue())
                        else:
                            self.write_soft_corr(dpath,self.cobject.GetValue(),self.cvariable.GetValue())
                self.write_hard(dpath)
                """
                fid=open('PAR\\example_ssdir.par','U')
                total=fid.readlines()
                fid.close()
                total[14] = 'DATAFILE  = '+dpath+os.sep+'temp_data.prn'+'  # Hard Data file'+os.linesep
                total[21] = 'MINVAL    = '+repr(self.minimum.GetValue())+'   # Minimun threshold value'+os.linesep
                total[22] = 'MAXVAL    = '+repr(self.maximum.GetValue())+'   # Maximum threshold value'+os.linesep
                total[25] = 'ZMIN    = '+repr(self.minimum.GetValue())+'  # Minimum allowable data value'+os.linesep
                total[26] = 'ZMAX    = '+repr(self.maximum.GetValue())+'  # Maximum allowable data value'+os.linesep
                total[28] = 'LTPAR   = '+repr(self.minimum.GetValue())+'   # Parameter for the ltail=2'+os.linesep
                total[30] = 'UTPAR   = '+repr(self.maximum.GetValue())+'    # Parameter for the utail=2 '+os.linesep
                total[35] = 'OUTFILE   = '+self.output_dir+os.sep+'outfile.out'+'   # Filename of the resultant simulations'+os.linesep                
                total[36] = 'NSIMS     = '+str(self.simulations.GetValue())+'                 # Number of Simulations to generate '+os.linesep
                
                total[45] = 'NX        ='+str(self.blocks_in_x.GetValue())+os.linesep
                total[46] = 'NY        ='+str(self.blocks_in_y.GetValue())+os.linesep
                total[47] = 'NZ        ='+str(self.blocks_in_z.GetValue())+os.linesep
                total[49] = 'ORIGX     ='+str(self.first_in_x.GetValue())+os.linesep
                total[50] = 'ORIGY     ='+str(self.first_in_y.GetValue())+os.linesep
                total[51] = 'ORIGZ     ='+str(self.first_in_z.GetValue())+os.linesep
                total[53] = 'SIZEX     ='+str(self.size_in_x.GetValue())+os.linesep
                total[54] = 'SIZEY     ='+str(self.size_in_y.GetValue())+os.linesep
                total[55] = 'SIZEZ     ='+str(self.size_in_z.GetValue())+os.linesep
                
                total[60] = 'NULLVAL   = '+str(self.null.GetValue())+'           # Definition of the null value '+os.linesep
                total[61] = 'SEED      ='+str(self.seed.GetValue())+'            # Seed for the pseudorandom number generator - if you want repeatable simulations '+os.linesep
                
                total[74] = 'RADIUS1 ='+str(self.se_ran1.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[75] = 'RADIUS2 ='+str(self.se_ran2.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[76] = 'RADIUS3 ='+str(self.se_ran3.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[77] = 'SANG1   ='+str(self.se_ang1.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep
                total[78] = 'SANG2   ='+str(self.se_ang2.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep
                total[79] = 'SANG3   ='+str(self.se_ang3.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep

                # ['Simple','Ordinary','Simple with locally varying mean','External Drift',
                #'Gloabl Collocated CoKriging','Local Collocated CoKriging',
                #'Joint pobability distributions','Local joint pobability distributions']
                if self.kriging_type.GetValue() in ['Simple with locally varying mean','External Drift','Gloabl Collocated CoKriging','Local Collocated CoKriging','Joint pobability distributions','Local joint pobability distributions']:
                    if self.kriging_type.GetValue()=='Simple': ktype=0
                    elif self.kriging_type.GetValue()=='Ordinary': ktype=1 
                    elif self.kriging_type.GetValue()=='Simple with locally varying mean': ktype=2 
                    elif self.kriging_type.GetValue()=='External Drift': ktype=3 
                    elif self.kriging_type.GetValue()=='Global Collocated CoKriging': ktype=4 
                    elif self.kriging_type.GetValue()=='Local Collocated CoKriging': ktype=5
                    elif self.kriging_type.GetValue()=='Joint pobability distributions': ktype=4 
                    elif self.kriging_type.GetValue()=='Local joint pobability distributions': ktype=5
                    
                    total[84] = 'KTYPE     ='+str(ktype)+'               # Kriging type ;0=simple,1=ordinary,2=simple with locally varying mean, '+os.linesep
                    total[86] = 'COLOCORR ='+str(self.global_correlation.GetValue()/100)+'                # Global CC to ktype=4'+os.linesep
                                      
                    total[87] = 'SOFTFILE  ='+dpath+os.sep+'temp_soft.prn'+'   # Filename of the soft data'+os.linesep
                    if self.kriging_type.GetValue() in ['Local Collocated CoKriging','Local joint pobability distributions']:
                        total[90] = 'CCFILE    ='+dpath+os.sep+'temp_corr.prn'+'      # Filename of correlation file for local correlations (ktype=5)'+os.linesep
                    
                    if self.kriging_type.GetValue() in ['Joint pobability distributions','Local joint pobability distributions']:
                        total[110] = 'USEBIHIST =1 #Use Bihist? 1-yes 0-no'+os.linesep
                        self.write_bidis(dpath)
                        total[111] = 'BIHISTFILE ='+dpath+os.sep+'temp_bidis.prn'+'   # bihistogram file'+os.linesep
                        total[112] = 'NCLASSES = '+str(self.bidistribution_classes.GetValue())+'                           # number of classes to use '+os.linesep
                        total[113] = 'AUXILIARYFILE = '+dpath+os.sep+'temp_soft.prn'+'       # auxiliary image '+os.linesep
                    
                total[95] = 'NSTRUCT = '+repr(int(self.check1.GetValue())+int(self.check2.GetValue())+int(self.check3.GetValue()))+'                   # Number of semivariograms structures (NST(1)) '+os.linesep
                total[96] = 'NUGGET = '+str(self.nugget.GetValue()/100)+'                    # Nugget constant (C0(1))'+os.linesep           
                
                dic = {}
                dic['Spherical'] = 1
                dic['Exponential'] = 2
                dic['Gaussian'] = 3        
                total[98]='TYPE = '+repr(dic[self.model1.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep
                if self.check1.GetValue():
                    total[99]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                else:
                    total[99]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                total[100]='ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                total[101]='ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep
                total[102]='ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep
                total[103]='AA   = '+repr(self.range1.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                total[104]='AA1  = '+repr(self.range1_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep
                total[105]='AA2  = '+repr(self.range1_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep
                if self.check2.GetValue():
                    total.append(os.linesep)
                    total.append('[VARIOGRAM2]'+os.linesep)
                    total.append('TYPE = '+repr(dic[self.model2.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep)
                    total.append('COV  = '+'%.3f'%(self.sill2.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep)
                    total.append('ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep)
                    total.append('ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep)
                    total.append('ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep)
                    total.append('AA   = '+repr(self.range2.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep)
                    total.append('AA1  = '+repr(self.range2_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep)
                    total.append('AA2  = '+repr(self.range2_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep)
                if self.check3.GetValue():
                    total.append(os.linesep)
                    total.append('[VARIOGRAM3]'+os.linesep)
                    total.append('TYPE = '+repr(dic[self.model3.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep)
                    total.append('COV  = '+'%.3f'%(self.sill3.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep)
                    total.append('ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep)
                    total.append('ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep)
                    total.append('ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep)
                    total.append('AA   = '+repr(self.range3.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep)
                    total.append('AA1  = '+repr(self.range3_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep)
                    total.append('AA2  = '+repr(self.range3_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep)     
                """
                fid=open('PAR\\ssdir_Exemplo.par','U')
                total=fid.readlines()
                fid.close()
                total[18] = 'DATAFILE  = '+dpath+os.sep+'temp_data.prn'+'  # Hard Data file'+os.linesep
                total[25] = 'MINVAL    = '+repr(self.minimum.GetValue())+'   # Minimun threshold value'+os.linesep
                total[26] = 'MAXVAL    = '+repr(self.maximum.GetValue())+'   # Maximum threshold value'+os.linesep
                total[31] = 'ZMIN    = '+repr(self.minimum.GetValue())+'  # Minimum allowable data value'+os.linesep
                total[32] = 'ZMAX    = '+repr(self.maximum.GetValue())+'  # Maximum allowable data value'+os.linesep
                total[34] = 'LTPAR   = '+repr(self.minimum.GetValue())+'   # Parameter for the ltail=2'+os.linesep
                total[36] = 'UTPAR   = '+repr(self.maximum.GetValue())+'    # Parameter for the utail=2 '+os.linesep
                total[41] = 'OUTFILE   = '+self.output_dir+os.sep+'outfile.out'+'   # Filename of the resultant simulations'+os.linesep                
                total[42] = 'NSIMS     = '+str(self.simulations.GetValue())+'                 # Number of Simulations to generate '+os.linesep
                
                total[51] = 'NX        ='+str(self.blocks_in_x.GetValue())+os.linesep
                total[52] = 'NY        ='+str(self.blocks_in_y.GetValue())+os.linesep
                total[53] = 'NZ        ='+str(self.blocks_in_z.GetValue())+os.linesep
                total[55] = 'ORIGX     ='+str(self.first_in_x.GetValue())+os.linesep
                total[56] = 'ORIGY     ='+str(self.first_in_y.GetValue())+os.linesep
                total[57] = 'ORIGZ     ='+str(self.first_in_z.GetValue())+os.linesep
                total[59] = 'SIZEX     ='+str(self.size_in_x.GetValue())+os.linesep
                total[60] = 'SIZEY     ='+str(self.size_in_y.GetValue())+os.linesep
                total[61] = 'SIZEZ     ='+str(self.size_in_z.GetValue())+os.linesep
                
                total[66] = 'NULLVAL   = '+str(self.null.GetValue())+'           # Definition of the null value '+os.linesep
                total[67] = 'SEED      ='+str(self.seed.GetValue())+'            # Seed for the pseudorandom number generator - if you want repeatable simulations '+os.linesep
                
                total[80] = 'RADIUS1 ='+str(self.se_ran1.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[81] = 'RADIUS2 ='+str(self.se_ran2.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[82] = 'RADIUS3 ='+str(self.se_ran3.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[83] = 'SANG1   ='+str(self.se_ang1.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep
                total[84] = 'SANG2   ='+str(self.se_ang2.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep
                total[85] = 'SANG3   ='+str(self.se_ang3.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep

                # ['Simple','Ordinary','Simple with locally varying mean','External Drift',
                #'Gloabl Collocated CoKriging','Local Collocated CoKriging',
                #'Joint pobability distributions','Local joint pobability distributions']
                #if self.kriging_type.GetValue() in ['Simple with locally varying mean','External Drift','Gloabl Collocated CoKriging','Local Collocated CoKriging','Joint pobability distributions','Local joint pobability distributions']:
                if self.kriging_type.GetValue()=='Simple': ktype=0
                elif self.kriging_type.GetValue()=='Ordinary': ktype=1 
                elif self.kriging_type.GetValue()=='Simple with locally varying mean': ktype=2 
                elif self.kriging_type.GetValue()=='External Drift': ktype=3 
                elif self.kriging_type.GetValue()=='Global Collocated CoKriging': ktype=4 
                elif self.kriging_type.GetValue()=='Local Collocated CoKriging': ktype=5
                elif self.kriging_type.GetValue()=='Joint pobability distributions': ktype=4 
                elif self.kriging_type.GetValue()=='Local joint pobability distributions': ktype=5
                
                total[90] = 'KTYPE     ='+str(ktype)+'               # Kriging type ;0=simple,1=ordinary,2=simple with locally varying mean, '+os.linesep
                total[92] = 'COLOCORR ='+str(self.global_correlation.GetValue()/100)+'                # Global CC to ktype=4'+os.linesep
                                  
                total[93] = 'SOFTFILE  ='+dpath+os.sep+'temp_soft.prn'+'   # Filename of the soft data'+os.linesep
                if self.kriging_type.GetValue() in ['Local Collocated CoKriging','Local joint pobability distributions']:
                    total[96] = 'CCFILE    ='+dpath+os.sep+'temp_corr.prn'+'      # Filename of correlation file for local correlations (ktype=5)'+os.linesep
                
                if self.kriging_type.GetValue() in ['Joint pobability distributions','Local joint pobability distributions']:
                    total[102] = 'USEBIHIST =1 #Use Bihist? 1-yes 0-no'+os.linesep
                    self.write_bidis(dpath)
                    total[103] = 'BIHISTFILE ='+dpath+os.sep+'temp_bidis.prn'+'   # bihistogram file'+os.linesep
                    total[104] = 'NCLASSES = '+str(self.bidistribution_classes.GetValue())+'                           # number of classes to use '+os.linesep
                    total[105] = 'AUXILIARYFILE = '+dpath+os.sep+'temp_soft.prn'+'       # auxiliary image '+os.linesep
                    
                total[131] = 'NSTRUCT = '+repr(int(self.check1.GetValue())+int(self.check2.GetValue())+int(self.check3.GetValue()))+'                   # Number of semivariograms structures (NST(1)) '+os.linesep
                total[132] = 'NUGGET = '+str(self.nugget.GetValue()/100)+'                    # Nugget constant (C0(1))'+os.linesep           
                
                dic = {}
                dic['Spherical'] = 1
                dic['Exponential'] = 2
                dic['Gaussian'] = 3        
                total[134]='TYPE = '+repr(dic[self.model1.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep
                if self.check1.GetValue():
                    total[135]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                else:
                    total[135]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                total[136]='ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                total[137]='ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep
                total[138]='ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep
                total[139]='AA   = '+repr(self.range1.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                total[140]='AA1  = '+repr(self.range1_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep
                total[141]='AA2  = '+repr(self.range1_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep
                if self.check2.GetValue():
                    total.append(os.linesep)
                    total.append('[VARIOGRAMZ1S2]'+os.linesep)
                    total.append('TYPE = '+repr(dic[self.model2.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep)
                    total.append('COV  = '+'%.3f'%(self.sill2.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep)
                    total.append('ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep)
                    total.append('ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep)
                    total.append('ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep)
                    total.append('AA   = '+repr(self.range2.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep)
                    total.append('AA1  = '+repr(self.range2_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep)
                    total.append('AA2  = '+repr(self.range2_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep)
                if self.check3.GetValue():
                    total.append(os.linesep)
                    total.append('[VARIOGRAMZ1S3]'+os.linesep)
                    total.append('TYPE = '+repr(dic[self.model3.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep)
                    total.append('COV  = '+'%.3f'%(self.sill3.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep)
                    total.append('ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep)
                    total.append('ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep)
                    total.append('ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep)
                    total.append('AA   = '+repr(self.range3.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep)
                    total.append('AA1  = '+repr(self.range3_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep)
                    total.append('AA2  = '+repr(self.range3_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep)     

                fid=open(dpath+'\\ssdir.par','w')
                fid.writelines(total)
                fid.close()
                path1=os.getcwd()
                path2=path1+'\\EXE'
                os.chdir(path2)
                process=subprocess.Popen(r'DSS.C.32_recente.exe "'+dpath+'\\ssdir.par"').wait()
                os.chdir(path1)
                self.do_image_statistics()
                blocks = (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
                size   = (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
                first  = (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
                path = self.output_dir+os.sep+'mean.PRN'
                frame.object_manager.add_mesh_object_from_file(path,blocks,size,first,null=self.null.GetValue(),
                                                              filetype='ASCII'
                                                              ,dtype='float32'
                                                              ,at_least=3)
                                                              
                frame.update_last_object_list()
                
                path = self.output_dir+os.sep+'variance.PRN'
                frame.object_manager.add_mesh_object_from_file(path,blocks,size,first,null=self.null.GetValue(),
                                                              filetype='ASCII'
                                                              ,dtype='float32'
                                                              ,at_least=3)
                                                              
                frame.update_last_object_list()
                
                wx.MessageBox("Process is finished. Check output directory for confirmation.","Information")
                self.Destroy()
        else:
            wx.MessageBox("You must have an output path.","Warning")
            
    def do_image_statistics(self):
        gpaths=[self.output_dir+os.sep+'outfile.out']
        for i in xrange(2,self.simulations.GetValue()+1):
            gpaths.append(self.output_dir+os.sep+'outfile'+str(i)+'.out')
        sims=self.simulations.GetValue()
        fid = open(gpaths[0])
        for h in xrange(3): fid.readline()
        blocks=np.loadtxt(fid).shape[0]
        fid.close()
        d={}
    
        fmean=open(self.output_dir+os.sep+'mean.PRN','w')
        fvar=open(self.output_dir+os.sep+'variance.PRN','w')
        fmean.write('MEAN\n1\nmean\n')
        fvar.write('VARIANCE\n1\nvariance\n')     
        
        for k in xrange(sims):
            d[k]=open(gpaths[k],'r')
            for h in xrange(3): d[k].readline()
        t=blocks
        tc=t
        c=0
        l=0
        dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
        for i in xrange(t):
            if c>tc:
                tc=tc+t
                l=l+1
            c=c+1
            line=np.zeros(sims)
            for j in xrange(sims):
                line[j]=np.float(d[j].readline())
            fmean.write('%15.6f\n'%line.mean())
            fvar.write('%15.6f\n'%line.var())
            dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
        fmean.close()
        fvar.close()
        for k in xrange(sims):
            d[k].close()
        dialog.Destroy()
    
    def onbidisfile(self,event):
        dlg=wx.FileDialog(self,"Choose input bidistribution file.",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            self.bidistribution_path = open(dlg.GetPath())
            try:
                data = np.loadtxt(self.bidistribution_path)
                flag=True
            except ValueError:
                self.bidistribution_path = None
                flag = False
                wx.MessageBox('Unable to open bidistribution file. Make certain the file has no header.', 'Error', wx.OK | wx.ICON_INFORMATION)
            if flag:
                if data.shape[1]!=2:
                    self.bidistribution_path = None
                    wx.MessageBox('The file should only have 2 columns.', 'Error', wx.OK | wx.ICON_INFORMATION)
                else:
                    self.bidistribution_data = data[np.argsort(data,axis=0)[:,0],:]
                    
    def onbidis(self,event):
        #self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        #self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.bidis_variable1.Clear()
        self.bidis_variable1.AppendItems(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names())
        self.bidis_variable1.SetValue(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0])
        self.bidis_variable2.Clear()
        self.bidis_variable2.AppendItems(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names())
        self.bidis_variable2.SetValue(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        self.blocks_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[0])
        self.blocks_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[1])
        self.blocks_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[2])
        
        self.size_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[0])
        self.size_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[1])
        self.size_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[2])
        
        self.first_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[0])
        self.first_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[1])
        self.first_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[2])
        
    def oncobjectcombo(self,event):
        self.cvariable.Clear()
        self.cvariable.AppendItems(frame.object_manager.object_list[self.cobject.GetValue()].get_variable_names())
        self.cvariable.SetValue(frame.object_manager.object_list[self.cobject.GetValue()].get_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def check_what_data_goes(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if len(frame.object_manager.object_list[i].get_numeric_variable_names())!=0:
                    what_gives.append(i)
        return what_gives
    
    def ondiroutput(self,event):
        dlg=wx.DirDialog(self,"Choose output directory.",style=wx.SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            self.output_dir=dlg.GetPath()        
            
    def oncheck1(self,event):
        if self.check1.GetValue():
            self.sill1.Enable()
            self.model1.Enable()
            self.range1.Enable()
            self.range1_m1.Enable()
            self.range1_m2.Enable()
            self.check2.Enable()
        else:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check2.SetValue(False)
            self.check2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck2(self,event):
        if self.check2.GetValue():
            self.sill2.Enable()
            self.model2.Enable()
            self.range2.Enable()
            self.range2_m1.Enable()
            self.range2_m2.Enable()
            self.check3.Enable()
        else:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck3(self,event):
        if self.check3.GetValue():
            self.sill3.Enable()
            self.model3.Enable()
            self.range3_m1.Enable()
            self.range3_m2.Enable()
            self.range3.Enable()
        else:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXSGSFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Sequential Gaussian Simulation",size=(660,770),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.RESIZE_BORDER)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        #panel=self.panel=wx.Panel(self)
        
        panel=self.panel=wx.ScrolledWindow(self,wx.ID_ANY)
        #panel.SetBackgroundColour('white')
        panel.SetScrollbars(1,1,640,750)
        
        self.pieces = pieces
        
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            ini1 = frame.object_manager.call(pieces).model_angles[0]
            ini2 = frame.object_manager.call(pieces).model_angles[1]
            ini3 = frame.object_manager.call(pieces).model_angles[2]
        else:
            ini1 = 0
            ini2 = 0
            ini3 = 0
        
        wx.StaticBox(panel,-1,'Variogram parameters',(10,10),(300,250))
        #self.refresh = wx.Button(panel,-1,'Refresh',(220,7),(50,-1))
        #self.Bind(wx.EVT_BUTTON,self.update_directional_variograms,id=self.refresh.GetId())
        wx.StaticText(panel,-1,'Azimuth (1):',(30,45))
        self.angle1 = wx.Slider(panel, -1, ini1, -89, 90, (90,27), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.Bind(wx.EVT_SLIDER,self.update_nunesplot,id=self.angle1.GetId())
        wx.StaticText(panel,-1,'Dip (2):',(30,95))
        self.angle2 = wx.Slider(panel, -1, ini2, -89, 90, (90,77), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle2.Disable()
        wx.StaticText(panel,-1,'Rake (3):',(30,145))
        self.angle3 = wx.Slider(panel, -1, ini3, -89, 90, (90,137), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle3.Disable()
        
        wx.StaticText(panel,-1,'Tol.:',(30,195))
        self.tolerance = wx.SpinCtrl(panel,-1,'',(60,192),(50,-1),min=1,max=90,initial=15)
        wx.StaticText(panel,-1,'Bins:',(120,195))
        self.bins = wx.SpinCtrl(panel,-1,'',(150,192),(50,-1),min=2,max=500,initial=10)
        wx.StaticText(panel,-1,'Max:',(210,195))
        self.maximum = FS.FloatSpin(panel, -1,(240, 192),(60,-1),min_val=0,max_val=100000000,value = 0,digits=3)
        self.tolerance.Disable()
        self.bins.Disable()
        self.maximum.Disable()
        
        wx.StaticText(panel,-1,'Sill:',(30,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: sill = frame.object_manager.call(pieces).full_sill
        else: sill = frame.object_manager.call(pieces).basic_statistics[1]
        self.sill = FS.FloatSpin(panel, -1,(50, 222),(60,-1),min_val=0,max_val=1000000000,value = sill,digits=3)
        wx.StaticText(panel,-1,'Nug.:',(120,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: nug = frame.object_manager.call(pieces).model_nugget
        else: nug = 0
        self.nugget = wx.SpinCtrl(panel,-1,'',(150,222),(50,-1),min=0,max=100,initial=nug)
        wx.StaticText(panel,-1,'dZ:',(210,225))
        self.dz = FS.FloatSpin(panel, -1,(240, 222),(60,-1),min_val=0,max_val=1000000000,value = 0,digits=3)
        self.dz.Disable()
        
        wx.StaticBox(panel,-1,'Model 1 parameters',(10,260),(300,150))
        self.check1 = wx.CheckBox(panel,-1,' Plot model 1',(30,290))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck1,id=self.check1.GetId())
        wx.StaticText(panel,-1,'Model 1 sill:',(30,320))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 1:
                self.check1.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[0]
                ini2 = frame.object_manager.call(pieces).model_types[0]
                ini3 = frame.object_manager.call(pieces).model1_ranges[0]
                ini4 = frame.object_manager.call(pieces).model1_ranges[1]
                ini5 = frame.object_manager.call(pieces).model1_ranges[2]
            else:
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill1 = wx.SpinCtrl(panel,-1,'',(90,317),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,350))
        self.model1 = wx.ComboBox(panel,-1,ini2,(90,347),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,380))
        self.range1 = FS.FloatSpin(panel, -1,(70, 377),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range1_m1 = FS.FloatSpin(panel, -1,(155, 377),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range1_m2 = FS.FloatSpin(panel, -1,(235, 377),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check1.GetValue()==False:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            
        wx.StaticBox(panel,-1,'Model 2 parameters',(10,410),(300,150))
        self.check2 = wx.CheckBox(panel,-1,' Plot model 2',(30,440))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.check2.GetId())
        wx.StaticText(panel,-1,'Model 2 sill:',(30,470))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 2:
                self.check2.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[1]
                ini2 = frame.object_manager.call(pieces).model_types[1]
                ini3 = frame.object_manager.call(pieces).model2_ranges[0]
                ini4 = frame.object_manager.call(pieces).model2_ranges[1]
                ini5 = frame.object_manager.call(pieces).model2_ranges[2]
            else:
                self.check2.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check2.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill2 = wx.SpinCtrl(panel,-1,'',(90,467),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,500))
        self.model2 = wx.ComboBox(panel,-1,ini2,(90,497),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,530))
        self.range2 = FS.FloatSpin(panel, -1,(70, 527),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range2_m1 = FS.FloatSpin(panel, -1,(155, 527),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range2_m2 = FS.FloatSpin(panel, -1,(235, 527),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check2.GetValue()==False:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            
        wx.StaticBox(panel,-1,'Model 3 parameters',(10,560),(300,150))
        self.check3 = wx.CheckBox(panel,-1,' Plot model 3',(30,590))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck3,id=self.check3.GetId())
        wx.StaticText(panel,-1,'Model 3 sill:',(30,620))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 3:
                self.check3.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[2]
                ini2 = frame.object_manager.call(pieces).model_types[2]
                ini3 = frame.object_manager.call(pieces).model3_ranges[0]
                ini4 = frame.object_manager.call(pieces).model3_ranges[1]
                ini5 = frame.object_manager.call(pieces).model3_ranges[2]
            else:
                self.check3.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check3.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill3 = wx.SpinCtrl(panel,-1,'',(90,617),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,650))
        self.model3 = wx.ComboBox(panel,-1,ini2,(90,647),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,680))
        self.range3 = FS.FloatSpin(panel, -1,(70, 677),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range3_m1 = FS.FloatSpin(panel, -1,(155, 677),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range3_m2 = FS.FloatSpin(panel, -1,(235, 677),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check3.GetValue()==False:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
        
        if self.check1.GetValue()==False:
            self.check2.Disable()
            self.check3.Disable()
        elif self.check1.GetValue()==True and self.check2.GetValue()==False:
            self.check3.Disable()
            
        wx.StaticBox(panel,-1,'General parameters',(320,10),(300,400))
        wx.StaticText(panel,-1,'Number of simulations:',(340,40))
        wx.StaticText(panel,-1,'Minimum:',(340,80))
        wx.StaticText(panel,-1,'Maximum:',(470,80))
        wx.StaticText(panel,-1,'Kriging type:',(340,120))
        self.simulations = wx.SpinCtrl(panel,-1,'',(460,37),(100,-1),min=2,max=300,initial=16)
        self.minimum = FS.FloatSpin(panel, -1,(390,77),(70,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call(pieces).basic_statistics[3],digits=3)
        self.maximum = FS.FloatSpin(panel, -1,(520,77),(70,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call(pieces).basic_statistics[4],digits=3)        
        if len(self.check_what_goes())==0:
            choices = ['Simple','Ordinary']
        else:
            if len(self.check_what_data_goes()):
                choices = ['Simple','Ordinary','Simple with locally varying mean','External Drift','Global Collocated CoKriging','Local Collocated CoKriging'] #,'Joint pobability distributions','Local joint pobability distributions']
            else:
                choices = ['Simple','Ordinary','Simple with locally varying mean','External Drift','Global Collocated CoKriging','Local Collocated CoKriging']
        self.kriging_type = wx.ComboBox(panel,-1,'Simple',(420,117),(150,-1),choices=choices,style=wx.CB_READONLY)            
        wx.StaticText(panel,-1,'Nulldata:',(340,160))
        wx.StaticText(panel,-1,'Seed:',(470,160))
        self.null = FS.FloatSpin(panel, -1,(390,157),(70,-1),min_val=-100000000,max_val=100000000,value = -999,digits=3)
        self.seed = wx.SpinCtrl(panel,-1,'',(520,157),(70,-1),min=1000000,max=9999999,initial=1234567)
        
        self.output_dir = None
        
        self.btn_output = wx.Button(panel,-1,'Output directory',(340,200),(260,40))
        self.Bind(wx.EVT_BUTTON,self.ondiroutput,id=self.btn_output.GetId())
        
        wx.StaticText(panel,-1,'Soft data:',(340,260))
        if len(self.check_what_goes())!=0:
            self.object = wx.ComboBox(panel,-1,self.check_what_goes()[0],(400,257),(100,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0],(510,257),(90,-1),choices = frame.object_manager.object_list[self.object.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        else:
            self.object = wx.ComboBox(panel,-1,'None',(400,257),(100,-1),choices = ['None'],style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.variable = wx.ComboBox(panel,-1,'None',(510,257),(90,-1),choices = ['None'],style=wx.CB_READONLY)
            self.object.Disable()
            self.variable.Disable()
            
        wx.StaticText(panel,-1,'Cor. data:',(340,300))
        if len(self.check_what_goes())!=0:
            self.cobject = wx.ComboBox(panel,-1,self.check_what_goes()[0],(400,297),(100,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.oncobjectcombo,id=self.cobject.GetId())
            self.cvariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0],(510,297),(90,-1),choices = frame.object_manager.object_list[self.object.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        else:
            self.cobject = wx.ComboBox(panel,-1,'None',(400,297),(100,-1),choices = ['None'],style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.oncobjectcombo,id=self.cobject.GetId())
            self.cvariable = wx.ComboBox(panel,-1,'None',(510,297),(90,-1),choices = ['None'],style=wx.CB_READONLY)
            self.cobject.Disable()
            self.cvariable.Disable()
            
        wx.StaticText(panel,-1,'Correlation:',(340,340))
        self.global_correlation = wx.SpinCtrl(panel,-1,'',(400,337),(100,-1),min=0,max=100,initial=70)
        
        self.bidistribution_path = None
        self.bidistribution_data = None
        
        #self.btn_bidistribution = wx.Button(panel,-1,'Bidistribution file',(340,380),(140,20))
        #self.Bind(wx.EVT_BUTTON,self.onbidisfile,id=self.btn_bidistribution.GetId())
        #"""
        if len(self.check_what_data_goes())!=0:
            wx.StaticText(panel,-1,'Bidistribution object; secondary; primary; bins',(340,360))
            self.bidis_object = wx.ComboBox(panel,-1,self.check_what_data_goes()[0],(335,380),(70,-1),choices = self.check_what_data_goes(),style=wx.CB_READONLY)
            self.bidis_variable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names()[0],(410,380),(70,-1),choices = frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.bidis_variable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names()[0],(485,380),(70,-1),choices = frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.bidistribution_classes = wx.SpinCtrl(panel,-1,'',(560,380),(60,-1),min=2,max=1000,initial=40)
            self.bidis_variable1.Disable()
            self.bidis_variable2.Disable()
            self.bidistribution_classes.Disable()
            self.Bind(wx.EVT_COMBOBOX,self.onbidis,id=self.bidis_object.GetId())
        #"""
        
        wx.StaticBox(panel,-1,'Search Ellipsoid',(320,410),(300,150))
        wh = 310
        lh = 410
        wx.StaticText(panel,-1,'Orientation:',(wh+30,lh+50))
        wx.StaticText(panel,-1,'Range:',(wh+30,lh+90))
        wx.StaticText(panel,-1,'Azimuth',(wh+100-5,lh+30))
        wx.StaticText(panel,-1,'Dip',(wh+180-5,lh+30))
        wx.StaticText(panel,-1,'Rake',(wh+250-5,lh+30))
        wx.StaticText(panel,-1,'Main',(wh+100-5,lh+70))
        wx.StaticText(panel,-1,'minor1',(wh+180-5,lh+70))
        wx.StaticText(panel,-1,'minor2',(wh+250-5,lh+70))
        self.se_ang1=wx.SpinCtrl(panel,-1,'',(wh+100-5,lh+47),(70,-1),min=-90,max=90,initial=0)
        self.se_ang2=wx.SpinCtrl(panel,-1,'',(wh+175-5,lh+47),(70,-1),min=-90,max=90,initial=0)
        self.se_ang3=wx.SpinCtrl(panel,-1,'',(wh+250-5,lh+47),(60,-1),min=-90,max=90,initial=0)
        self.se_ran1=wx.SpinCtrl(panel,-1,'',(wh+100-5,lh+87),(70,-1),min=0,max=180000000,initial=100)
        self.se_ran2=wx.SpinCtrl(panel,-1,'',(wh+175-5,lh+87),(70,-1),min=0,max=180000000,initial=100)
        self.se_ran3=wx.SpinCtrl(panel,-1,'',(wh+250-5,lh+87),(60,-1),min=0,max=180000000,initial=100)
        
        wh=340
        lh=560
        wx.StaticText(panel,-1,
                      '                 Number          Size                   First coord.',
                      (340,lh+10)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(340,lh+30)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(340,lh+55)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(340,lh+80)).SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(wh+50,lh+27),(60,-1),min=1,max=100000000,initial=1)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(wh+50,lh+52),(60,-1),min=1,max=100000000,initial=1)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(wh+50,lh+77),(60,-1),min=1,max=100000000,initial=1)
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(wh+120, lh+27),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(wh+120, lh+52),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(wh+120, lh+77),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(wh+200, lh+27),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(wh+200, lh+52),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(wh+200, lh+77),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        if len(self.check_what_goes())!=0:
            self.blocks_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[0])
            self.blocks_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[1])
            self.blocks_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[2])
            
            self.size_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[0])
            self.size_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[1])
            self.size_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[2])
            
            self.first_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[0])
            self.first_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[1])
            self.first_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[2])
        
        self.btn_run = wx.Button(panel,-1,'Run SGS',(370,670),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onrun,id=self.btn_run.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(490,670),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.btn_cancel.GetId())
        
    def write_hard(self,temp_path):
        fid = open(temp_path+os.sep+'temp_data.prn','w')
        fid.write('hard_data\n4\nx\ny\nz\nvariable\n')
        for i in xrange(frame.object_manager.object_list[self.pieces[0]].x.shape[0]):
            fid.write('%.3f     %.3f     %.3f     %.3f\n'%(frame.object_manager.object_list[self.pieces[0]].x[i],
                                                           frame.object_manager.object_list[self.pieces[0]].y[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].z[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data[i]))
        fid.close()
        
    def write_soft(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_soft.prn','w')
        fid.write('temp_soft\n1\ntsoft\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_soft_corr(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_corr.prn','w')
        fid.write('temp_soft\n1\ntcorr\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_trans_corr(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_corr.prn','w')
        fid.write('temp_soft\n1\ntcorr\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    value = (frame.object_manager.object_list[obj].variable[vrble].data[x,y,z]-frame.object_manager.object_list[obj].variable[vrble].basic_statistics[3])/(frame.object_manager.object_list[obj].variable[vrble].basic_statistics[4]-frame.object_manager.object_list[obj].variable[vrble].basic_statistics[3])
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_bidis(self,temp_path):
        np.savetxt(temp_path+os.sep+'temp_bidis.prn',self.bidistribution_data,fmt='%.3f')
        
    def onrun(self,event):
        if self.output_dir != None:
            if self.kriging_type.GetValue()=='Joint pobability distributions' and self.bidistribution_path==None:
                wx.MessageBox("Trying to run Joint Probability Distributions but theres no bidistribution file.","Warning")
            else:
                dpath= win32api.GetLongPathName(win32api.GetTempPath())
                #shutil.copyfile(self.wavelet_path,dpath+os.sep+'temp_wavelet.prn')
                if self.kriging_type.GetValue() not in ['Simple','Ordinary']:
                    self.write_soft(dpath,self.object.GetValue(),self.variable.GetValue())
                    if self.kriging_type.GetValue() in ['Local Collocated CoKriging','Local joint pobability distributions']:
                        if frame.object_manager.object_list[self.cobject.GetValue()].variable[self.cvariable.GetValue()].basic_statistics[3]<0 or frame.object_manager.object_list[self.cobject.GetValue()].variable[self.cvariable.GetValue()].basic_statistics[4] > 1:              
                            wx.MessageBox("Local correlation object will be transformed since it has values out of the range 0:1.","Warning")                            
                            self.write_trans_corr(dpath,self.cobject.GetValue(),self.cvariable.GetValue())
                        else:
                            self.write_soft_corr(dpath,self.cobject.GetValue(),self.cvariable.GetValue())
                self.write_hard(dpath)
                fid=open('PAR\\example_ssgauss.par','U')
                total=fid.readlines()
                fid.close()
                total[14] = 'DATAFILE  = '+dpath+os.sep+'temp_data.prn'+'  # Hard Data file'+os.linesep
                total[21] = 'MINVAL    = '+repr(self.minimum.GetValue())+'   # Minimun threshold value'+os.linesep
                total[22] = 'MAXVAL    = '+repr(self.maximum.GetValue())+'   # Maximum threshold value'+os.linesep
                total[25] = 'ZMIN    = '+repr(self.minimum.GetValue())+'  # Minimum allowable data value'+os.linesep
                total[26] = 'ZMAX    = '+repr(self.maximum.GetValue())+'  # Maximum allowable data value'+os.linesep
                total[28] = 'LTPAR   = '+repr(self.minimum.GetValue())+'   # Parameter for the ltail=2'+os.linesep
                total[30] = 'UTPAR   = '+repr(self.maximum.GetValue())+'    # Parameter for the utail=2 '+os.linesep
                total[35] = 'OUTFILE   = '+self.output_dir+os.sep+'outfile.out'+'   # Filename of the resultant simulations'+os.linesep                
                total[36] = 'NSIMS     = '+str(self.simulations.GetValue())+'                 # Number of Simulations to generate '+os.linesep
                
                total[45] = 'NX        ='+str(self.blocks_in_x.GetValue())+os.linesep
                total[46] = 'NY        ='+str(self.blocks_in_y.GetValue())+os.linesep
                total[47] = 'NZ        ='+str(self.blocks_in_z.GetValue())+os.linesep
                total[49] = 'ORIGX     ='+str(self.first_in_x.GetValue())+os.linesep
                total[50] = 'ORIGY     ='+str(self.first_in_y.GetValue())+os.linesep
                total[51] = 'ORIGZ     ='+str(self.first_in_z.GetValue())+os.linesep
                total[53] = 'SIZEX     ='+str(self.size_in_x.GetValue())+os.linesep
                total[54] = 'SIZEY     ='+str(self.size_in_y.GetValue())+os.linesep
                total[55] = 'SIZEZ     ='+str(self.size_in_z.GetValue())+os.linesep
                
                total[60] = 'NULLVAL   = '+str(self.null.GetValue())+'           # Definition of the null value '+os.linesep
                total[61] = 'SEED      ='+str(self.seed.GetValue())+'            # Seed for the pseudorandom number generator - if you want repeatable simulations '+os.linesep
                
                total[74] = 'RADIUS1 ='+str(self.se_ran1.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[75] = 'RADIUS2 ='+str(self.se_ran2.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[76] = 'RADIUS3 ='+str(self.se_ran3.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[77] = 'SANG1   ='+str(self.se_ang1.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep
                total[78] = 'SANG2   ='+str(self.se_ang2.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep
                total[79] = 'SANG3   ='+str(self.se_ang3.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep

                # ['Simple','Ordinary','Simple with locally varying mean','External Drift',
                #'Gloabl Collocated CoKriging','Local Collocated CoKriging',
                #'Joint pobability distributions','Local joint pobability distributions']
                if self.kriging_type.GetValue() in ['Simple with locally varying mean','External Drift','Gloabl Collocated CoKriging','Local Collocated CoKriging','Joint pobability distributions','Local joint pobability distributions']:
                    if self.kriging_type.GetValue()=='Simple': ktype=0
                    elif self.kriging_type.GetValue()=='Ordinary': ktype=1 
                    elif self.kriging_type.GetValue()=='Simple with locally varying mean': ktype=2 
                    elif self.kriging_type.GetValue()=='External Drift': ktype=3 
                    elif self.kriging_type.GetValue()=='Global Collocated CoKriging': ktype=4 
                    elif self.kriging_type.GetValue()=='Local Collocated CoKriging': ktype=5
                    elif self.kriging_type.GetValue()=='Joint pobability distributions': ktype=4 
                    elif self.kriging_type.GetValue()=='Local joint pobability distributions': ktype=5
                    
                    total[84] = 'KTYPE     ='+str(ktype)+'               # Kriging type ;0=simple,1=ordinary,2=simple with locally varying mean, '+os.linesep
                    total[86] = 'COLOCORR ='+str(self.global_correlation.GetValue()/100)+'                # Global CC to ktype=4'+os.linesep
                                      
                    total[87] = 'SOFTFILE  ='+dpath+os.sep+'temp_soft.prn'+'   # Filename of the soft data'+os.linesep
                    if self.kriging_type.GetValue() in ['Local Collocated CoKriging','Local joint pobability distributions']:
                        total[90] = 'CCFILE    ='+dpath+os.sep+'temp_corr.prn'+'      # Filename of correlation file for local correlations (ktype=5)'+os.linesep
                    
                    if self.kriging_type.GetValue() in ['Joint pobability distributions','Local joint pobability distributions']:
                        total[110] = 'USEBIHIST =1 #Use Bihist? 1-yes 0-no'+os.linesep
                        self.write_bidis(dpath)
                        total[111] = 'BIHISTFILE ='+dpath+os.sep+'temp_bidis.prn'+'   # bihistogram file'+os.linesep
                        total[112] = 'NCLASSES = '+str(self.bidistribution_classes.GetValue())+'                           # number of classes to use '+os.linesep
                        total[113] = 'AUXILIARYFILE = '+dpath+os.sep+'temp_soft.prn'+'       # auxiliary image '+os.linesep
                    
                total[95] = 'NSTRUCT = '+repr(int(self.check1.GetValue())+int(self.check2.GetValue())+int(self.check3.GetValue()))+'                   # Number of semivariograms structures (NST(1)) '+os.linesep
                total[96] = 'NUGGET = '+str(self.nugget.GetValue()/100)+'                    # Nugget constant (C0(1))'+os.linesep           
                
                dic = {}
                dic['Spherical'] = 1
                dic['Exponential'] = 2
                dic['Gaussian'] = 3        
                total[98]='TYPE = '+repr(dic[self.model1.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep
                if self.check1.GetValue():
                    total[99]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                else:
                    total[99]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                total[100]='ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                total[101]='ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep
                total[102]='ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep
                total[103]='AA   = '+repr(self.range1.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                total[104]='AA1  = '+repr(self.range1_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep
                total[105]='AA2  = '+repr(self.range1_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep
                if self.check2.GetValue():
                    total.append(os.linesep)
                    total.append('[VARIOGRAM2]'+os.linesep)
                    total.append('TYPE = '+repr(dic[self.model2.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep)
                    total.append('COV  = '+'%.3f'%(self.sill2.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep)
                    total.append('ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep)
                    total.append('ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep)
                    total.append('ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep)
                    total.append('AA   = '+repr(self.range2.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep)
                    total.append('AA1  = '+repr(self.range2_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep)
                    total.append('AA2  = '+repr(self.range2_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep)
                if self.check3.GetValue():
                    total.append(os.linesep)
                    total.append('[VARIOGRAM3]'+os.linesep)
                    total.append('TYPE = '+repr(dic[self.model3.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep)
                    total.append('COV  = '+'%.3f'%(self.sill3.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep)
                    total.append('ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep)
                    total.append('ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep)
                    total.append('ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep)
                    total.append('AA   = '+repr(self.range3.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep)
                    total.append('AA1  = '+repr(self.range3_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep)
                    total.append('AA2  = '+repr(self.range3_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep)     
                
                fid=open(dpath+'\\sgsdir.par','w')
                fid.writelines(total)
                fid.close()
                path1=os.getcwd()
                path2=path1+'\\EXE'
                os.chdir(path2)
                process=subprocess.Popen(r'SGS.exe "'+dpath+'\\sgsdir.par"').wait()
                os.chdir(path1)
                self.do_image_statistics()
                blocks = (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
                size   = (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
                first  = (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
                path = self.output_dir+os.sep+'mean.PRN'
                frame.object_manager.add_mesh_object_from_file(path,blocks,size,first,null=self.null.GetValue(),
                                                              filetype='ASCII'
                                                              ,dtype='float32'
                                                              ,at_least=3)
                                                              
                frame.update_last_object_list()
                
                path = self.output_dir+os.sep+'variance.PRN'
                frame.object_manager.add_mesh_object_from_file(path,blocks,size,first,null=self.null.GetValue(),
                                                              filetype='ASCII'
                                                              ,dtype='float32'
                                                              ,at_least=3)
                                                              
                frame.update_last_object_list()
                
                wx.MessageBox("Process is finished. Check output directory for confirmation.","Information")
                self.Destroy()
        else:
            wx.MessageBox("You must have an output path.","Warning")
            
    def do_image_statistics(self):
        gpaths=[self.output_dir+os.sep+'outfile.out']
        for i in xrange(2,self.simulations.GetValue()+1):
            gpaths.append(self.output_dir+os.sep+'outfile'+str(i)+'.out')
        sims=self.simulations.GetValue()
        fid = open(gpaths[0])
        for h in xrange(3): fid.readline()
        blocks=np.loadtxt(fid).shape[0]
        fid.close()
        d={}
    
        fmean=open(self.output_dir+os.sep+'mean.PRN','w')
        fvar=open(self.output_dir+os.sep+'variance.PRN','w')
        fmean.write('MEAN\n1\nmean\n')
        fvar.write('VARIANCE\n1\nvariance\n')     
        
        for k in xrange(sims):
            d[k]=open(gpaths[k],'r')
            for h in xrange(3): d[k].readline()
        t=blocks
        tc=t
        c=0
        l=0
        dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
        for i in xrange(t):
            if c>tc:
                tc=tc+t
                l=l+1
            c=c+1
            line=np.zeros(sims)
            for j in xrange(sims):
                line[j]=np.float(d[j].readline())
            fmean.write('%15.6f\n'%line.mean())
            fvar.write('%15.6f\n'%line.var())
            dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
        fmean.close()
        fvar.close()
        for k in xrange(sims):
            d[k].close()
        dialog.Destroy()
    
    def onbidisfile(self,event):
        dlg=wx.FileDialog(self,"Choose input bidistribution file.",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            self.bidistribution_path = open(dlg.GetPath())
            try:
                data = np.loadtxt(self.bidistribution_path)
                flag=True
            except ValueError:
                self.bidistribution_path = None
                flag = False
                wx.MessageBox('Unable to open bidistribution file. Make certain the file has no header.', 'Error', wx.OK | wx.ICON_INFORMATION)
            if flag:
                if data.shape[1]!=2:
                    self.bidistribution_path = None
                    wx.MessageBox('The file should only have 2 columns.', 'Error', wx.OK | wx.ICON_INFORMATION)
                else:
                    self.bidistribution_data = data[np.argsort(data,axis=0)[:,0],:]
                    
    def onbidis(self,event):
        #self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        #self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.bidis_variable1.Clear()
        self.bidis_variable1.AppendItems(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names())
        self.bidis_variable1.SetValue(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0])
        self.bidis_variable2.Clear()
        self.bidis_variable2.AppendItems(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names())
        self.bidis_variable2.SetValue(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        self.blocks_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[0])
        self.blocks_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[1])
        self.blocks_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[2])
        
        self.size_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[0])
        self.size_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[1])
        self.size_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[2])
        
        self.first_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[0])
        self.first_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[1])
        self.first_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[2])
        
    def oncobjectcombo(self,event):
        self.cvariable.Clear()
        self.cvariable.AppendItems(frame.object_manager.object_list[self.cobject.GetValue()].get_variable_names())
        self.cvariable.SetValue(frame.object_manager.object_list[self.cobject.GetValue()].get_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def check_what_data_goes(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if len(frame.object_manager.object_list[i].get_numeric_variable_names())!=0:
                    what_gives.append(i)
        return what_gives
    
    def ondiroutput(self,event):
        dlg=wx.DirDialog(self,"Choose output directory.",style=wx.SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            self.output_dir=dlg.GetPath()        
            
    def oncheck1(self,event):
        if self.check1.GetValue():
            self.sill1.Enable()
            self.model1.Enable()
            self.range1.Enable()
            self.range1_m1.Enable()
            self.range1_m2.Enable()
            self.check2.Enable()
        else:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check2.SetValue(False)
            self.check2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck2(self,event):
        if self.check2.GetValue():
            self.sill2.Enable()
            self.model2.Enable()
            self.range2.Enable()
            self.range2_m1.Enable()
            self.range2_m2.Enable()
            self.check3.Enable()
        else:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck3(self,event):
        if self.check3.GetValue():
            self.sill3.Enable()
            self.model3.Enable()
            self.range3_m1.Enable()
            self.range3_m2.Enable()
            self.range3.Enable()
        else:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXSISFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Sequential Indicator Simulation",size=(660,770),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.RESIZE_BORDER)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        #panel=self.panel=wx.Panel(self)
        
        panel=self.panel=wx.ScrolledWindow(self,wx.ID_ANY)
        #panel.SetBackgroundColour('white')
        panel.SetScrollbars(1,1,640,750)
        
        self.pieces = pieces
        
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag:
            ini1 = frame.object_manager.call(pieces).imodel_angles[0]
            ini2 = frame.object_manager.call(pieces).imodel_angles[1]
            ini3 = frame.object_manager.call(pieces).imodel_angles[2]
        else:
            ini1 = 0
            ini2 = 0
            ini3 = 0
        
        escl = []
        self.vtype = wx.ComboBox(panel,-1,'Single',(10,717),(70,-1),choices = ['Single','All'],style=wx.CB_READONLY)
        for i in xrange(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata.shape[1]-1): escl.append(str(i))
        escl.append('multiphase')
        self.phase = wx.ComboBox(panel,-1,'multiphase',(100,717),(100,-1),choices = escl,style=wx.CB_READONLY)
        self.escl = escl        
        #self.check_list = np.zeros(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata.shape[1])
        #self.check_i = wx.CheckBox(panel,-1,'  use this',(230,720))
        #if frame.object_manager.call(self.pieces).imodel_checks[0]==True: self.check_i.SetValue(True)
        #self.Bind(wx.EVT_CHECKBOX,self.oncheck_i,id=self.check_i.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onphase,id=self.phase.GetId())
        
        wx.StaticBox(panel,-1,'Variogram parameters',(10,10),(300,250))
        #self.refresh = wx.Button(panel,-1,'Refresh',(220,7),(50,-1))
        #self.Bind(wx.EVT_BUTTON,self.update_directional_variograms,id=self.refresh.GetId())
        wx.StaticText(panel,-1,'Azimuth (1):',(30,45))
        self.angle1 = wx.Slider(panel, -1, ini1, -89, 90, (90,27), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.Bind(wx.EVT_SLIDER,self.update_nunesplot,id=self.angle1.GetId())
        wx.StaticText(panel,-1,'Dip (2):',(30,95))
        self.angle2 = wx.Slider(panel, -1, ini2, -89, 90, (90,77), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle2.Disable()
        wx.StaticText(panel,-1,'Rake (3):',(30,145))
        self.angle3 = wx.Slider(panel, -1, ini3, -89, 90, (90,137), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle3.Disable()
        
        wx.StaticText(panel,-1,'Tol.:',(30,195))
        self.tolerance = wx.SpinCtrl(panel,-1,'',(60,192),(50,-1),min=1,max=90,initial=15)
        wx.StaticText(panel,-1,'Bins:',(120,195))
        self.bins = wx.SpinCtrl(panel,-1,'',(150,192),(50,-1),min=2,max=500,initial=10)
        wx.StaticText(panel,-1,'Max:',(210,195))
        self.maximum = FS.FloatSpin(panel, -1,(240, 192),(60,-1),min_val=0,max_val=100000000,value = 0,digits=3)
        self.tolerance.Disable()
        self.bins.Disable()
        self.maximum.Disable()
        
        wx.StaticText(panel,-1,'Sill:',(30,225))
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag: sill = frame.object_manager.call(pieces).imodel_full_sills[-1]
        else: sill = frame.object_manager.call(pieces).basic_statistics[1]
        self.sill = FS.FloatSpin(panel, -1,(50, 222),(60,-1),min_val=0,max_val=1000000000,value = sill,digits=3)
        wx.StaticText(panel,-1,'Nug.:',(120,225))
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag: nug = frame.object_manager.call(pieces).imodel_nugget
        else: nug = 0
        self.nugget = wx.SpinCtrl(panel,-1,'',(150,222),(50,-1),min=0,max=100,initial=nug)
        wx.StaticText(panel,-1,'dZ:',(210,225))
        self.dz = FS.FloatSpin(panel, -1,(240, 222),(60,-1),min_val=0,max_val=1000000000,value = 0,digits=3)
        self.dz.Disable()
        
        wx.StaticBox(panel,-1,'Model 1 parameters',(10,260),(300,150))
        self.check1 = wx.CheckBox(panel,-1,' Plot model 1',(30,290))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck1,id=self.check1.GetId())
        wx.StaticText(panel,-1,'Model 1 sill:',(30,320))
        #print 'VARIOGRAM ADJUSTED FLAG: ',frame.object_manager.call(pieces).ivariogram_adjusted_flag
        #print frame.object_manager.call(pieces).number_of_imodels
        #print frame.object_manager.call(pieces).imodel_sills[-1][0]
        #print frame.object_manager.call(pieces).imodel_types[-1][0]
        #print frame.object_manager.call(pieces).imodel1_ranges[-1][0]
        #print frame.object_manager.call(pieces).imodel1_ranges[-1][1]
        #print frame.object_manager.call(pieces).imodel1_ranges[-1][2]
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_imodels >= 1:
                self.check1.SetValue(True)
                ini1 = frame.object_manager.call(pieces).imodel_sills[-1][0]
                ini2 = frame.object_manager.call(pieces).imodel_types[-1][0]
                ini3 = frame.object_manager.call(pieces).imodel1_ranges[-1][0]
                ini4 = frame.object_manager.call(pieces).imodel1_ranges[-1][1]
                ini5 = frame.object_manager.call(pieces).imodel1_ranges[-1][2]
            else:
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill1 = wx.SpinCtrl(panel,-1,'',(90,317),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,350))
        self.model1 = wx.ComboBox(panel,-1,ini2,(90,347),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,380))
        self.range1 = FS.FloatSpin(panel, -1,(70, 377),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range1_m1 = FS.FloatSpin(panel, -1,(155, 377),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range1_m2 = FS.FloatSpin(panel, -1,(235, 377),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check1.GetValue()==False:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            
        wx.StaticBox(panel,-1,'Model 2 parameters',(10,410),(300,150))
        self.check2 = wx.CheckBox(panel,-1,' Plot model 2',(30,440))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.check2.GetId())
        wx.StaticText(panel,-1,'Model 2 sill:',(30,470))
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_imodels >= 2:
                self.check2.SetValue(True)
                ini1 = frame.object_manager.call(pieces).imodel_sills[-1][1]
                ini2 = frame.object_manager.call(pieces).imodel_types[-1][1]
                ini3 = frame.object_manager.call(pieces).imodel2_ranges[-1][0]
                ini4 = frame.object_manager.call(pieces).imodel2_ranges[-1][1]
                ini5 = frame.object_manager.call(pieces).imodel2_ranges[-1][2]
            else:
                self.check2.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check2.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill2 = wx.SpinCtrl(panel,-1,'',(90,467),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,500))
        self.model2 = wx.ComboBox(panel,-1,ini2,(90,497),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,530))
        self.range2 = FS.FloatSpin(panel, -1,(70, 527),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range2_m1 = FS.FloatSpin(panel, -1,(155, 527),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range2_m2 = FS.FloatSpin(panel, -1,(235, 527),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check2.GetValue()==False:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            
        wx.StaticBox(panel,-1,'Model 3 parameters',(10,560),(300,150))
        self.check3 = wx.CheckBox(panel,-1,' Plot model 3',(30,590))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck3,id=self.check3.GetId())
        wx.StaticText(panel,-1,'Model 3 sill:',(30,620))
        if frame.object_manager.call(pieces).ivariogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_imodels >= 3:
                self.check3.SetValue(True)
                ini1 = frame.object_manager.call(pieces).imodel_sills[-1][2]
                ini2 = frame.object_manager.call(pieces).imodel_types[-1][2]
                ini3 = frame.object_manager.call(pieces).imodel3_ranges[-1][0]
                ini4 = frame.object_manager.call(pieces).imodel3_ranges[-1][1]
                ini5 = frame.object_manager.call(pieces).imodel3_ranges[-1][2]
            else:
                self.check3.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check3.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill3 = wx.SpinCtrl(panel,-1,'',(90,617),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,650))
        self.model3 = wx.ComboBox(panel,-1,ini2,(90,647),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,680))
        self.range3 = FS.FloatSpin(panel, -1,(70, 677),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range3_m1 = FS.FloatSpin(panel, -1,(155, 677),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range3_m2 = FS.FloatSpin(panel, -1,(235, 677),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check3.GetValue()==False:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
        
        if self.check1.GetValue()==False:
            self.check2.Disable()
            self.check3.Disable()
        elif self.check1.GetValue()==True and self.check2.GetValue()==False:
            self.check3.Disable()
            
        wx.StaticBox(panel,-1,'General parameters',(320,10),(300,400))
        wx.StaticText(panel,-1,'Number of simulations:',(340,40))
        wx.StaticText(panel,-1,'Minimum:',(340,80))
        wx.StaticText(panel,-1,'Maximum:',(470,80))
        wx.StaticText(panel,-1,'Kriging type:',(340,120))
        self.simulations = wx.SpinCtrl(panel,-1,'',(460,37),(100,-1),min=2,max=300,initial=16)
        self.minimum = FS.FloatSpin(panel, -1,(390,77),(70,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call(pieces).basic_statistics[3],digits=3)
        self.maximum = FS.FloatSpin(panel, -1,(520,77),(70,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call(pieces).basic_statistics[4],digits=3)        
        if len(self.check_what_goes())==0:
            choices = ['Categorical']
        else:
            if len(self.check_what_data_goes()):
                choices = ['Categorical'] #,'Joint pobability distributions','Local joint pobability distributions']
            else:
                choices = ['Categorical']
        self.kriging_type = wx.ComboBox(panel,-1,'Categorical',(420,117),(150,-1),choices=choices,style=wx.CB_READONLY)            
        wx.StaticText(panel,-1,'Nulldata:',(340,160))
        wx.StaticText(panel,-1,'Seed:',(470,160))
        self.null = FS.FloatSpin(panel, -1,(390,157),(70,-1),min_val=-100000000,max_val=100000000,value = -999,digits=3)
        self.seed = wx.SpinCtrl(panel,-1,'',(520,157),(70,-1),min=1000000,max=9999999,initial=1234567)
        
        self.output_dir = None
        
        self.btn_output = wx.Button(panel,-1,'Output directory',(340,200),(260,40))
        self.Bind(wx.EVT_BUTTON,self.ondiroutput,id=self.btn_output.GetId())
        #"""
        wx.StaticText(panel,-1,'Soft data:',(340,260))
        if len(self.check_what_goes())!=0:
            self.object = wx.ComboBox(panel,-1,self.check_what_goes()[0],(400,257),(100,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0],(510,257),(90,-1),choices = frame.object_manager.object_list[self.object.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        else:
            self.object = wx.ComboBox(panel,-1,'None',(400,257),(100,-1),choices = ['None'],style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.variable = wx.ComboBox(panel,-1,'None',(510,257),(90,-1),choices = ['None'],style=wx.CB_READONLY)
            self.object.Disable()
            self.variable.Disable()
        """    
        wx.StaticText(panel,-1,'Cor. data:',(340,300))
        if len(self.check_what_goes())!=0:
            self.cobject = wx.ComboBox(panel,-1,self.check_what_goes()[0],(400,297),(100,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.cvariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0],(510,297),(90,-1),choices = frame.object_manager.object_list[self.object.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        else:
            self.cobject = wx.ComboBox(panel,-1,'None',(400,297),(100,-1),choices = ['None'],style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.oncobjectcombo,id=self.object.GetId())
            self.cvariable = wx.ComboBox(panel,-1,'None',(510,297),(90,-1),choices = ['None'],style=wx.CB_READONLY)
            self.cobject.Disable()
            self.cvariable.Disable()
            
        wx.StaticText(panel,-1,'Correlation:',(340,340))
        self.global_correlation = wx.SpinCtrl(panel,-1,'',(400,337),(100,-1),min=0,max=100,initial=70)
        
        self.bidistribution_path = None
        self.bidistribution_data = None
        """
        #self.btn_bidistribution = wx.Button(panel,-1,'Bidistribution file',(340,380),(140,20))
        #self.Bind(wx.EVT_BUTTON,self.onbidisfile,id=self.btn_bidistribution.GetId())
        """
        if len(self.check_what_data_goes())!=0:
            wx.StaticText(panel,-1,'Bidistribution object; secondary; primary; bins',(340,360))
            self.bidis_object = wx.ComboBox(panel,-1,self.check_what_data_goes()[0],(335,380),(70,-1),choices = self.check_what_data_goes(),style=wx.CB_READONLY)
            self.bidis_variable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names()[0],(410,380),(70,-1),choices = frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.bidis_variable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names()[0],(485,380),(70,-1),choices = frame.object_manager.object_list[self.bidis_object.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.bidistribution_classes = wx.SpinCtrl(panel,-1,'',(560,380),(60,-1),min=2,max=1000,initial=40)
            self.bidis_variable1.Disable()
            self.bidis_variable2.Disable()
            self.bidistribution_classes.Disable()
            self.Bind(wx.EVT_COMBOBOX,self.onbidis,id=self.bidis_object.GetId())
        """
        
        wx.StaticBox(panel,-1,'Search Ellipsoid',(320,410),(300,150))
        wh = 310
        lh = 410
        wx.StaticText(panel,-1,'Orientation:',(wh+30,lh+50))
        wx.StaticText(panel,-1,'Range:',(wh+30,lh+90))
        wx.StaticText(panel,-1,'Azimuth',(wh+100-5,lh+30))
        wx.StaticText(panel,-1,'Dip',(wh+180-5,lh+30))
        wx.StaticText(panel,-1,'Rake',(wh+250-5,lh+30))
        wx.StaticText(panel,-1,'Main',(wh+100-5,lh+70))
        wx.StaticText(panel,-1,'minor1',(wh+180-5,lh+70))
        wx.StaticText(panel,-1,'minor2',(wh+250-5,lh+70))
        self.se_ang1=wx.SpinCtrl(panel,-1,'',(wh+100-5,lh+47),(70,-1),min=-90,max=90,initial=0)
        self.se_ang2=wx.SpinCtrl(panel,-1,'',(wh+175-5,lh+47),(70,-1),min=-90,max=90,initial=0)
        self.se_ang3=wx.SpinCtrl(panel,-1,'',(wh+250-5,lh+47),(60,-1),min=-90,max=90,initial=0)
        self.se_ran1=wx.SpinCtrl(panel,-1,'',(wh+100-5,lh+87),(70,-1),min=0,max=180000000,initial=100)
        self.se_ran2=wx.SpinCtrl(panel,-1,'',(wh+175-5,lh+87),(70,-1),min=0,max=180000000,initial=100)
        self.se_ran3=wx.SpinCtrl(panel,-1,'',(wh+250-5,lh+87),(60,-1),min=0,max=180000000,initial=100)
        
        wh=340
        lh=560
        wx.StaticText(panel,-1,
                      '                 Number          Size                   First coord.',
                      (340,lh+10)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(340,lh+30)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(340,lh+55)).SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(340,lh+80)).SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(wh+50,lh+27),(60,-1),min=1,max=100000000,initial=1)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(wh+50,lh+52),(60,-1),min=1,max=100000000,initial=1)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(wh+50,lh+77),(60,-1),min=1,max=100000000,initial=1)
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(wh+120, lh+27),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(wh+120, lh+52),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(wh+120, lh+77),(70,-1),min_val=1,max_val=100000000,value = 1,digits=3)
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(wh+200, lh+27),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(wh+200, lh+52),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(wh+200, lh+77),(70,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        if len(self.check_what_goes())!=0:
            self.blocks_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[0])
            self.blocks_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[1])
            self.blocks_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[2])
            
            self.size_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[0])
            self.size_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[1])
            self.size_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[2])
            
            self.first_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[0])
            self.first_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[1])
            self.first_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[2])
        
        self.btn_run = wx.Button(panel,-1,'Run SIS',(370,670),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onrun,id=self.btn_run.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(490,670),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.btn_cancel.GetId())
        
    def onphase(self,event):
        if self.phase.GetValue() == 'multiphase': index = -1
        else: index = int(self.phase.GetValue())
        self.sill.SetValue(frame.object_manager.call(self.pieces).imodel_full_sills[index])
        #self.check_i.SetValue(frame.object_manager.call(self.pieces).imodel_checks[index])
        if self.check1.GetValue():
            self.sill1.SetValue(frame.object_manager.call(self.pieces).imodel_sills[index][0])
            self.model1.SetValue(frame.object_manager.call(self.pieces).imodel_types[index][0])
            self.range1.SetValue(frame.object_manager.call(self.pieces).imodel1_ranges[index][0])
            self.range1_m1.SetValue(frame.object_manager.call(self.pieces).imodel1_ranges[index][1])
            self.range1_m2.SetValue(frame.object_manager.call(self.pieces).imodel1_ranges[index][2])
        if self.check2.GetValue():
            self.sill2.SetValue(frame.object_manager.call(self.pieces).imodel_sills[index][1])
            self.model2.SetValue(frame.object_manager.call(self.pieces).imodel_types[index][1])
            self.range2.SetValue(frame.object_manager.call(self.pieces).imodel2_ranges[index][0])
            self.range2_m1.SetValue(frame.object_manager.call(self.pieces).imodel2_ranges[index][1])
            self.range2_m2.SetValue(frame.object_manager.call(self.pieces).imodel2_ranges[index][2])
        if self.check3.GetValue():
            self.sill3.SetValue(frame.object_manager.call(self.pieces).imodel_sills[index][2])
            self.model3.SetValue(frame.object_manager.call(self.pieces).imodel_types[index][2])
            self.range3.SetValue(frame.object_manager.call(self.pieces).imodel3_ranges[index][0])
            self.range3_m1.SetValue(frame.object_manager.call(self.pieces).imodel3_ranges[index][1])
            self.range3_m2.SetValue(frame.object_manager.call(self.pieces).imodel3_ranges[index][2])
        #self.update_variogram_plots()
        
    def write_hard(self,temp_path):
        fid = open(temp_path+os.sep+'temp_data.prn','w')
        fid.write('hard_data\n4\nx\ny\nz\nvariable\n')
        for i in xrange(frame.object_manager.object_list[self.pieces[0]].x.shape[0]):
            fid.write('%.3f     %.3f     %.3f     %.3f\n'%(frame.object_manager.object_list[self.pieces[0]].x[i],
                                                           frame.object_manager.object_list[self.pieces[0]].y[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].z[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data[i]))
        fid.close()
        
    def write_hard_correct(self,temp_path):
        number_of_classes = frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata.shape[1]-1
        fid = open(temp_path+os.sep+'temp_data.prn','w')
        fid.write('hard_data\n'+str(3+number_of_classes)+'\nx\ny\nz\n')
        for j in xrange(number_of_classes):
            fid.write('variable'+str(j)+'\n')
        #np.savetxt(f,)
        #"""
        #number_of_classes = frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata.shape[1]-1
        for i in xrange(frame.object_manager.object_list[self.pieces[0]].x.shape[0]):
            fid.write('%.3f     %.3f     %.3f     '%(frame.object_manager.object_list[self.pieces[0]].x[i],frame.object_manager.object_list[self.pieces[0]].y[i],frame.object_manager.object_list[self.pieces[0]].z[i]))
            for j in xrange(number_of_classes):
                fid.write('%5i     '%frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata[i,j])
            fid.write('\n')
            """
            fid.write('%.3f     %.3f     %.3f     %.3f\n'%(frame.object_manager.object_list[self.pieces[0]].x[i],
                                                           frame.object_manager.object_list[self.pieces[0]].y[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].z[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data[i]))#"""
        fid.close()
        
    def write_hard_prob(self,temp_path):
        fid = open(temp_path+os.sep+'temp_data.prn','w')
        fid.write('hard_data\n'+str(5+frame.object_manager.call(self.pieces).idata.shape[1]-1)+'\nx\ny\nz\n')
        fid.write('variable\n')
        fid.write('variable\n')
        for i in xrange(frame.object_manager.call(self.pieces).idata.shape[1]-1):
            fid.write('variable\n')
        for i in xrange(frame.object_manager.object_list[self.pieces[0]].x.shape[0]):
            fid.write('%.3f     %.3f     %.3f     %.3f     %.3f     '%(frame.object_manager.object_list[self.pieces[0]].x[i],
                                                               frame.object_manager.object_list[self.pieces[0]].y[i]
                                                               ,frame.object_manager.object_list[self.pieces[0]].z[i]
                                                               ,frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data[i]+1,frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data[i]+1))
            for j in xrange(frame.object_manager.call(self.pieces).idata.shape[1]-1):
                if j+1 == frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data[i]: fid.write('1     ')
                else: fid.write('0     ')
            fid.write('\n')
        fid.close()
        
    def write_soft(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_soft.prn','w')
        fid.write('temp_soft\n1\ntsoft\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_soft_corr(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_corr.prn','w')
        fid.write('temp_soft\n1\ntcorr\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_trans_corr(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_corr.prn','w')
        fid.write('temp_soft\n1\ntcorr\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    value = (frame.object_manager.object_list[obj].variable[vrble].data[x,y,z]-frame.object_manager.object_list[obj].variable[vrble].basic_statistics[3])/(frame.object_manager.object_list[obj].variable[vrble].basic_statistics[4]-frame.object_manager.object_list[obj].variable[vrble].basic_statistics[3])
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_bidis(self,temp_path):
        np.savetxt(temp_path+os.sep+'temp_bidis.prn',self.bidistribution_data,fmt='%.3f')
        
    def onrun(self,event):
        if self.output_dir != None:
            if self.kriging_type.GetValue()=='Joint pobability distributions' and self.bidistribution_path==None:
                wx.MessageBox("Trying to run Joint Probability Distributions but theres no bidistribution file.","Warning")
            else:
                dpath= win32api.GetLongPathName(win32api.GetTempPath())
                #shutil.copyfile(self.wavelet_path,dpath+os.sep+'temp_wavelet.prn')
                if self.kriging_type.GetValue() not in ['Categorical']:
                    self.write_soft(dpath,self.object.GetValue(),self.variable.GetValue())
                    if self.kriging_type.GetValue() in ['Local Collocated CoKriging','Local joint pobability distributions']:
                        if frame.object_manager.object_list[self.cobject.GetValue()].variable[self.cvariable.GetValue()].basic_statistics[3]<0 or frame.object_manager.object_list[self.cobject.GetValue()].variable[self.cvariable.GetValue()].basic_statistics[4] > 1:              
                            wx.MessageBox("Local correlation object will be transformed since it has values out of the range 0:1.","Warning")                            
                            self.write_trans_corr(dpath,self.cobject.GetValue(),self.cvariable.GetValue())
                        else:
                            self.write_soft_corr(dpath,self.cobject.GetValue(),self.cvariable.GetValue())
                #self.write_hard(dpath)
                self.write_hard(dpath) #self.write_hard_correct(dpath)
                fid=open('PAR\\example_ssind.par','U')
                total=fid.readlines()
                fid.close()
                total[17] = 'DATAFILE  = '+dpath+os.sep+'temp_data.prn'+'  # Hard Data file'+os.linesep
                total[18] = 'COLUMNS   = '+str(4)+'                 # Number of columns in the data file (to eliminate)'+os.linesep # 3+frame.object_manager.call(self.pieces).idata.shape[1]-1
                total[24] = 'MINVAL    = '+repr(self.minimum.GetValue())+'   # Minimun threshold value'+os.linesep
                total[25] = 'MAXVAL    = '+repr(self.maximum.GetValue())+'   # Maximum threshold value'+os.linesep
                total[29] = 'ZMIN    = '+repr(self.minimum.GetValue())+'  # Minimum allowable data value'+os.linesep
                total[30] = 'ZMAX    = '+repr(self.maximum.GetValue())+'  # Maximum allowable data value'+os.linesep
                total[32] = 'LTPAR   = '+repr(self.minimum.GetValue())+'   # Parameter for the ltail=2'+os.linesep
                #total[32] = 'MTPAR   = '+repr(self.minimum.GetValue())+'   # Parameter for the ltail=2'+os.linesep
                total[36] = 'UTPAR   = '+repr(self.maximum.GetValue())+'    # Parameter for the utail=2 '+os.linesep
                total[41] = 'OUTFILE   = '+self.output_dir+os.sep+'outfile.out'+'   # Filename of the resultant simulations'+os.linesep                
                total[42] = 'NSIMS     = '+str(self.simulations.GetValue())+'                 # Number of Simulations to generate '+os.linesep
                
                total[49] = 'NX        ='+str(self.blocks_in_x.GetValue())+os.linesep
                total[50] = 'NY        ='+str(self.blocks_in_y.GetValue())+os.linesep
                total[51] = 'NZ        ='+str(self.blocks_in_z.GetValue())+os.linesep
                total[53] = 'ORIGX     ='+str(self.first_in_x.GetValue())+os.linesep
                total[54] = 'ORIGY     ='+str(self.first_in_y.GetValue())+os.linesep
                total[55] = 'ORIGZ     ='+str(self.first_in_z.GetValue())+os.linesep
                total[57] = 'SIZEX     ='+str(self.size_in_x.GetValue())+os.linesep
                total[58] = 'SIZEY     ='+str(self.size_in_y.GetValue())+os.linesep
                total[59] = 'SIZEZ     ='+str(self.size_in_z.GetValue())+os.linesep
                
                total[64] = 'NULLVAL   = '+str(self.null.GetValue())+'           # Definition of the null value '+os.linesep
                total[65] = 'SEED      ='+str(self.seed.GetValue())+'            # Seed for the pseudorandom number generator - if you want repeatable simulations '+os.linesep
                
                total[78] = 'RADIUS1 ='+str(self.se_ran1.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[79] = 'RADIUS2 ='+str(self.se_ran2.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[80] = 'RADIUS3 ='+str(self.se_ran3.GetValue())+'                # Search radii in the maximum horizontal direction'+os.linesep
                total[81] = 'SANG1   ='+str(self.se_ang1.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep
                total[82] = 'SANG2   ='+str(self.se_ang2.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep
                total[83] = 'SANG3   ='+str(self.se_ang3.GetValue())+'                   # Orientation angle parameter of direction I (degrees) '+os.linesep

                # ['Simple','Ordinary','Simple with locally varying mean','External Drift',
                #'Gloabl Collocated CoKriging','Local Collocated CoKriging',
                #'Joint pobability distributions','Local joint pobability distributions']
                if self.kriging_type.GetValue() in ['Simple with locally varying mean','External Drift','Gloabl Collocated CoKriging','Local Collocated CoKriging','Joint pobability distributions','Local joint pobability distributions']:
                    if self.kriging_type.GetValue()=='Simple': ktype=0
                    elif self.kriging_type.GetValue()=='Ordinary': ktype=1 
                    elif self.kriging_type.GetValue()=='Simple with locally varying mean': ktype=2 
                    elif self.kriging_type.GetValue()=='External Drift': ktype=3 
                    elif self.kriging_type.GetValue()=='Gloabl Collocated CoKriging': ktype=4 
                    elif self.kriging_type.GetValue()=='Local Collocated CoKriging': ktype=5
                    elif self.kriging_type.GetValue()=='Joint pobability distributions': ktype=4 
                    elif self.kriging_type.GetValue()=='Local joint pobability distributions': ktype=5
                    
                    # SUPOSTAMENTE ERA 0
                    total[88] = 'KTYPE     ='+str(0)+'               # Kriging type ;0=simple,1=ordinary,2=simple with locally varying mean, '+os.linesep
                    #total[86] = 'COLOCORR ='+str(self.global_correlation.GetValue()/100)+'                # Global CC to ktype=4'+os.linesep
                                      
                    #total[87] = 'SOFTFILE  ='+dpath+os.sep+'temp_soft.prn'+'   # Filename of the soft data'+os.linesep
                    #if self.kriging_type.GetValue() in ['Local Collocated CoKriging','Local joint pobability distributions']:
                    #    total[90] = 'CCFILE    ='+dpath+os.sep+'temp_corr.prn'+'      # Filename of correlation file for local correlations (ktype=5)'+os.linesep
                    
                    #if self.kriging_type.GetValue() in ['Joint pobability distributions','Local joint pobability distributions']:
                    #    total[110] = 'USEBIHIST =1 #Use Bihist? 1-yes 0-no'+os.linesep
                    #    self.write_bidis(dpath)
                    #    total[111] = 'BIHISTFILE ='+dpath+os.sep+'temp_bidis.prn'+'   # bihistogram file'+os.linesep
                    #    total[112] = 'NCLASSES = '+str(self.bidistribution_classes.GetValue())+'                           # number of classes to use '+os.linesep
                    #    total[113] = 'AUXILIARYFILE = '+dpath+os.sep+'temp_soft.prn'+'       # auxiliary image '+os.linesep
                number_of_classes = frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata.shape[1]-1
                zape = frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata.shape[0]
                prop = []
                for i in xrange(108,len(total)):
                    total[i] = ' '
                for i in xrange(number_of_classes):
                    prop.append(np.count_nonzero(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].idata[:,i])/zape)
                total[108] = 'NCATS = '+str(number_of_classes)+os.linesep
                if self.vtype.GetValue() == 'Single':
                    total[109] = 'SAMEVAR = 1             #  Same variogram (0)No (1)Yes'+os.linesep
                else:
                    total[109] = 'SAMEVAR = 0             #  Same variogram (0)No (1)Yes'+os.linesep
                
                for i in xrange(number_of_classes):
                    total[112+i*3] = 'THRES'+str(i+1)+' = '+str(int(self.escl[i])+1)+os.linesep
                    total[112+i*3+1] = 'CDF'+str(i+1)+' = '+str(prop[i])+os.linesep
                    last = 112+i*3+1
                dic = {}
                dic['Spherical'] = 1
                dic['Exponential'] = 2
                dic['Gaussian'] = 3
                #print type(total)
                #print type(last)
                if self.vtype.GetValue()=='All':
                    total[last+2] = '#-------------------------------------------------------------------------------------#'+os.linesep
                    total[last+3] = '# here we define the variogram to use. if more than 1, use [VARIOGRAM2]'+os.linesep
                    total[last+4] = '#-------------------------------------------------------------------------------------#'+os.linesep
                    num = int(self.check1.GetValue())+int(self.check2.GetValue())+int(self.check3.GetValue())
                    mods = [repr(dic[self.model1.GetValue()])]
                    sods = [self.sill1.GetValue()/100]
                    if self.check2.GetValue(): 
                        mods.append(repr(dic[self.model2.GetValue()]))
                        sods.append(self.sill2.GetValue()/100)
                    if self.check3.GetValue(): 
                        mods.append(repr(dic[self.model3.GetValue()]))
                        sods.append(self.sill3.GetValue()/100)
                    for i in xrange(number_of_classes):
                        total[last+5+i] = '[CAT'+str(i+1)+']'+os.linesep
                        total[last+5+i+1] = 'NSTRUCT = '+repr(int(self.check1.GetValue())+int(self.check2.GetValue())+int(self.check3.GetValue()))+'                   # Number of semivariograms structures (NST(1)) '+os.linesep
                        total[last+5+i+2] = 'NUGGET = '+str(self.nugget.GetValue()/100)+'                    # Nugget constant (C0(1))'+os.linesep
                        for j in xrange(num):
                            if j==0:
                                total[last+5+i+2+j*9+1] = '[CAT'+str(i+1)+'VAR'+str(j+1)+']'+os.linesep
                                total[last+5+i+2+j*9+2] = 'TYPE = '+mods[j]+os.linesep
                                total[last+5+i+2+j*9+3] = 'COV  ='+'%.3f'%(sods[j])+'                      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                                total[last+5+i+2+j*9+4] = 'ANG1 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                                total[last+5+i+2+j*9+5] = 'ANG2 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                                total[last+5+i+2+j*9+6] = 'ANG3 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                                total[last+5+i+2+j*9+7] = 'AA   ='+str(frame.object_manager.call(self.pieces).imodel1_ranges[i][0])+'                     # Maximum horizontal range (AA(i))'+os.linesep
                                total[last+5+i+2+j*9+8] = 'AA1   ='+str(frame.object_manager.call(self.pieces).imodel1_ranges[i][1])+'                     # Maximum horizontal range (AA(i))'+os.linesep
                                total[last+5+i+2+j*9+9] = 'AA2   ='+str(frame.object_manager.call(self.pieces).imodel1_ranges[i][2])+'                     # Maximum horizontal range (AA(i))'+os.linesep
                                if frame.object_manager.call(self.pieces).imodel1_ranges[i][2]<2:
                                    total[last+5+i+2+j*9+9] = 'AA2   ='+str(3)+'                     # Maximum horizontal range (AA(i))'+os.linesep
                                last = last+i+j*9+9+10
                            elif j==1:
                                total[last+5+i+2+j*9+1] = '[CAT'+str(i+1)+'VAR'+str(j+1)+']'+os.linesep
                                total[last+5+i+2+j*9+2] = 'TYPE = '+mods[j]+os.linesep
                                total[last+5+i+2+j*9+3] = 'COV  ='+'%.3f'%(sods[j])+'                      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                                total[last+5+i+2+j*9+4] = 'ANG1 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                                total[last+5+i+2+j*9+5] = 'ANG2 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                                total[last+5+i+2+j*9+6] = 'ANG3 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                                total[last+5+i+2+j*9+7] = 'AA   ='+str(frame.object_manager.call(self.pieces).imodel2_ranges[i][0])+'                     # Maximum horizontal range (AA(i))'+os.linesep
                                total[last+5+i+2+j*9+8] = 'AA1   ='+str(frame.object_manager.call(self.pieces).imodel2_ranges[i][1])+'                     # Maximum horizontal range (AA(i))'+os.linesep
                                total[last+5+i+2+j*9+9] = 'AA2   ='+str(frame.object_manager.call(self.pieces).imodel2_ranges[i][2])+'                     # Maximum horizontal range (AA(i))'+os.linesep
                                last = last+i+j*9+9+10
                            elif j==2:
                                total[last+5+i+2+j*9+1] = '[CAT'+str(i+1)+'VAR'+str(j+1)+']'+os.linesep
                                total[last+5+i+2+j*9+2] = 'TYPE = '+mods[j]+os.linesep
                                total[last+5+i+2+j*9+3] = 'COV  ='+'%.3f'%(sods[j])+'                      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                                total[last+5+i+2+j*9+4] = 'ANG1 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                                total[last+5+i+2+j*9+5] = 'ANG2 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                                total[last+5+i+2+j*9+6] = 'ANG3 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                                total[last+5+i+2+j*9+7] = 'AA   ='+str(frame.object_manager.call(self.pieces).imodel3_ranges[i][0])+'                     # Maximum horizontal range (AA(i))'+os.linesep
                                total[last+5+i+2+j*9+8] = 'AA1   ='+str(frame.object_manager.call(self.pieces).imodel3_ranges[i][1])+'                     # Maximum horizontal range (AA(i))'+os.linesep
                                total[last+5+i+2+j*9+9] = 'AA2   ='+str(frame.object_manager.call(self.pieces).imodel3_ranges[i][2])+'                     # Maximum horizontal range (AA(i))'+os.linesep
                                last = last+i+j*9+9+10
                else:
                    """
                    total[98]='TYPE = '+repr(dic[self.model1.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep
                    if self.check1.GetValue():
                        total[99]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                    else:
                        total[99]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                    total[100]='ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                    total[101]='ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep
                    total[102]='ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep
                    total[103]='AA   = '+repr(self.range1.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                    total[104]='AA1  = '+repr(self.range1_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep
                    total[105]='AA2  = '+repr(self.range1_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep
                    if self.check2.GetValue():
                        total.append(os.linesep)
                        total.append('[VARIOGRAM2]'+os.linesep)
                        total.append('TYPE = '+repr(dic[self.model2.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep)
                        total.append('COV  = '+'%.3f'%(self.sill2.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep)
                        total.append('ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep)
                        total.append('ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep)
                        total.append('ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep)
                        total.append('AA   = '+repr(self.range2.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep)
                        total.append('AA1  = '+repr(self.range2_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep)
                        total.append('AA2  = '+repr(self.range2_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep)
                    if self.check3.GetValue():
                        total.append(os.linesep)
                        total.append('[VARIOGRAM3]'+os.linesep)
                        total.append('TYPE = '+repr(dic[self.model3.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep)
                        total.append('COV  = '+'%.3f'%(self.sill3.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep)
                        total.append('ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep)
                        total.append('ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep)
                        total.append('ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep)
                        total.append('AA   = '+repr(self.range3.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep)
                        total.append('AA1  = '+repr(self.range3_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep)
                        total.append('AA2  = '+repr(self.range3_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep)
                    """
                    total[last+2] = '#-------------------------------------------------------------------------------------#'+os.linesep
                    total[last+3] = '# here we define the variogram to use. if more than 1, use [VARIOGRAM2]'+os.linesep
                    total[last+4] = '#-------------------------------------------------------------------------------------#'+os.linesep
                    num = int(self.check1.GetValue())+int(self.check2.GetValue())+int(self.check3.GetValue())
                    mods = [repr(dic[self.model1.GetValue()])]
                    sods = [self.sill1.GetValue()/100]
                    if self.check2.GetValue(): 
                        mods.append(repr(dic[self.model2.GetValue()]))
                        sods.append(self.sill2.GetValue()/100)
                    if self.check3.GetValue(): 
                        mods.append(repr(dic[self.model3.GetValue()]))
                        sods.append(self.sill3.GetValue()/100)
                    for i in xrange(1):
                        total[last+5+i] = '[CAT'+str(i+1)+']'+os.linesep
                        total[last+5+i+1] = 'NSTRUCT = '+repr(int(self.check1.GetValue())+int(self.check2.GetValue())+int(self.check3.GetValue()))+'                   # Number of semivariograms structures (NST(1)) '+os.linesep
                        total[last+5+i+2] = 'NUGGET = '+str(self.nugget.GetValue()/100)+'                    # Nugget constant (C0(1))'+os.linesep
                        if self.check1.GetValue():
                            j = 0
                            total[last+5+i+2+j*9+1] = '[CAT'+str(i+1)+'VAR'+str(j+1)+']'+os.linesep
                            total[last+5+i+2+j*9+2] = 'TYPE = '+mods[j]+os.linesep
                            total[last+5+i+2+j*9+3] = 'COV  ='+'%.3f'%(sods[j])+'                      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                            total[last+5+i+2+j*9+4] = 'ANG1 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                            total[last+5+i+2+j*9+5] = 'ANG2 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                            total[last+5+i+2+j*9+6] = 'ANG3 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                            total[last+5+i+2+j*9+7] = 'AA   = '+repr(self.range1.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                            total[last+5+i+2+j*9+8] = 'AA1   = '+repr(self.range1_m1.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                            total[last+5+i+2+j*9+9] = 'AA2   = '+repr(self.range1_m2.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                            if self.range1_m2.GetValue()<2:
                                total[last+5+i+2+j*9+9] = 'AA2   = '+repr(3)+'     # Maximum horizontal range (AA(i))'+os.linesep
                            last = last+i+j*9+9
                        if self.check2.GetValue():
                            j = 1
                            total[last+5+i+2+j*9+1] = '[CAT'+str(i+1)+'VAR'+str(j+1)+']'+os.linesep
                            total[last+5+i+2+j*9+2] = 'TYPE = '+mods[j]+os.linesep
                            total[last+5+i+2+j*9+3] = 'COV  ='+'%.3f'%(sods[j])+'                      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                            total[last+5+i+2+j*9+4] = 'ANG1 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                            total[last+5+i+2+j*9+5] = 'ANG2 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                            total[last+5+i+2+j*9+6] = 'ANG3 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                            total[last+5+i+2+j*9+7] = 'AA   = '+repr(self.range2.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                            total[last+5+i+2+j*9+8] = 'AA1   = '+repr(self.range2_m1.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                            total[last+5+i+2+j*9+9] = 'AA2   = '+repr(self.range2_m2.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                            last = last+i+j*9+9
                        if self.check3.GetValue():
                            j = 2
                            total[last+5+i+2+j*9+1] = '[CAT'+str(i+1)+'VAR'+str(j+1)+']'+os.linesep
                            total[last+5+i+2+j*9+2] = 'TYPE = '+mods[j]+os.linesep
                            total[last+5+i+2+j*9+3] = 'COV  ='+'%.3f'%(sods[j])+'                      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
                            total[last+5+i+2+j*9+4] = 'ANG1 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                            total[last+5+i+2+j*9+5] = 'ANG2 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                            total[last+5+i+2+j*9+6] = 'ANG3 ='+repr(self.angle1.GetValue())+'                    # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                            total[last+5+i+2+j*9+7] = 'AA   = '+repr(self.range3.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                            total[last+5+i+2+j*9+8] = 'AA1   = '+repr(self.range3_m1.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                            total[last+5+i+2+j*9+9] = 'AA2   = '+repr(self.range3_m2.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                            last = last+i+j*9+9
                            
                #############################

                fid=open(dpath+'\\sisdir.par','w')
                fid.writelines(total)
                fid.close()
                path1=os.getcwd()
                path2=path1+'\\EXE'
                os.chdir(path2)
                process=subprocess.Popen(r'SIS.exe "'+dpath+'\\sisdir.par"').wait()
                os.chdir(path1)
                self.do_image_statistics()
                blocks = (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
                size   = (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
                first  = (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
                path = self.output_dir+os.sep+'most_likely.PRN'
                frame.object_manager.add_mesh_object_from_file(path,blocks,size,first,null=self.null.GetValue(),
                                                              filetype='ASCII'
                                                              ,dtype='float32'
                                                              ,at_least=3)
                                                              
                frame.update_last_object_list()
                
                path = self.output_dir+os.sep+'entropy.PRN'
                frame.object_manager.add_mesh_object_from_file(path,blocks,size,first,null=self.null.GetValue(),
                                                              filetype='ASCII'
                                                              ,dtype='float32'
                                                              ,at_least=3)
                                                              
                frame.update_last_object_list()
                
                wx.MessageBox("Process is finished. Check output directory for confirmation.","Information")
                self.Destroy()
        else:
            wx.MessageBox("You must have an output path.","Warning")
            
    def do_image_statistics(self):
        gpaths=[self.output_dir+os.sep+'outfile.out']
        for i in xrange(2,self.simulations.GetValue()+1):
            gpaths.append(self.output_dir+os.sep+'outfile'+str(i)+'.out')
        sims=self.simulations.GetValue()
        fid = open(gpaths[0])
        for h in xrange(3): fid.readline()
        data = np.loadtxt(fid)
        blocks=data.shape[0]
        unique = np.unique(data)
        fid.close()
        d={}
        for k in xrange(sims):
            d[k]=open(gpaths[k],'r')
            for h in xrange(3): d[k].readline()
        #if self.operation2.GetValue()=='Most likely and entropy':
        fmost=open(self.output_dir+os.sep+'most_likely.PRN','w')
        fmost.write('MOST_LIKELY\n1\nmost_likely\n')
        fent=open(self.output_dir+os.sep+'entropy.PRN','w')
        fent.write('ENTROPY\n1\nentropy\n')
        t=blocks
        tc=t
        c=0
        l=0
        prob = np.zeros(unique.shape[0])
        dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
        line=np.zeros(sims,dtype='uint8')        
        for i in xrange(t):
            if c>tc:
                tc=tc+t
                l=l+1
            c=c+1
            for j in xrange(sims):
                # counts = np.bincount(a)
                # np.argmax(counts)
                line[j]=np.int(np.float(d[j].readline()))
            for k in xrange(prob.shape[0]):
                m = (line==unique[k])
                prob[k] = np.count_nonzero(m)/sims
            m2 = (prob!=0)
            fmost.write('%i\n'%np.argmax(np.bincount(line)))
            fent.write('%15.6f\n'%(-np.sum(prob[m2]*np.log(prob[m2]))))
            dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
        fmost.close()
        fent.close()
        for k in xrange(sims):
            d[k].close()
        dialog.Destroy()
        #dialog.Destroy()
        """
        dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
        for i in xrange(t):
            if c>tc:
                tc=tc+t
                l=l+1
            c=c+1
            line=np.zeros(sims)
            for j in xrange(sims):
                line[j]=np.float(d[j].readline())
            fmean.write('%15.6f\n'%line.mean())
            fvar.write('%15.6f\n'%line.var())
            dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
        fmean.close()
        fvar.close()
        for k in xrange(sims):
            d[k].close()
        """
    
    def onbidisfile(self,event):
        dlg=wx.FileDialog(self,"Choose input bidistribution file.",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            self.bidistribution_path = open(dlg.GetPath())
            try:
                data = np.loadtxt(self.bidistribution_path)
                flag=True
            except ValueError:
                self.bidistribution_path = None
                flag = False
                wx.MessageBox('Unable to open bidistribution file. Make certain the file has no header.', 'Error', wx.OK | wx.ICON_INFORMATION)
            if flag:
                if data.shape[1]!=2:
                    self.bidistribution_path = None
                    wx.MessageBox('The file should only have 2 columns.', 'Error', wx.OK | wx.ICON_INFORMATION)
                else:
                    self.bidistribution_data = data[np.argsort(data,axis=0)[:,0],:]
                    
    def onbidis(self,event):
        #self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        #self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.bidis_variable1.Clear()
        self.bidis_variable1.AppendItems(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names())
        self.bidis_variable1.SetValue(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0])
        self.bidis_variable2.Clear()
        self.bidis_variable2.AppendItems(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names())
        self.bidis_variable2.SetValue(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0])
            
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        self.blocks_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[0])
        self.blocks_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[1])
        self.blocks_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[2])
        
        self.size_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[0])
        self.size_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[1])
        self.size_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[2])
        
        self.first_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[0])
        self.first_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[1])
        self.first_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[2])
        
    def oncobjectcombo(self,event):
        self.cvariable.Clear()
        self.cvariable.AppendItems(frame.object_manager.object_list[self.cobject.GetValue()].get_variable_names())
        self.cvariable.SetValue(frame.object_manager.object_list[self.cobject.GetValue()].get_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def check_what_data_goes(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if len(frame.object_manager.object_list[i].get_numeric_variable_names())!=0:
                    what_gives.append(i)
        return what_gives
    
    def ondiroutput(self,event):
        dlg=wx.DirDialog(self,"Choose output directory.",style=wx.SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            self.output_dir=dlg.GetPath()        
            
    def oncheck1(self,event):
        if self.check1.GetValue():
            self.sill1.Enable()
            self.model1.Enable()
            self.range1.Enable()
            self.range1_m1.Enable()
            self.range1_m2.Enable()
            self.check2.Enable()
        else:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check2.SetValue(False)
            self.check2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck2(self,event):
        if self.check2.GetValue():
            self.sill2.Enable()
            self.model2.Enable()
            self.range2.Enable()
            self.range2_m1.Enable()
            self.range2_m2.Enable()
            self.check3.Enable()
        else:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck3(self,event):
        if self.check3.GetValue():
            self.sill3.Enable()
            self.model3.Enable()
            self.range3_m1.Enable()
            self.range3_m2.Enable()
            self.range3.Enable()
        else:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()

class CTXGSIFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Global Stochastic Inversion",size=(660,770),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.RESIZE_BORDER)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        #panel=self.panel=wx.Panel(self)
        
        panel=self.panel=wx.ScrolledWindow(self,wx.ID_ANY)
        #panel.SetBackgroundColour('white')
        panel.SetScrollbars(1,1,640,750)
        
        self.pieces = pieces
        
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            ini1 = frame.object_manager.call(pieces).model_angles[0]
            ini2 = frame.object_manager.call(pieces).model_angles[1]
            ini3 = frame.object_manager.call(pieces).model_angles[2]
        else:
            ini1 = 0
            ini2 = 0
            ini3 = 0
        
        wx.StaticBox(panel,-1,'Variogram parameters',(10,10),(300,250))
        #self.refresh = wx.Button(panel,-1,'Refresh',(220,7),(50,-1))
        #self.Bind(wx.EVT_BUTTON,self.update_directional_variograms,id=self.refresh.GetId())
        wx.StaticText(panel,-1,'Azimuth (1):',(30,45))
        self.angle1 = wx.Slider(panel, -1, ini1, -89, 90, (90,27), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.Bind(wx.EVT_SLIDER,self.update_nunesplot,id=self.angle1.GetId())
        wx.StaticText(panel,-1,'Dip (2):',(30,95))
        self.angle2 = wx.Slider(panel, -1, ini2, -89, 90, (90,77), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle2.Disable()
        wx.StaticText(panel,-1,'Rake (3):',(30,145))
        self.angle3 = wx.Slider(panel, -1, ini3, -89, 90, (90,137), (200, -1), wx.SL_HORIZONTAL | wx.SL_LABELS)
        #self.angle3.Disable()
        
        wx.StaticText(panel,-1,'Tol.:',(30,195))
        self.tolerance = wx.SpinCtrl(panel,-1,'',(60,192),(50,-1),min=1,max=90,initial=15)
        wx.StaticText(panel,-1,'Bins:',(120,195))
        self.bins = wx.SpinCtrl(panel,-1,'',(150,192),(50,-1),min=2,max=500,initial=10)
        wx.StaticText(panel,-1,'Max:',(210,195))
        self.maximum = FS.FloatSpin(panel, -1,(240, 192),(60,-1),min_val=0,max_val=100000000,value = 0,digits=3)
        self.tolerance.Disable()
        self.bins.Disable()
        self.maximum.Disable()
        
        wx.StaticText(panel,-1,'Sill:',(30,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: sill = frame.object_manager.call(pieces).full_sill
        else: sill = frame.object_manager.call(pieces).basic_statistics[1]
        self.sill = FS.FloatSpin(panel, -1,(50, 222),(60,-1),min_val=0,max_val=1000000000,value = sill,digits=3)
        wx.StaticText(panel,-1,'Nug.:',(120,225))
        if frame.object_manager.call(pieces).variogram_adjusted_flag: nug = frame.object_manager.call(pieces).model_nugget
        else: nug = 0
        self.nugget = wx.SpinCtrl(panel,-1,'',(150,222),(50,-1),min=0,max=100,initial=nug)
        wx.StaticText(panel,-1,'dZ:',(210,225))
        self.dz = FS.FloatSpin(panel, -1,(240, 222),(60,-1),min_val=0,max_val=1000000000,value = 0,digits=3)
        self.dz.Disable()
        
        wx.StaticBox(panel,-1,'Model 1 parameters',(10,260),(300,150))
        self.check1 = wx.CheckBox(panel,-1,' Plot model 1',(30,290))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck1,id=self.check1.GetId())
        wx.StaticText(panel,-1,'Model 1 sill:',(30,320))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 1:
                self.check1.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[0]
                ini2 = frame.object_manager.call(pieces).model_types[0]
                ini3 = frame.object_manager.call(pieces).model1_ranges[0]
                ini4 = frame.object_manager.call(pieces).model1_ranges[1]
                ini5 = frame.object_manager.call(pieces).model1_ranges[2]
            else:
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill1 = wx.SpinCtrl(panel,-1,'',(90,317),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,350))
        self.model1 = wx.ComboBox(panel,-1,ini2,(90,347),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,380))
        self.range1 = FS.FloatSpin(panel, -1,(70, 377),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range1_m1 = FS.FloatSpin(panel, -1,(155, 377),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range1_m2 = FS.FloatSpin(panel, -1,(235, 377),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check1.GetValue()==False:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            
        wx.StaticBox(panel,-1,'Model 2 parameters',(10,410),(300,150))
        self.check2 = wx.CheckBox(panel,-1,' Plot model 2',(30,440))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck2,id=self.check2.GetId())
        wx.StaticText(panel,-1,'Model 2 sill:',(30,470))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 2:
                self.check2.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[1]
                ini2 = frame.object_manager.call(pieces).model_types[1]
                ini3 = frame.object_manager.call(pieces).model2_ranges[0]
                ini4 = frame.object_manager.call(pieces).model2_ranges[1]
                ini5 = frame.object_manager.call(pieces).model2_ranges[2]
            else:
                self.check2.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check2.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill2 = wx.SpinCtrl(panel,-1,'',(90,467),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,500))
        self.model2 = wx.ComboBox(panel,-1,ini2,(90,497),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,530))
        self.range2 = FS.FloatSpin(panel, -1,(70, 527),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range2_m1 = FS.FloatSpin(panel, -1,(155, 527),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range2_m2 = FS.FloatSpin(panel, -1,(235, 527),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check2.GetValue()==False:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            
        wx.StaticBox(panel,-1,'Model 3 parameters',(10,560),(300,150))
        self.check3 = wx.CheckBox(panel,-1,' Plot model 3',(30,590))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck3,id=self.check3.GetId())
        wx.StaticText(panel,-1,'Model 3 sill:',(30,620))
        if frame.object_manager.call(pieces).variogram_adjusted_flag:
            if frame.object_manager.call(pieces).number_of_models >= 3:
                self.check3.SetValue(True)
                ini1 = frame.object_manager.call(pieces).model_sills[2]
                ini2 = frame.object_manager.call(pieces).model_types[2]
                ini3 = frame.object_manager.call(pieces).model3_ranges[0]
                ini4 = frame.object_manager.call(pieces).model3_ranges[1]
                ini5 = frame.object_manager.call(pieces).model3_ranges[2]
            else:
                self.check3.SetValue(False)
                ini1 = 100
                ini2 = 'Exponential'
                ini3 = 1
                ini4 = 1
                ini5 = 1
        else:
            self.check3.SetValue(False)
            ini1 = 100
            ini2 = 'Exponential'
            ini3 = 1
            ini4 = 1
            ini5 = 1
        self.sill3 = wx.SpinCtrl(panel,-1,'',(90,617),(120,-1),min=1,max=100,initial=ini1)
        wx.StaticText(panel,-1,'Model:',(30,650))
        self.model3 = wx.ComboBox(panel,-1,ini2,(90,647),(120,-1),choices = ['Gaussian','Exponential','Spherical'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range:',(30,680))
        self.range3 = FS.FloatSpin(panel, -1,(70, 677),(80,-1),min_val=1,max_val=100000000,value = ini3,digits=3)
        self.range3_m1 = FS.FloatSpin(panel, -1,(155, 677),(75,-1),min_val=1,max_val=100000000,value = ini4,digits=3)
        self.range3_m2 = FS.FloatSpin(panel, -1,(235, 677),(70,-1),min_val=1,max_val=100000000,value = ini5,digits=3)
        if self.check3.GetValue()==False:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
        
        if self.check1.GetValue()==False:
            self.check2.Disable()
            self.check3.Disable()
        elif self.check1.GetValue()==True and self.check2.GetValue()==False:
            self.check3.Disable()
            
        wx.StaticBox(panel,-1,'General parameters',(320,10),(300,400))
        wx.StaticText(panel,-1,'Simulations:',(340,40))
        wx.StaticText(panel,-1,'Iterations:',(340,80))
        self.simulations = wx.SpinCtrl(panel,-1,'',(400,37),(100,-1),min=2,max=300,initial=8)
        self.iterations = wx.SpinCtrl(panel,-1,'',(400,77),(100,-1),min=2,max=300,initial=6)
        self.bai=wx.CheckBox(panel,-1,' Write best acoustic impedance grid',(340,120))
        self.bai.SetValue(True)
        self.bai.Disable()
        self.bcm=wx.CheckBox(panel,-1,' Write best correlations grid',(340,150))
        self.ai=wx.CheckBox(panel,-1,' Write acoustic impedance grid',(340,180))
        self.ai.SetValue(True)
        self.corr=wx.CheckBox(panel,-1,' Write correlations grid',(340,210))
        self.synth=wx.CheckBox(panel,-1,' Write synthetic grid',(340,240))
        self.rcoef=wx.CheckBox(panel,-1,' Write reflection coefficients grid',(340,270))
        
        #self.btn_wavelet = wx.Button(panel,-1,'Load wavelet',(340,310),(100,20))
        wx.StaticText(panel,-1,'Wavelet object; vertical range variable; wavelet variable',(340,290))
        self.wavelet_object = wx.ComboBox(panel,-1,self.check_what_data_goes()[0],(340,310),(70,-1),choices = self.check_what_data_goes(),style=wx.CB_READONLY)
        self.wavelet_variable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0],(430,310),(70,-1),choices = frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        self.wavelet_variable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0],(530,310),(70,-1),choices = frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.Bind(wx.EVT_BUTTON,self.onwavelet,id=self.btn_wavelet.GetId())
        self.Bind(wx.EVT_COMBOBOX,self.onwavelet,id=self.wavelet_object.GetId())
        wx.StaticText(panel,-1,'Layers:',(460,372))
        self.lmin = wx.SpinCtrl(panel,-1,'',(500,370),(50,-1),min=2,max=100,initial=5)
        self.lmax = wx.SpinCtrl(panel,-1,'',(560,370),(50,-1),min=2,max=100,initial=12)
        wx.StaticText(panel,-1,'Seismic:',(340,343))
        self.object = wx.ComboBox(panel,-1,self.check_what_goes()[0],(400,340),(100,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0],(510,340),(100,-1),choices = frame.object_manager.object_list[self.object.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        self.btn_output = wx.Button(panel,-1,'Output directory',(340,370),(100,20))
        self.Bind(wx.EVT_BUTTON,self.ondiroutput,id=self.btn_output.GetId())
        
        wx.StaticBox(panel,-1,'Search Ellipsoid',(320,410),(300,150))
        wh = 310
        lh = 410
        wx.StaticText(panel,-1,'Orientation:',(wh+30,lh+50))
        wx.StaticText(panel,-1,'Range:',(wh+30,lh+90))
        wx.StaticText(panel,-1,'Azimuth',(wh+100-5,lh+30))
        wx.StaticText(panel,-1,'Dip',(wh+180-5,lh+30))
        wx.StaticText(panel,-1,'Rake',(wh+250-5,lh+30))
        wx.StaticText(panel,-1,'Main',(wh+100-5,lh+70))
        wx.StaticText(panel,-1,'minor1',(wh+180-5,lh+70))
        wx.StaticText(panel,-1,'minor2',(wh+250-5,lh+70))
        self.se_ang1=wx.SpinCtrl(panel,-1,'',(wh+100-5,lh+47),(70,-1),min=-90,max=90,initial=0)
        self.se_ang2=wx.SpinCtrl(panel,-1,'',(wh+175-5,lh+47),(70,-1),min=-90,max=90,initial=0)
        self.se_ang3=wx.SpinCtrl(panel,-1,'',(wh+250-5,lh+47),(60,-1),min=-90,max=90,initial=0)
        self.se_ran1=wx.SpinCtrl(panel,-1,'',(wh+100-5,lh+87),(70,-1),min=0,max=180000000,initial=100)
        self.se_ran2=wx.SpinCtrl(panel,-1,'',(wh+175-5,lh+87),(70,-1),min=0,max=180000000,initial=100)
        self.se_ran3=wx.SpinCtrl(panel,-1,'',(wh+250-5,lh+87),(60,-1),min=0,max=180000000,initial=100)
        
        self.output_dir = None
        self.wavelet_path = None
        self.wavelet_size = None
        
        self.btn_run = wx.Button(panel,-1,'Run GSI',(320,570),(300,40))
        self.Bind(wx.EVT_BUTTON,self.onrun,id=self.btn_run.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(420,650),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.btn_cancel.GetId())
        
    def write_hard(self,temp_path):
        fid = open(temp_path+os.sep+'temp_data.prn','w')
        fid.write('hard_data\n4\nx\ny\nz\nAI\n')
        for i in xrange(frame.object_manager.object_list[self.pieces[0]].x.shape[0]):
            fid.write('%.3f     %.3f     %.3f     %.3f\n'%(frame.object_manager.object_list[self.pieces[0]].x[i],
                                                           frame.object_manager.object_list[self.pieces[0]].y[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].z[i]
                                                           ,frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data[i]))
        fid.close()
        
    def write_seismic(self,temp_path,obj,vrble):
        fid = open(temp_path+os.sep+'temp_seismic.prn','w')
        fid.write('temp_seismic\n1\ntseismic\n')
        for z in xrange(frame.object_manager.object_list[obj].blocks[2]):
            for y in xrange(frame.object_manager.object_list[obj].blocks[1]):
                for x in xrange(frame.object_manager.object_list[obj].blocks[0]):
                    fid.write('%.3f\n'%frame.object_manager.object_list[obj].variable[vrble].data[x,y,z])
        fid.close()
        
    def write_wavelet(self,temp_path,obj,vrbl1,vrbl2):
        fid = open(temp_path+os.sep+'temp_wavelet.prn','w')
        fid.write('temp_wavelet\n2\nVertical_range\nWavelet\n')
        a = frame.object_manager.object_list[obj].variable[vrbl1].data.data
        b = frame.object_manager.object_list[obj].variable[vrbl2].data.data
        self.wavelet_size = a.shape[0]-1
        data = np.hstack((a.reshape((a.shape[0],1)),b.reshape((b.shape[0],1))))
        np.savetxt(fid,data,fmt='%.f')
        fid.close()
        
    def onrun(self,event):
        if self.output_dir != None:
            dpath= win32api.GetLongPathName(win32api.GetTempPath())
            #shutil.copyfile(self.wavelet_path,dpath+os.sep+'temp_wavelet.prn')
            self.write_seismic(dpath,self.object.GetValue(),self.variable.GetValue())
            self.write_hard(dpath)
            self.write_wavelet(dpath,self.wavelet_object.GetValue(),self.wavelet_variable1.GetValue(),self.wavelet_variable2.GetValue())
            fid=open('PAR\\example.conf','r')
            total=fid.readlines()
            fid.close()
            total[10]='ITERATIONS = '+repr(self.iterations.GetValue())+os.linesep
            total[15]='SIMULATIONS = '+repr(self.simulations.GetValue())+os.linesep
            total[33]='INPUT_PATH = '+dpath+os.sep+os.linesep
            total[37]='OUTPUT_PATH = '+self.output_dir+os.sep+os.linesep
            total[42]='LOG_PATH = '+self.output_dir+os.sep+os.linesep
            total[79]='TMP_PATH = '+self.output_dir+os.sep+os.linesep            
            total[86]='XNUMBER = '+repr(frame.object_manager.object_list[self.object.GetValue()].blocks[0])+'      # Number of blocks in X direction (NX)'+os.linesep
            total[87]='YNUMBER = '+repr(frame.object_manager.object_list[self.object.GetValue()].blocks[1])+'      # Number of blocks in Y direction (NY)'+os.linesep
            total[88]='ZNUMBER = '+repr(frame.object_manager.object_list[self.object.GetValue()].blocks[2])+'      # Number of blocks in Z direction (NZ)'+os.linesep
            total[90]='XCOORD = '+repr(frame.object_manager.object_list[self.object.GetValue()].first[0])+'     # Coordinate in X axis of the first block (XMN)'+os.linesep
            total[91]='YCOORD = '+repr(frame.object_manager.object_list[self.object.GetValue()].first[1])+'     # Coordinate in Y axis of the first block (YMN)'+os.linesep
            total[92]='ZCOORD = '+repr(frame.object_manager.object_list[self.object.GetValue()].first[2])+'     # Coordinate in Z axis of the first block (ZMN)'+os.linesep
            total[103]='FILENAME = '+'temp_seismic.prn'+os.linesep
            total[121]='BAI   = '+repr(int(self.bai.GetValue()))+'            # Dump best acoustic impedance grid'+os.linesep
            total[122]='BCM   = '+repr(int(self.bcm.GetValue()))+'            # Dump best correlations grid'+os.linesep
            total[123]='AI    = '+repr(int(self.ai.GetValue()))+'            # Dump acoustic impedance grid'+os.linesep
            total[124]='CORR  = '+repr(int(self.corr.GetValue()))+'            # Dump correlations grid'+os.linesep
            total[125]='SYNTH = '+repr(int(self.synth.GetValue()))+'            # Dump synthetic grid'+os.linesep
            total[126]='RCOEF = '+repr(int(self.rcoef.GetValue()))+'            # Dump reflection coefficients grid'+os.linesep
            total[162]='FILENAME = '+'temp_wavelet.prn'+os.linesep
            total[166]='USED_VALUES = '+repr(self.wavelet_size)+'    # Size of wavelet -1'+os.linesep
            total[190]='FILENAME = '+'temp_data.prn'+'   # Hard Data file'+os.linesep
            total[191]='NVARI    = '+repr(4)+'                              # Number of columns in the data file (to eliminate)'+os.linesep
            total[192]='IXL      = '+repr(1)+'                               # Column number of X coordinate'+os.linesep
            total[193]='IYL      = '+repr(2)+'                               # Column number of Y coordinate'+os.linesep
            total[194]='IZL      = '+repr(3)+'                               # Column number of Z coordinate'+os.linesep
            total[195]='IVRL     = '+repr(4)+'                               # Column number of variable to be simulated'+os.linesep
            total[198]='TMIN     = '+str(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].basic_statistics[3])+'                         # Minimun threshold value'+os.linesep
            total[199]='TMAX     = '+str(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].basic_statistics[4])+'                         # Maximun threshold value'+os.linesep
            total[209]='ZMIN    = '+str(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].basic_statistics[3])+'        # Minimum allowable data value'+os.linesep
            total[210]='ZMAX    = '+str(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].basic_statistics[4])+'       # Maximum allowable data value'+os.linesep
            total[212]='LTPAR    = '+str(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].basic_statistics[3])+'        # Minimum allowable data value'+os.linesep
            total[214]='UTPAR    = '+str(frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].basic_statistics[4])+'       # Maximum allowable data value'+os.linesep
            total[228]='XSIZE  = '+repr(frame.object_manager.object_list[self.object.GetValue()].size[0])+'         # Block size in X axis (XSIZ)'+os.linesep
            total[229]='YSIZE  = '+repr(frame.object_manager.object_list[self.object.GetValue()].size[1])+'         # Block size in Y axis (YSIZ)'+os.linesep
            total[230]='ZSIZE  = '+repr(frame.object_manager.object_list[self.object.GetValue()].size[2])+'         # Block size in Z axis (ZSIZ)'+os.linesep
            total[251]='RADIUS  = '+repr(self.se_ran1.GetValue())+'     # Search radii in the maximum horizontal direction'+os.linesep
            total[252]='RADIUS1 = '+repr(self.se_ran2.GetValue())+'     # Search radii in the minimum horizontal direction'+os.linesep
            total[253]='RADIUS2 = '+repr(self.se_ran3.GetValue())+'     # Search radii in the vertical direction'+os.linesep
            total[254]='SANG1   = '+repr(self.se_ang1.GetValue())+'        # Orientation angle parameter of direction I (degrees)'+os.linesep
            total[255]='SANG2   = '+repr(self.se_ang2.GetValue())+'        # Orientation angle parameter of direction II (degrees)'+os.linesep
            total[256]='SANG3   = '+repr(self.se_ang3.GetValue())+'        # Orientation angle parameter of direction III (degrees)'+os.linesep
            total[262]='TYPE = '+repr(1)+'         # Kriging type ;0=simple,1=ordinary,2=simple with locally varying mean,3=external drif,'+os.linesep
            total[280]='NUGGET = '+'%.3f'%((self.nugget.GetValue()/100)*self.sill.GetValue())+'     # Nugget constant (C0(1))'+os.linesep
            total[281]='NUMBER = '+repr(int(self.check1.GetValue())+int(self.check2.GetValue())+int(self.check3.GetValue()))+'     # Number of semivariograms structures (NST(1))'+os.linesep            
            #dic = {'Spherical':1,'Exponential':2,'Gaussian:',3}        
            dic = {}
            dic['Spherical'] = 1
            dic['Exponential'] = 2
            dic['Gaussian'] = 3        
            total[284]='TYPE = '+repr(dic[self.model1.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep
            if self.check1.GetValue():
                total[285]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
            else:
                total[285]='COV  = '+'%.3f'%(self.sill1.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep
            total[286]='ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep
            total[287]='ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep
            total[288]='ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep
            total[289]='AA   = '+repr(self.range1.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
            total[290]='AA1  = '+repr(self.range1_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep
            total[291]='AA2  = '+repr(self.range1_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep
            if self.check2.GetValue():   
                total[293]='[VARIOGRAM2]'+os.linesep
                total[294]='TYPE = '+repr(dic[self.model2.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep
                total[295]='COV  = '+'%.3f'%(self.sill2.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep            
                total[296]='ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                total[297]='ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep
                total[298]='ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep
                total[299]='AA   = '+repr(self.range2.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                total[300]='AA1  = '+repr(self.range2_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep
                total[301]='AA2  = '+repr(self.range2_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep
            elif self.check3.GetValue():
                total[293]='[VARIOGRAM2]'+os.linesep
                total[294]='TYPE = '+repr(dic[self.model2.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep
                total[295]='COV  = '+'%.3f'%(self.sill2.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep            
                total[296]='ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                total[297]='ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep
                total[298]='ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep
                total[299]='AA   = '+repr(self.range2.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                total[300]='AA1  = '+repr(self.range2_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep
                total[301]='AA2  = '+repr(self.range2_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep
                
                total[293]='[VARIOGRAM3]'+os.linesep
                total[304]='TYPE = '+repr(dic[self.model3.GetValue()])+'      # Struture type ;1=spherical,2=exponential,3=gaussian (IT(i))'+os.linesep
                total[305]='COV  = '+'%.3f'%(self.sill3.GetValue()/100)+'      # C parameter "COV + NUGGET = 1.0" (CC(i))'+os.linesep            
                total[306]='ANG1 = '+repr(self.angle1.GetValue())+'      # Geometric anisotropy angle I (ANG1(i))'+os.linesep
                total[307]='ANG2 = '+repr(0)+'      # Geometric anisotropy angle II (ANG2(i))'+os.linesep
                total[308]='ANG3 = '+repr(0)+'      # Geometric anisotropy angle III (ANG3(i))'+os.linesep
                total[309]='AA   = '+repr(self.range3.GetValue())+'     # Maximum horizontal range (AA(i))'+os.linesep
                total[310]='AA1  = '+repr(self.range3_m1.GetValue())+'     # Minimum horizontal range (AA1)'+os.linesep
                total[311]='AA2  = '+repr(self.range3_m2.GetValue())+'     # Vertical range (AA2)'+os.linesep
    
            fid=open(dpath+'\\tsi.conf','w')
            fid.writelines(total)
            fid.close()
            path1=os.getcwd()
            path2=path1+'\\EXE'
            os.chdir(path2)
            process=subprocess.Popen(r'tsi.exe "'+dpath+'\\tsi.conf"').wait()
            os.chdir(path1)
            # self.output_dir+os.sep+'GSI_BEST.tsi'
            blocks = frame.object_manager.object_list[self.object.GetValue()].blocks
            size   = frame.object_manager.object_list[self.object.GetValue()].size
            first  = frame.object_manager.object_list[self.object.GetValue()].first
            path = self.output_dir+os.sep+'GSI_BEST.tsi'
            frame.object_manager.add_mesh_object_from_file(path,blocks,size,first,null=-999,
                                                          filetype='ASCII'
                                                          ,dtype='float32'
                                                          ,at_least=3)
            frame.update_last_object_list()
            wx.MessageBox("Process is finished. Check log for successfull invertion confirmation.","Warning")
            self.Destroy()
        else:
            wx.MessageBox("You must have an output path and wavelet file.","Warning")
        
    def onwavelet(self,event):
        """
        dlg=wx.FileDialog(self,"Choose input wavelet file.",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            fid = open(dlg.GetPath())
            try:
                fid.readline()
                fid.readline()
                fid.readline()
                fid.readline()
                data = np.loadtxt(fid)
                fid.close()
                self.wavelet_path = dlg.GetPath()
                self.wavelet_size = data.shape[0]-1
            except ValueError:
                wx.MessageBox('Unable to open wavelet file.', 'Error', wx.OK | wx.ICON_INFORMATION)
        """
        #self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        #self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        self.wavelet_variable1.Clear()
        self.wavelet_variable1.AppendItems(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names())
        self.wavelet_variable1.SetValue(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0])
        self.wavelet_variable2.Clear()
        self.wavelet_variable2.AppendItems(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names())
        self.wavelet_variable2.SetValue(frame.object_manager.object_list[self.wavelet_object.GetValue()].get_numeric_variable_names()[0])
        
    def ondiroutput(self,event):
        dlg=wx.DirDialog(self,"Choose output directory.",style=wx.SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            self.output_dir=dlg.GetPath()
        
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def check_what_data_goes(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if len(frame.object_manager.object_list[i].get_numeric_variable_names())!=0:
                    what_gives.append(i)
        return what_gives
            
    def oncheck1(self,event):
        if self.check1.GetValue():
            self.sill1.Enable()
            self.model1.Enable()
            self.range1.Enable()
            self.range1_m1.Enable()
            self.range1_m2.Enable()
            self.check2.Enable()
        else:
            self.sill1.Disable()
            self.model1.Disable()
            self.range1.Disable()
            self.range1_m1.Disable()
            self.range1_m2.Disable()
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check2.SetValue(False)
            self.check2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck2(self,event):
        if self.check2.GetValue():
            self.sill2.Enable()
            self.model2.Enable()
            self.range2.Enable()
            self.range2_m1.Enable()
            self.range2_m2.Enable()
            self.check3.Enable()
        else:
            self.sill2.Disable()
            self.model2.Disable()
            self.range2.Disable()
            self.range2_m1.Disable()
            self.range2_m2.Disable()
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            self.check3.SetValue(False)
            self.check3.Disable()
            
    def oncheck3(self,event):
        if self.check3.GetValue():
            self.sill3.Enable()
            self.model3.Enable()
            self.range3_m1.Enable()
            self.range3_m2.Enable()
            self.range3.Enable()
        else:
            self.sill3.Disable()
            self.model3.Disable()
            self.range3.Disable()
            self.range3_m1.Disable()
            self.range3_m2.Disable()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXmirrorMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Mirror mesh Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'Self',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'mirror_'+pieces[1],(160,30),(150,-1))
        self.name.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        if self.choice.GetValue()=='Self':
            frame.object_manager.operation_mirror_mesh(self.pieces,name=False)
            frame.onreview_object(self.pieces)
        else:
            frame.object_manager.operation_mirror_mesh(self.pieces,name=self.name.GetValue())
            frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcategorizeMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Categorize mesh Frame",size=(430,355),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'Self',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'categorize_'+pieces[1],(160,30),(150,-1))
        self.name.Disable()
        
        wx.StaticText(panel,-1,'Categories',(30,70))
        self.categories = wx.SpinCtrl(panel,-1,'',(160,67),(150,-1),min=2,max=10,initial=2)
        self.Bind(wx.EVT_SPINCTRL,self.oncategories,id=self.categories.GetId())
        
        tol = 10 
        self.spin2 = wx.SpinCtrl(panel,-1,'',(30+tol,100),(60,-1),min=1,max=99,initial=10)
        self.spin3 = wx.SpinCtrl(panel,-1,'',(100+tol,100),(60,-1),min=1,max=99,initial=20)
        self.spin4 = wx.SpinCtrl(panel,-1,'',(170+tol,100),(60,-1),min=1,max=99,initial=30)
        self.spin5 = wx.SpinCtrl(panel,-1,'',(240+tol,100),(60,-1),min=1,max=99,initial=40)
        
        self.spin6 = wx.SpinCtrl(panel,-1,'',(30+tol,130),(60,-1),min=1,max=99,initial=50)
        self.spin7 = wx.SpinCtrl(panel,-1,'',(100+tol,130),(60,-1),min=1,max=99,initial=60)
        self.spin8 = wx.SpinCtrl(panel,-1,'',(170+tol,130),(60,-1),min=1,max=99,initial=70)
        self.spin9 = wx.SpinCtrl(panel,-1,'',(240+tol,130),(60,-1),min=1,max=99,initial=80)
        
        self.spin10 = wx.SpinCtrl(panel,-1,'',(30+tol,160),(60,-1),min=1,max=99,initial=90)
        
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin2.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin3.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin4.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin5.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin6.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin7.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin8.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin9.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin10.GetId())
        
        self.spin3.Disable()
        self.spin4.Disable()
        self.spin5.Disable()
        self.spin6.Disable()
        self.spin7.Disable()
        self.spin8.Disable()
        self.spin9.Disable()
        self.spin10.Disable()
        
        wx.StaticLine(panel,-1,(320,30),(1,200),style=wx.LI_VERTICAL)
        
        trange = self.trange = frame.object_manager.call(self.pieces).basic_statistics[4]-frame.object_manager.call(self.pieces).basic_statistics[3]
        tmin = self.tmin = frame.object_manager.call(self.pieces).basic_statistics[3]
        ttol=20
        self.true_values = true_values = np.percentile(frame.object_manager.call(self.pieces).data,range(1,99))
        self.t2 = wx.StaticText(panel,-1,'1: %.3f'%true_values[self.spin2.GetValue()-1],(330,30+ttol))
        self.t3 = wx.StaticText(panel,-1,'2: %.3f'%true_values[self.spin3.GetValue()-1],(330,50+ttol))
        self.t4 = wx.StaticText(panel,-1,'3: %.3f'%true_values[self.spin4.GetValue()-1],(330,70+ttol))
        self.t5 = wx.StaticText(panel,-1,'4: %.3f'%true_values[self.spin5.GetValue()-1],(330,90+ttol))
        self.t6 = wx.StaticText(panel,-1,'5: %.3f'%true_values[self.spin6.GetValue()-1],(330,110+ttol))
        self.t7 = wx.StaticText(panel,-1,'6: %.3f'%true_values[self.spin7.GetValue()-1],(330,130+ttol))
        self.t8 = wx.StaticText(panel,-1,'7: %.3f'%true_values[self.spin8.GetValue()-1],(330,150+ttol))
        self.t9 = wx.StaticText(panel,-1,'8: %.3f'%true_values[self.spin9.GetValue()-1],(330,170+ttol))
        self.t10 = wx.StaticText(panel,-1,'9: %.3f'%true_values[self.spin10.GetValue()-1],(330,190+ttol))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,250),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,250),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onspin(self,event):
        self.t2.SetLabel('1: %.3f'%self.true_values[self.spin2.GetValue()-1]) #((self.spin2.GetValue()/100)*self.trange+self.tmin))
        self.t3.SetLabel('2: %.3f'%self.true_values[self.spin3.GetValue()-1]) #((self.spin3.GetValue()/100)*self.trange+self.tmin))
        self.t4.SetLabel('3: %.3f'%self.true_values[self.spin4.GetValue()-1]) #((self.spin4.GetValue()/100)*self.trange+self.tmin))
        self.t5.SetLabel('4: %.3f'%self.true_values[self.spin5.GetValue()-1]) #((self.spin5.GetValue()/100)*self.trange+self.tmin))
        self.t6.SetLabel('5: %.3f'%self.true_values[self.spin6.GetValue()-1]) #((self.spin6.GetValue()/100)*self.trange+self.tmin))
        self.t7.SetLabel('6: %.3f'%self.true_values[self.spin7.GetValue()-1]) #((self.spin7.GetValue()/100)*self.trange+self.tmin))
        self.t8.SetLabel('7: %.3f'%self.true_values[self.spin8.GetValue()-1]) #((self.spin8.GetValue()/100)*self.trange+self.tmin))
        self.t9.SetLabel('8: %.3f'%self.true_values[self.spin9.GetValue()-1]) #((self.spin9.GetValue()/100)*self.trange+self.tmin))
        self.t10.SetLabel('9: %.3f'%self.true_values[self.spin10.GetValue()-1]) #((self.spin10.GetValue()/100)*self.trange+self.tmin))
        
    def oncategories(self,event):
        if self.categories.GetValue()>=3: self.spin3.Enable()
        else: self.spin3.Disable()
        if self.categories.GetValue()>=4: self.spin4.Enable()
        else: self.spin4.Disable()
        if self.categories.GetValue()>=5: self.spin5.Enable()
        else: self.spin5.Disable()
        if self.categories.GetValue()>=6: self.spin6.Enable()
        else: self.spin6.Disable()
        if self.categories.GetValue()>=7: self.spin7.Enable()
        else: self.spin7.Disable()
        if self.categories.GetValue()>=8: self.spin8.Enable()
        else: self.spin8.Disable()
        if self.categories.GetValue()>=9: self.spin9.Enable()
        else: self.spin9.Disable()
        if self.categories.GetValue()>=10: self.spin10.Enable()
        else: self.spin10.Disable()
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        categories = []
        categories.append(self.spin2.GetValue())
        if self.categories.GetValue()>=3: categories.append(self.spin3.GetValue())
        if self.categories.GetValue()>=4: categories.append(self.spin4.GetValue())
        if self.categories.GetValue()>=5: categories.append(self.spin5.GetValue())
        if self.categories.GetValue()>=6: categories.append(self.spin6.GetValue())
        if self.categories.GetValue()>=7: categories.append(self.spin7.GetValue())
        if self.categories.GetValue()>=8: categories.append(self.spin8.GetValue())
        if self.categories.GetValue()>=9: categories.append(self.spin9.GetValue())
        if self.categories.GetValue()>=10: categories.append(self.spin10.GetValue())
        if self.choice.GetValue()=='Self':
            frame.object_manager.operation_categorize_mesh(self.pieces,categories = np.sort(categories),name=False)
            frame.onreview_object(self.pieces)
        else:
            frame.object_manager.operation_categorize_mesh(self.pieces,categories = np.sort(categories),name=self.name.GetValue())
            frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcropMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Crop mesh Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'crop_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 30
        htol = 30
        
        wx.StaticText(panel,-1,'Crop X:',(30,60+htol))
        wx.StaticText(panel,-1,'Crop Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Crop Z:',(30,120+htol))         
        
        self.xo = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=1)
        self.yo = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=1)
        self.zo = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=1)
        
        self.xf = wx.SpinCtrl(panel,-1,'',(160+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=frame.object_manager.call_top(pieces).blocks[0])
        self.yf = wx.SpinCtrl(panel,-1,'',(160+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=frame.object_manager.call_top(pieces).blocks[1])
        self.zf = wx.SpinCtrl(panel,-1,'',(160+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=frame.object_manager.call_top(pieces).blocks[2])
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        initial = (self.xo.GetValue(),self.yo.GetValue(),self.zo.GetValue())
        final   = (self.xf.GetValue(),self.yf.GetValue(),self.zf.GetValue())
        flag = True
        if initial[0]>final[0]: flag = False
        if initial[1]>final[1]: flag = False
        if initial[2]>final[2]: flag = False
        if flag:
            frame.object_manager.operation_crop_mesh(self.pieces,initial,final,name=self.name.GetValue())
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Negative dimensions. Inital coordinates must be inferior or equal to final.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXduplicateMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Duplicate mesh Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'duplicate_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        blocks = frame.object_manager.call_top(self.pieces).blocks
        size   = frame.object_manager.call_top(self.pieces).size
        first  = frame.object_manager.call_top(self.pieces).first
        if frame.object_manager.call_top(self.pieces).null_flag: null = frame.object_manager.call_top(self.pieces).null
        else: null = None
        frame.object_manager.add_mesh_object(blocks,size,first,null,self.name.GetValue(),self.pieces[1],frame.object_manager.call(self.pieces).data.data)
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXlineartransformMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Linear transform mesh Frame",size=(350,255),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'Self',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'linear_'+pieces[1],(160,30),(150,-1))
        self.name.Disable()
        
        wx.StaticText(panel,-1,'Minimum:',(30,80))
        wx.StaticText(panel,-1,'Maximum:',(30,110))
        self.minimum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[0]),(90,77),(100,-1))
        self.maximum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[1]),(90,107),(100,-1))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        try:
            mi = np.float(self.minimum.GetValue())
            ma = np.float(self.maximum.GetValue())
            if ma>mi:
                if self.choice.GetValue()=='Self':
                    frame.object_manager.operation_linear_transform_mesh(self.pieces,mi,ma,name=False)
                    frame.onreview_object(self.pieces)
                else:
                    frame.object_manager.operation_linear_transform_mesh(self.pieces,mi,ma,self.name.GetValue())
                    frame.update_last_variable_list()
                wx.MessageBox("Operation is finished.","Information")
                self.Destroy()
            else:
                wx.MessageBox("Maximum field must be superior to minimum.","Error")
        except ValueError:
            wx.MessageBox("Error has occured. Check the fields in the minimum and maximum are numbers.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXmirrorPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Mirror point Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'mirror_'+pieces[1],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        if self.choice.GetValue()=='Self':
            frame.object_manager.operation_mirror_point(self.pieces,name=False)
            frame.onreview_object(self.pieces)
        else:
            frame.object_manager.operation_mirror_point(self.pieces,name=self.name.GetValue())
            frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()

class CTXcategorizePointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Categorize point Frame",size=(430,355),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'categorize_'+pieces[1],(160,30),(150,-1))
        self.choice.Disable()
        
        wx.StaticText(panel,-1,'Categories',(30,70))
        self.categories = wx.SpinCtrl(panel,-1,'',(160,67),(150,-1),min=2,max=10,initial=2)
        self.Bind(wx.EVT_SPINCTRL,self.oncategories,id=self.categories.GetId())
        
        tol = 10 
        self.spin2 = wx.SpinCtrl(panel,-1,'',(30+tol,100),(60,-1),min=1,max=99,initial=10)
        self.spin3 = wx.SpinCtrl(panel,-1,'',(100+tol,100),(60,-1),min=1,max=99,initial=20)
        self.spin4 = wx.SpinCtrl(panel,-1,'',(170+tol,100),(60,-1),min=1,max=99,initial=30)
        self.spin5 = wx.SpinCtrl(panel,-1,'',(240+tol,100),(60,-1),min=1,max=99,initial=40)
        
        self.spin6 = wx.SpinCtrl(panel,-1,'',(30+tol,130),(60,-1),min=1,max=99,initial=50)
        self.spin7 = wx.SpinCtrl(panel,-1,'',(100+tol,130),(60,-1),min=1,max=99,initial=60)
        self.spin8 = wx.SpinCtrl(panel,-1,'',(170+tol,130),(60,-1),min=1,max=99,initial=70)
        self.spin9 = wx.SpinCtrl(panel,-1,'',(240+tol,130),(60,-1),min=1,max=99,initial=80)
        
        self.spin10 = wx.SpinCtrl(panel,-1,'',(30+tol,160),(60,-1),min=1,max=99,initial=90)
        
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin2.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin3.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin4.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin5.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin6.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin7.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin8.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin9.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin10.GetId())
        
        self.spin3.Disable()
        self.spin4.Disable()
        self.spin5.Disable()
        self.spin6.Disable()
        self.spin7.Disable()
        self.spin8.Disable()
        self.spin9.Disable()
        self.spin10.Disable()
        
        wx.StaticLine(panel,-1,(320,30),(1,200),style=wx.LI_VERTICAL)
        
        trange = self.trange = frame.object_manager.call(self.pieces).basic_statistics[4]-frame.object_manager.call(self.pieces).basic_statistics[3]
        tmin = self.tmin = frame.object_manager.call(self.pieces).basic_statistics[3]
        ttol=20
        self.true_values = true_values = np.percentile(frame.object_manager.call(self.pieces).data,range(1,99))
        self.t2 = wx.StaticText(panel,-1,'1: %.3f'%true_values[self.spin2.GetValue()-1],(330,30+ttol))
        self.t3 = wx.StaticText(panel,-1,'2: %.3f'%true_values[self.spin3.GetValue()-1],(330,50+ttol))
        self.t4 = wx.StaticText(panel,-1,'3: %.3f'%true_values[self.spin4.GetValue()-1],(330,70+ttol))
        self.t5 = wx.StaticText(panel,-1,'4: %.3f'%true_values[self.spin5.GetValue()-1],(330,90+ttol))
        self.t6 = wx.StaticText(panel,-1,'5: %.3f'%true_values[self.spin6.GetValue()-1],(330,110+ttol))
        self.t7 = wx.StaticText(panel,-1,'6: %.3f'%true_values[self.spin7.GetValue()-1],(330,130+ttol))
        self.t8 = wx.StaticText(panel,-1,'7: %.3f'%true_values[self.spin8.GetValue()-1],(330,150+ttol))
        self.t9 = wx.StaticText(panel,-1,'8: %.3f'%true_values[self.spin9.GetValue()-1],(330,170+ttol))
        self.t10 = wx.StaticText(panel,-1,'9: %.3f'%true_values[self.spin10.GetValue()-1],(330,190+ttol))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,250),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,250),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onspin(self,event):
        self.t2.SetLabel('1: %.3f'%self.true_values[self.spin2.GetValue()-1]) #((self.spin2.GetValue()/100)*self.trange+self.tmin))
        self.t3.SetLabel('2: %.3f'%self.true_values[self.spin3.GetValue()-1]) #((self.spin3.GetValue()/100)*self.trange+self.tmin))
        self.t4.SetLabel('3: %.3f'%self.true_values[self.spin4.GetValue()-1]) #((self.spin4.GetValue()/100)*self.trange+self.tmin))
        self.t5.SetLabel('4: %.3f'%self.true_values[self.spin5.GetValue()-1]) #((self.spin5.GetValue()/100)*self.trange+self.tmin))
        self.t6.SetLabel('5: %.3f'%self.true_values[self.spin6.GetValue()-1]) #((self.spin6.GetValue()/100)*self.trange+self.tmin))
        self.t7.SetLabel('6: %.3f'%self.true_values[self.spin7.GetValue()-1]) #((self.spin7.GetValue()/100)*self.trange+self.tmin))
        self.t8.SetLabel('7: %.3f'%self.true_values[self.spin8.GetValue()-1]) #((self.spin8.GetValue()/100)*self.trange+self.tmin))
        self.t9.SetLabel('8: %.3f'%self.true_values[self.spin9.GetValue()-1]) #((self.spin9.GetValue()/100)*self.trange+self.tmin))
        self.t10.SetLabel('9: %.3f'%self.true_values[self.spin10.GetValue()-1]) #((self.spin10.GetValue()/100)*self.trange+self.tmin))
        
    def oncategories(self,event):
        if self.categories.GetValue()>=3: self.spin3.Enable()
        else: self.spin3.Disable()
        if self.categories.GetValue()>=4: self.spin4.Enable()
        else: self.spin4.Disable()
        if self.categories.GetValue()>=5: self.spin5.Enable()
        else: self.spin5.Disable()
        if self.categories.GetValue()>=6: self.spin6.Enable()
        else: self.spin6.Disable()
        if self.categories.GetValue()>=7: self.spin7.Enable()
        else: self.spin7.Disable()
        if self.categories.GetValue()>=8: self.spin8.Enable()
        else: self.spin8.Disable()
        if self.categories.GetValue()>=9: self.spin9.Enable()
        else: self.spin9.Disable()
        if self.categories.GetValue()>=10: self.spin10.Enable()
        else: self.spin10.Disable()
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        categories = []
        categories.append(self.spin2.GetValue())
        if self.categories.GetValue()>=3: categories.append(self.spin3.GetValue())
        if self.categories.GetValue()>=4: categories.append(self.spin4.GetValue())
        if self.categories.GetValue()>=5: categories.append(self.spin5.GetValue())
        if self.categories.GetValue()>=6: categories.append(self.spin6.GetValue())
        if self.categories.GetValue()>=7: categories.append(self.spin7.GetValue())
        if self.categories.GetValue()>=8: categories.append(self.spin8.GetValue())
        if self.categories.GetValue()>=9: categories.append(self.spin9.GetValue())
        if self.categories.GetValue()>=10: categories.append(self.spin10.GetValue())
        if self.choice.GetValue()=='Self':
            frame.object_manager.operation_categorize_point(self.pieces,categories = np.sort(categories),name=False)
            frame.onreview_object(self.pieces)
        else:
            frame.object_manager.operation_categorize_point(self.pieces,categories = np.sort(categories),name=self.name.GetValue())
            frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcropPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Crop point Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'crop_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 30
        htol = 30
        
        wx.StaticText(panel,-1,'Crop X:',(30,60+htol))
        wx.StaticText(panel,-1,'Crop Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Crop Z:',(30,120+htol))
        
        # FS.FloatSpin(panel, -1,(170, 57),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)        
        self.xo = FS.FloatSpin(panel,-1,(50+ltol,57+htol),(90,-1),min_val=frame.object_manager.call_top(pieces).x.min(),max_val=frame.object_manager.call_top(pieces).x.max(),value=frame.object_manager.call_top(pieces).x.min(),digits=3)
        self.yo = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=frame.object_manager.call_top(pieces).y.min(),max_val=frame.object_manager.call_top(pieces).y.max(),value=frame.object_manager.call_top(pieces).y.min(),digits=3)
        self.zo = FS.FloatSpin(panel,-1,(50+ltol,117+htol),(90,-1),min_val=frame.object_manager.call_top(pieces).z.min(),max_val=frame.object_manager.call_top(pieces).z.max(),value=frame.object_manager.call_top(pieces).z.min(),digits=3)
        
        self.xf = FS.FloatSpin(panel,-1,(160+ltol,57+htol),(90,-1),min_val=frame.object_manager.call_top(pieces).x.min(),max_val=frame.object_manager.call_top(pieces).x.max(),value=frame.object_manager.call_top(pieces).x.max(),digits=3)
        self.yf = FS.FloatSpin(panel,-1,(160+ltol,87+htol),(90,-1),min_val=frame.object_manager.call_top(pieces).y.min(),max_val=frame.object_manager.call_top(pieces).y.max(),value=frame.object_manager.call_top(pieces).y.max(),digits=3)
        self.zf = FS.FloatSpin(panel,-1,(160+ltol,117+htol),(90,-1),min_val=frame.object_manager.call_top(pieces).z.min(),max_val=frame.object_manager.call_top(pieces).z.max(),value=frame.object_manager.call_top(pieces).z.max(),digits=3)

        #self.zo.Disable()
        #self.zf.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        initial = (self.xo.GetValue(),self.yo.GetValue(),self.zo.GetValue())
        final   = (self.xf.GetValue(),self.yf.GetValue(),self.zf.GetValue())
        flag = True
        if initial[0]>final[0]: flag = False
        if initial[1]>final[1]: flag = False
        if initial[2]>final[2]: flag = False
        if flag:
            frame.object_manager.operation_crop_point(self.pieces,initial,final,name=self.name.GetValue())
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Negative dimensions. Inital coordinates must be inferior or equal to final.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXduplicatePointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Duplicate point Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'duplicate_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        #blocks = frame.object_manager.call_top(self.pieces).blocks
        #size   = frame.object_manager.call_top(self.pieces).size
        #first  = frame.object_manager.call_top(self.pieces).first
        if frame.object_manager.call_top(self.pieces).null_flag: null = frame.object_manager.call_top(self.pieces).null
        else: null = None
        frame.object_manager.add_point_object(frame.object_manager.call_top(self.pieces).x,frame.object_manager.call_top(self.pieces).y,frame.object_manager.call_top(self.pieces).z,null,self.name.GetValue(),self.pieces[1],frame.object_manager.call(self.pieces).data.data)
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXlineartransformPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Linear transform point Frame",size=(350,255),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'linear_'+pieces[1],(160,30),(150,-1))
        self.choice.Disable()
        
        wx.StaticText(panel,-1,'Minimum:',(30,80))
        wx.StaticText(panel,-1,'Maximum:',(30,110))
        self.minimum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[0]),(90,77),(100,-1))
        self.maximum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[1]),(90,107),(100,-1))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        try:
            mi = np.float(self.minimum.GetValue())
            ma = np.float(self.maximum.GetValue())
            if ma>mi:
                if self.choice.GetValue()=='Self':
                    frame.object_manager.operation_linear_transform_point(self.pieces,mi,ma,name=False)
                    frame.onreview_object(self.pieces)
                else:
                    frame.object_manager.operation_linear_transform_point(self.pieces,mi,ma,self.name.GetValue())
                    frame.update_last_variable_list()
                wx.MessageBox("Operation is finished.","Information")
                self.Destroy()
            else:
                wx.MessageBox("Maximum field must be superior to minimum.","Error")
        except ValueError:
            wx.MessageBox("Error has occured. Check the fields in the minimum and maximum are numbers.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXmirrorDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Mirror data Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'mirror_'+pieces[1],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        if self.choice.GetValue()=='Self':
            frame.object_manager.operation_mirror_data(self.pieces,name=False)
            frame.onreview_object(self.pieces)
        else:
            frame.object_manager.operation_mirror_data(self.pieces,name=self.name.GetValue())
            frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcategorizeDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Categorize data Frame",size=(430,355),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'categorize_'+pieces[1],(160,30),(150,-1))
        self.choice.Disable()
        
        wx.StaticText(panel,-1,'Categories',(30,70))
        self.categories = wx.SpinCtrl(panel,-1,'',(160,67),(150,-1),min=2,max=10,initial=2)
        self.Bind(wx.EVT_SPINCTRL,self.oncategories,id=self.categories.GetId())
        
        tol = 10 
        self.spin2 = wx.SpinCtrl(panel,-1,'',(30+tol,100),(60,-1),min=1,max=99,initial=10)
        self.spin3 = wx.SpinCtrl(panel,-1,'',(100+tol,100),(60,-1),min=1,max=99,initial=20)
        self.spin4 = wx.SpinCtrl(panel,-1,'',(170+tol,100),(60,-1),min=1,max=99,initial=30)
        self.spin5 = wx.SpinCtrl(panel,-1,'',(240+tol,100),(60,-1),min=1,max=99,initial=40)
        
        self.spin6 = wx.SpinCtrl(panel,-1,'',(30+tol,130),(60,-1),min=1,max=99,initial=50)
        self.spin7 = wx.SpinCtrl(panel,-1,'',(100+tol,130),(60,-1),min=1,max=99,initial=60)
        self.spin8 = wx.SpinCtrl(panel,-1,'',(170+tol,130),(60,-1),min=1,max=99,initial=70)
        self.spin9 = wx.SpinCtrl(panel,-1,'',(240+tol,130),(60,-1),min=1,max=99,initial=80)
        
        self.spin10 = wx.SpinCtrl(panel,-1,'',(30+tol,160),(60,-1),min=1,max=99,initial=90)
        
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin2.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin3.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin4.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin5.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin6.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin7.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin8.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin9.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin10.GetId())
        
        self.spin3.Disable()
        self.spin4.Disable()
        self.spin5.Disable()
        self.spin6.Disable()
        self.spin7.Disable()
        self.spin8.Disable()
        self.spin9.Disable()
        self.spin10.Disable()
        
        wx.StaticLine(panel,-1,(320,30),(1,200),style=wx.LI_VERTICAL)
        
        trange = self.trange = frame.object_manager.call(self.pieces).basic_statistics[4]-frame.object_manager.call(self.pieces).basic_statistics[3]
        tmin = self.tmin = frame.object_manager.call(self.pieces).basic_statistics[3]
        ttol=20
        self.true_values = true_values = np.percentile(frame.object_manager.call(self.pieces).data,range(1,99))
        self.t2 = wx.StaticText(panel,-1,'1: %.3f'%true_values[self.spin2.GetValue()-1],(330,30+ttol))
        self.t3 = wx.StaticText(panel,-1,'2: %.3f'%true_values[self.spin3.GetValue()-1],(330,50+ttol))
        self.t4 = wx.StaticText(panel,-1,'3: %.3f'%true_values[self.spin4.GetValue()-1],(330,70+ttol))
        self.t5 = wx.StaticText(panel,-1,'4: %.3f'%true_values[self.spin5.GetValue()-1],(330,90+ttol))
        self.t6 = wx.StaticText(panel,-1,'5: %.3f'%true_values[self.spin6.GetValue()-1],(330,110+ttol))
        self.t7 = wx.StaticText(panel,-1,'6: %.3f'%true_values[self.spin7.GetValue()-1],(330,130+ttol))
        self.t8 = wx.StaticText(panel,-1,'7: %.3f'%true_values[self.spin8.GetValue()-1],(330,150+ttol))
        self.t9 = wx.StaticText(panel,-1,'8: %.3f'%true_values[self.spin9.GetValue()-1],(330,170+ttol))
        self.t10 = wx.StaticText(panel,-1,'9: %.3f'%true_values[self.spin10.GetValue()-1],(330,190+ttol))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,250),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,250),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onspin(self,event):
        self.t2.SetLabel('1: %.3f'%self.true_values[self.spin2.GetValue()-1]) #((self.spin2.GetValue()/100)*self.trange+self.tmin))
        self.t3.SetLabel('2: %.3f'%self.true_values[self.spin3.GetValue()-1]) #((self.spin3.GetValue()/100)*self.trange+self.tmin))
        self.t4.SetLabel('3: %.3f'%self.true_values[self.spin4.GetValue()-1]) #((self.spin4.GetValue()/100)*self.trange+self.tmin))
        self.t5.SetLabel('4: %.3f'%self.true_values[self.spin5.GetValue()-1]) #((self.spin5.GetValue()/100)*self.trange+self.tmin))
        self.t6.SetLabel('5: %.3f'%self.true_values[self.spin6.GetValue()-1]) #((self.spin6.GetValue()/100)*self.trange+self.tmin))
        self.t7.SetLabel('6: %.3f'%self.true_values[self.spin7.GetValue()-1]) #((self.spin7.GetValue()/100)*self.trange+self.tmin))
        self.t8.SetLabel('7: %.3f'%self.true_values[self.spin8.GetValue()-1]) #((self.spin8.GetValue()/100)*self.trange+self.tmin))
        self.t9.SetLabel('8: %.3f'%self.true_values[self.spin9.GetValue()-1]) #((self.spin9.GetValue()/100)*self.trange+self.tmin))
        self.t10.SetLabel('9: %.3f'%self.true_values[self.spin10.GetValue()-1]) #((self.spin10.GetValue()/100)*self.trange+self.tmin))
        
    def oncategories(self,event):
        if self.categories.GetValue()>=3: self.spin3.Enable()
        else: self.spin3.Disable()
        if self.categories.GetValue()>=4: self.spin4.Enable()
        else: self.spin4.Disable()
        if self.categories.GetValue()>=5: self.spin5.Enable()
        else: self.spin5.Disable()
        if self.categories.GetValue()>=6: self.spin6.Enable()
        else: self.spin6.Disable()
        if self.categories.GetValue()>=7: self.spin7.Enable()
        else: self.spin7.Disable()
        if self.categories.GetValue()>=8: self.spin8.Enable()
        else: self.spin8.Disable()
        if self.categories.GetValue()>=9: self.spin9.Enable()
        else: self.spin9.Disable()
        if self.categories.GetValue()>=10: self.spin10.Enable()
        else: self.spin10.Disable()
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        categories = []
        categories.append(self.spin2.GetValue())
        if self.categories.GetValue()>=3: categories.append(self.spin3.GetValue())
        if self.categories.GetValue()>=4: categories.append(self.spin4.GetValue())
        if self.categories.GetValue()>=5: categories.append(self.spin5.GetValue())
        if self.categories.GetValue()>=6: categories.append(self.spin6.GetValue())
        if self.categories.GetValue()>=7: categories.append(self.spin7.GetValue())
        if self.categories.GetValue()>=8: categories.append(self.spin8.GetValue())
        if self.categories.GetValue()>=9: categories.append(self.spin9.GetValue())
        if self.categories.GetValue()>=10: categories.append(self.spin10.GetValue())
        if self.choice.GetValue()=='Self':
            frame.object_manager.operation_categorize_data(self.pieces,categories = np.sort(categories),name=False)
            frame.onreview_object(self.pieces)
        else:
            frame.object_manager.operation_categorize_data(self.pieces,categories = np.sort(categories),name=self.name.GetValue())
            frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXduplicateDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Duplicate data Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'duplicate_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        #blocks = frame.object_manager.call_top(self.pieces).blocks
        #size   = frame.object_manager.call_top(self.pieces).size
        #first  = frame.object_manager.call_top(self.pieces).first
        if frame.object_manager.call_top(self.pieces).null_flag: null = frame.object_manager.call_top(self.pieces).null
        else: null = None
        # null,name,vname,data,dtype,vtype)
        frame.object_manager.add_data_object(null,self.name.GetValue(),self.pieces[1],frame.object_manager.call(self.pieces).data.data,frame.object_manager.call(self.pieces).dtype,frame.object_manager.call(self.pieces).vtype)
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXlineartransformDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Linear transform data Frame",size=(350,255),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'linear_'+pieces[1],(160,30),(150,-1))
        self.choice.Disable()
        
        wx.StaticText(panel,-1,'Minimum:',(30,80))
        wx.StaticText(panel,-1,'Maximum:',(30,110))
        self.minimum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[0]),(90,77),(100,-1))
        self.maximum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[1]),(90,107),(100,-1))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        try:
            mi = np.float(self.minimum.GetValue())
            ma = np.float(self.maximum.GetValue())
            if ma>mi:
                if self.choice.GetValue()=='Self':
                    frame.object_manager.operation_linear_transform_data(self.pieces,mi,ma,name=False)
                    frame.onreview_object(self.pieces)
                else:
                    frame.object_manager.operation_linear_transform_data(self.pieces,mi,ma,self.name.GetValue())
                    frame.update_last_variable_list()
                wx.MessageBox("Operation is finished.","Information")
                self.Destroy()
            else:
                wx.MessageBox("Maximum field must be superior to minimum.","Error")
        except ValueError:
            wx.MessageBox("Error has occured. Check the fields in the minimum and maximum are numbers.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXmirrorSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Mirror surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'mirror_'+pieces[1],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        if self.choice.GetValue()=='Self':
            frame.object_manager.operation_mirror_surf(self.pieces,name=False)
            frame.onreview_object(self.pieces)
        else:
            frame.object_manager.operation_mirror_surf(self.pieces,name=self.name.GetValue())
            frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()

class CTXcategorizeSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Categorize surface Frame",size=(430,355),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'categorize_'+pieces[1],(160,30),(150,-1))
        self.choice.Disable()
        
        wx.StaticText(panel,-1,'Categories',(30,70))
        self.categories = wx.SpinCtrl(panel,-1,'',(160,67),(150,-1),min=2,max=10,initial=2)
        self.Bind(wx.EVT_SPINCTRL,self.oncategories,id=self.categories.GetId())
        
        tol = 10 
        self.spin2 = wx.SpinCtrl(panel,-1,'',(30+tol,100),(60,-1),min=1,max=99,initial=10)
        self.spin3 = wx.SpinCtrl(panel,-1,'',(100+tol,100),(60,-1),min=1,max=99,initial=20)
        self.spin4 = wx.SpinCtrl(panel,-1,'',(170+tol,100),(60,-1),min=1,max=99,initial=30)
        self.spin5 = wx.SpinCtrl(panel,-1,'',(240+tol,100),(60,-1),min=1,max=99,initial=40)
        
        self.spin6 = wx.SpinCtrl(panel,-1,'',(30+tol,130),(60,-1),min=1,max=99,initial=50)
        self.spin7 = wx.SpinCtrl(panel,-1,'',(100+tol,130),(60,-1),min=1,max=99,initial=60)
        self.spin8 = wx.SpinCtrl(panel,-1,'',(170+tol,130),(60,-1),min=1,max=99,initial=70)
        self.spin9 = wx.SpinCtrl(panel,-1,'',(240+tol,130),(60,-1),min=1,max=99,initial=80)
        
        self.spin10 = wx.SpinCtrl(panel,-1,'',(30+tol,160),(60,-1),min=1,max=99,initial=90)
        
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin2.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin3.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin4.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin5.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin6.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin7.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin8.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin9.GetId())
        self.Bind(wx.EVT_SPINCTRL,self.onspin,id=self.spin10.GetId())
        
        self.spin3.Disable()
        self.spin4.Disable()
        self.spin5.Disable()
        self.spin6.Disable()
        self.spin7.Disable()
        self.spin8.Disable()
        self.spin9.Disable()
        self.spin10.Disable()
        
        wx.StaticLine(panel,-1,(320,30),(1,200),style=wx.LI_VERTICAL)
        
        trange = self.trange = frame.object_manager.call(self.pieces).basic_statistics[4]-frame.object_manager.call(self.pieces).basic_statistics[3]
        tmin = self.tmin = frame.object_manager.call(self.pieces).basic_statistics[3]
        ttol=20
        self.true_values = true_values = np.percentile(frame.object_manager.call(self.pieces).data,range(1,99))
        self.t2 = wx.StaticText(panel,-1,'1: %.3f'%true_values[self.spin2.GetValue()-1],(330,30+ttol))
        self.t3 = wx.StaticText(panel,-1,'2: %.3f'%true_values[self.spin3.GetValue()-1],(330,50+ttol))
        self.t4 = wx.StaticText(panel,-1,'3: %.3f'%true_values[self.spin4.GetValue()-1],(330,70+ttol))
        self.t5 = wx.StaticText(panel,-1,'4: %.3f'%true_values[self.spin5.GetValue()-1],(330,90+ttol))
        self.t6 = wx.StaticText(panel,-1,'5: %.3f'%true_values[self.spin6.GetValue()-1],(330,110+ttol))
        self.t7 = wx.StaticText(panel,-1,'6: %.3f'%true_values[self.spin7.GetValue()-1],(330,130+ttol))
        self.t8 = wx.StaticText(panel,-1,'7: %.3f'%true_values[self.spin8.GetValue()-1],(330,150+ttol))
        self.t9 = wx.StaticText(panel,-1,'8: %.3f'%true_values[self.spin9.GetValue()-1],(330,170+ttol))
        self.t10 = wx.StaticText(panel,-1,'9: %.3f'%true_values[self.spin10.GetValue()-1],(330,190+ttol))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,250),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,250),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onspin(self,event):
        self.t2.SetLabel('1: %.3f'%self.true_values[self.spin2.GetValue()-1]) #((self.spin2.GetValue()/100)*self.trange+self.tmin))
        self.t3.SetLabel('2: %.3f'%self.true_values[self.spin3.GetValue()-1]) #((self.spin3.GetValue()/100)*self.trange+self.tmin))
        self.t4.SetLabel('3: %.3f'%self.true_values[self.spin4.GetValue()-1]) #((self.spin4.GetValue()/100)*self.trange+self.tmin))
        self.t5.SetLabel('4: %.3f'%self.true_values[self.spin5.GetValue()-1]) #((self.spin5.GetValue()/100)*self.trange+self.tmin))
        self.t6.SetLabel('5: %.3f'%self.true_values[self.spin6.GetValue()-1]) #((self.spin6.GetValue()/100)*self.trange+self.tmin))
        self.t7.SetLabel('6: %.3f'%self.true_values[self.spin7.GetValue()-1]) #((self.spin7.GetValue()/100)*self.trange+self.tmin))
        self.t8.SetLabel('7: %.3f'%self.true_values[self.spin8.GetValue()-1]) #((self.spin8.GetValue()/100)*self.trange+self.tmin))
        self.t9.SetLabel('8: %.3f'%self.true_values[self.spin9.GetValue()-1]) #((self.spin9.GetValue()/100)*self.trange+self.tmin))
        self.t10.SetLabel('9: %.3f'%self.true_values[self.spin10.GetValue()-1]) #((self.spin10.GetValue()/100)*self.trange+self.tmin))
              
    def oncategories(self,event):
        if self.categories.GetValue()>=3: self.spin3.Enable()
        else: self.spin3.Disable()
        if self.categories.GetValue()>=4: self.spin4.Enable()
        else: self.spin4.Disable()
        if self.categories.GetValue()>=5: self.spin5.Enable()
        else: self.spin5.Disable()
        if self.categories.GetValue()>=6: self.spin6.Enable()
        else: self.spin6.Disable()
        if self.categories.GetValue()>=7: self.spin7.Enable()
        else: self.spin7.Disable()
        if self.categories.GetValue()>=8: self.spin8.Enable()
        else: self.spin8.Disable()
        if self.categories.GetValue()>=9: self.spin9.Enable()
        else: self.spin9.Disable()
        if self.categories.GetValue()>=10: self.spin10.Enable()
        else: self.spin10.Disable()
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        categories = []
        categories.append(self.spin2.GetValue())
        if self.categories.GetValue()>=3: categories.append(self.spin3.GetValue())
        if self.categories.GetValue()>=4: categories.append(self.spin4.GetValue())
        if self.categories.GetValue()>=5: categories.append(self.spin5.GetValue())
        if self.categories.GetValue()>=6: categories.append(self.spin6.GetValue())
        if self.categories.GetValue()>=7: categories.append(self.spin7.GetValue())
        if self.categories.GetValue()>=8: categories.append(self.spin8.GetValue())
        if self.categories.GetValue()>=9: categories.append(self.spin9.GetValue())
        if self.categories.GetValue()>=10: categories.append(self.spin10.GetValue())
        if self.choice.GetValue()=='Self':
            frame.object_manager.operation_categorize_surf(self.pieces,categories = np.sort(categories),name=False)
            frame.onreview_object(self.pieces)
        else:
            frame.object_manager.operation_categorize_surf(self.pieces,categories = np.sort(categories),name=self.name.GetValue())
            frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcropSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Crop surface Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'crop_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 30
        htol = 30
        
        wx.StaticText(panel,-1,'Crop X:',(30,60+htol))
        wx.StaticText(panel,-1,'Crop Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Crop Z:',(30,120+htol))         
        
        self.xo = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=1)
        self.yo = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=1)
        self.zo = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=1)
        
        self.xf = wx.SpinCtrl(panel,-1,'',(160+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=frame.object_manager.call_top(pieces).blocks[0])
        self.yf = wx.SpinCtrl(panel,-1,'',(160+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=frame.object_manager.call_top(pieces).blocks[1])
        self.zf = wx.SpinCtrl(panel,-1,'',(160+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=frame.object_manager.call_top(pieces).blocks[2])

        self.zo.Disable()
        self.zf.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        initial = (self.xo.GetValue(),self.yo.GetValue(),self.zo.GetValue())
        final   = (self.xf.GetValue(),self.yf.GetValue(),self.zf.GetValue())
        flag = True
        if initial[0]>final[0]: flag = False
        if initial[1]>final[1]: flag = False
        if initial[2]>final[2]: flag = False
        if flag:
            frame.object_manager.operation_crop_surf(self.pieces,initial,final,name=self.name.GetValue())
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Negative dimensions. Inital coordinates must be inferior or equal to final.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXduplicateSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Duplicate surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'duplicate_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        blocks = frame.object_manager.call_top(self.pieces).blocks
        size   = frame.object_manager.call_top(self.pieces).size
        first  = frame.object_manager.call_top(self.pieces).first
        if frame.object_manager.call_top(self.pieces).null_flag: null = frame.object_manager.call_top(self.pieces).null
        else: null = None
        frame.object_manager.add_surf_object(blocks,size,first,null,self.name.GetValue(),self.pieces[1],frame.object_manager.call(self.pieces).data.data)
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXlineartransformSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Linear transform surface Frame",size=(350,255),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'linear_'+pieces[1],(160,30),(150,-1))
        self.choice.Disable()
        
        wx.StaticText(panel,-1,'Minimum:',(30,80))
        wx.StaticText(panel,-1,'Maximum:',(30,110))
        self.minimum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[0]),(90,77),(100,-1))
        self.maximum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[1]),(90,107),(100,-1))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        try:
            mi = np.float(self.minimum.GetValue())
            ma = np.float(self.maximum.GetValue())
            if ma>mi:
                if self.choice.GetValue()=='Self':
                    frame.object_manager.operation_linear_transform_surf(self.pieces,mi,ma,name=False)
                    frame.onreview_object(self.pieces)
                else:
                    frame.object_manager.operation_linear_transform_surf(self.pieces,mi,ma,self.name.GetValue())
                    frame.update_last_variable_list()
                wx.MessageBox("Operation is finished.","Information")
                self.Destroy()
            else:
                wx.MessageBox("Maximum field must be superior to minimum.","Error")
        except ValueError:
            wx.MessageBox("Error has occured. Check the fields in the minimum and maximum are numbers.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXpickleMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Pickle mesh Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'pickled_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'X step:',(30,60+htol))
        wx.StaticText(panel,-1,'Y step:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Z step:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=1)
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=1)
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=1)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_pickle_mesh(self.pieces,self.stepx.GetValue(),self.stepy.GetValue(),self.stepz.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXupscaleMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Upscale mesh Frame",size=(350,325),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'upscaled_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'X step:',(30,60+htol))
        wx.StaticText(panel,-1,'Y step:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Z step:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=2)
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=2)
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=2)
        
        wx.StaticText(panel,-1,'Upscale with:',(30,150+htol))
        self.atrib = wx.ComboBox(panel,-1,'mean',(50+ltol,147+htol),(100,-1),choices=['mean','minimum','maximum','p25','p50','p75'],style=wx.CB_READONLY)  
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,220),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,220),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        # related_upscale_mesh(self,selection,name,choice,steps)
        choice = self.atrib.GetValue()
        frame.object_manager.related_upscale_mesh(self.pieces,self.name.GetValue(),choice,(self.stepx.GetValue(),self.stepy.GetValue(),self.stepz.GetValue()))
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXrepeatMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Repeat mesh Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'repeat_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Rep X:',(30,60+htol))
        wx.StaticText(panel,-1,'Rep Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Rep Z:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=2)
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=2)
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=2)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_repeat_mesh(self.pieces,self.stepx.GetValue(),self.stepy.GetValue(),self.stepz.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXexpandMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Expand mesh Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'expand_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'New X:',(30,60+htol))
        wx.StaticText(panel,-1,'New Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'New Z:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0]*1000,initial=frame.object_manager.call_top(pieces).blocks[0])
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1]*1000,initial=frame.object_manager.call_top(pieces).blocks[1])
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2]*1000,initial=frame.object_manager.call_top(pieces).blocks[2])
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_expand_mesh(self.pieces,self.stepx.GetValue(),self.stepy.GetValue(),self.stepz.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXtileMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Tile mesh Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'tile_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Tiles X:',(30,60+htol))
        wx.StaticText(panel,-1,'Tiles Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=100,initial=2) #frame.object_manager.call_top(pieces).blocks[0]
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=100,initial=2) # frame.object_manager.call_top(pieces).blocks[1]
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=100,initial=2) # frame.object_manager.call_top(pieces).blocks[2]
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_tile_mesh(self.pieces,self.stepx.GetValue(),self.stepy.GetValue(),self.stepz.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXtransposeMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Transpose mesh Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'tranpose_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_transpose_mesh(self.pieces,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXshiftMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Shift mesh Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'shift_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Shift X:',(30,60+htol))
        wx.StaticText(panel,-1,'Shift Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Shift Z:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[0],initial=2)
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[1],initial=2)
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[2],initial=2)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_shift_mesh(self.pieces,self.stepx.GetValue(),self.stepy.GetValue(),self.stepz.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXflipxMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Flip X mesh Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'flipx_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_flipx_mesh(self.pieces,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXflipyMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Flip Y mesh Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'flipy_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_flipy_mesh(self.pieces,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXrotateMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Rotate mesh Frame",size=(350,255),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'rotate_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()

        wx.StaticText(panel,-1,'Rotations:',(30,80))
        self.number = wx.SpinCtrl(panel,-1,'',(110,77),(100,-1),min=1,max=3,initial=1)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_rotate_mesh(self.pieces,self.number.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXswapMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Swap axis mesh Frame",size=(350,255),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'swap_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.first = wx.ComboBox(panel,-1,'X',(30,80),(100,-1),choices=['X','Y','Z'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'by this',(150,83))
        self.last = wx.ComboBox(panel,-1,'Y',(200,80),(100,-1),choices=['X','Y','Z'],style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        if self.first.GetValue() != self.last.GetValue():
            frame.object_manager.geometric_swap_mesh(self.pieces,self.first.GetValue(),self.last.GetValue(),self.name.GetValue())
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("You cant swap the same axis.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()

class CTXsplitMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Split mesh Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'split_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        #wx.StaticText(panel,-1,'Shift X:',(30,60+htol))
        #wx.StaticText(panel,-1,'Shift Y:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Shift Z:',(30,120+htol))
        self.rb1 = wx.RadioButton(panel, -1, ' in X', (30, 60+htol), style=wx.RB_GROUP)
        self.rb2 = wx.RadioButton(panel, -1, ' in Y', (30, 90+htol))
        self.rb3 = wx.RadioButton(panel, -1, ' in Z', (30, 120+htol))
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=2)
        #self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=2)
        #self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=2)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        if self.rb1.GetValue(): where='X'
        elif self.rb2.GetValue(): where='Y'
        elif self.rb3.GetValue(): where='Z'
        # TENHO QUE IMPLEMENTAR ISTO MAS O LAST OBJECT E UM PROBLEMA.
        #frame.object_manager.geometric_split_mesh(self.pieces,self.stepx.GetValue(),where,self.name.GetValue())
        # ACABEI POR IMPLEMENTAR DIRECTAMENTE NO GUI
        if where == 'Y':
            if frame.object_manager.call_top(self.pieces).blocks[1]%self.stepx.GetValue()==0:
                ldata = np.hsplit(frame.object_manager.call(self.pieces).data.data,self.stepx.GetValue())
                afirst = frame.object_manager.call_top(self.pieces).first[0]
                asize  = frame.object_manager.call_top(self.pieces).size[0]
                alen = 0
                for i in xrange(len(ldata)):
                    blocks = ldata[i].shape
                    size   = frame.object_manager.call_top(self.pieces).size
                    first  = (frame.object_manager.call_top(self.pieces).first[0],
                              frame.object_manager.call_top(self.pieces).first[1]+alen*size[1]
                              ,frame.object_manager.call_top(self.pieces).first[2])
                    if frame.object_manager.call_top(self.pieces).null_flag: null = frame.object_manager.call_top(self.pieces).null
                    else: null = False
                    name = self.name.GetValue()+'_part'+str(i)
                    vname = self.pieces[1]+'_part'+str(i)
                    alen = alen + ldata[i].shape[1]
                    frame.object_manager.add_mesh_object(blocks,size,first,null,name,vname,ldata[i])
                    frame.update_last_object_list()
                wx.MessageBox("Operation is finished.","Information")
                self.Destroy()
            else:
                wx.MessageBox("The mesh cannot be equally split with that number.","Information")
        elif where == 'X':
            if frame.object_manager.call_top(self.pieces).blocks[0]%self.stepx.GetValue()==0:
                ldata = np.vsplit(frame.object_manager.call(self.pieces).data.data,self.stepx.GetValue())
                afirst = frame.object_manager.call_top(self.pieces).first[1]
                asize  = frame.object_manager.call_top(self.pieces).size[1]
                alen = 0
                for i in xrange(len(ldata)):
                    blocks = ldata[i].shape
                    size   = frame.object_manager.call_top(self.pieces).size
                    first  = (frame.object_manager.call_top(self.pieces).first[0]+alen*size[0],
                              frame.object_manager.call_top(self.pieces).first[1]
                              ,frame.object_manager.call_top(self.pieces).first[2])
                    if frame.object_manager.call_top(self.pieces).null_flag: null = frame.object_manager.call_top(self.pieces).null
                    else: null = False
                    name = self.name.GetValue()+'_part'+str(i)
                    vname = self.pieces[1]+'_part'+str(i)
                    alen = alen + ldata[i].shape[0]
                    frame.object_manager.add_mesh_object(blocks,size,first,null,name,vname,ldata[i])
                    frame.update_last_object_list()
                wx.MessageBox("Operation is finished.","Information")
                self.Destroy()
            else:
                wx.MessageBox("The mesh cannot be equally split with that number.","Information")
        elif where == 'Z':
            if frame.object_manager.call_top(self.pieces).blocks[2]%self.stepx.GetValue()==0:
                ldata = np.dsplit(frame.object_manager.call(self.pieces).data.data,self.stepx.GetValue())
                afirst = frame.object_manager.call_top(self.pieces).first[2]
                asize  = frame.object_manager.call_top(self.pieces).size[2]
                alen = 0
                for i in xrange(len(ldata)):
                    blocks = ldata[i].shape
                    size   = frame.object_manager.call_top(self.pieces).size
                    first  = (frame.object_manager.call_top(self.pieces).first[0],
                              frame.object_manager.call_top(self.pieces).first[1]
                              ,frame.object_manager.call_top(self.pieces).first[2]+alen*size[2])
                    if frame.object_manager.call_top(self.pieces).null_flag: null = frame.object_manager.call_top(self.pieces).null
                    else: null = False
                    name = self.name.GetValue()+'_part'+str(i)
                    vname = self.pieces[1]+'_part'+str(i)
                    alen = alen + ldata[i].shape[2]
                    frame.object_manager.add_mesh_object(blocks,size,first,null,name,vname,ldata[i])
                    frame.update_last_object_list()
                wx.MessageBox("Operation is finished.","Information")
                self.Destroy()
            else:
                wx.MessageBox("The mesh cannot be equally split with that number.","Information")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXpadMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Pad mesh Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'pad_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()

        wx.StaticText(panel,-1,'Mode:',(30,60))
        choices = ['mean','median','minimum','maximum','reflect','symmetric']
        self.mode = wx.ComboBox(panel,-1,'mean',(90,57),(90,-1),choices = choices,style=wx.CB_READONLY)
        self.reflect_type = wx.ComboBox(panel,-1,'even',(190,57),(70,-1),choices = ['even','odd'],style=wx.CB_READONLY)        
        
        ltol = 30
        htol = 50
        
        wx.StaticText(panel,-1,'Edges X:',(30,60+htol))
        wx.StaticText(panel,-1,'Edges Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Edges Z:',(30,120+htol))         
        
        self.xo = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[0],initial=1)
        self.yo = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[1],initial=1)
        self.zo = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[2],initial=1)
        
        self.xf = wx.SpinCtrl(panel,-1,'',(160+ltol,57+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[0],initial=1)
        self.yf = wx.SpinCtrl(panel,-1,'',(160+ltol,87+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[1],initial=1)
        self.zf = wx.SpinCtrl(panel,-1,'',(160+ltol,117+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[2],initial=1)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        pad_tuple = ((self.xo.GetValue(),self.xf.GetValue()),(self.yo.GetValue(),self.yf.GetValue()),(self.zo.GetValue(),self.zf.GetValue()))
        frame.object_manager.geometric_pad_mesh(self.pieces,pad_tuple,self.mode.GetValue(),self.name.GetValue(),self.reflect_type.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXtranslationMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Translation mesh Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'Self',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'crop_'+pieces[0],(160,30),(150,-1))
        self.name.Disable()
        self.choice.Disable()
        
        ltol = 30
        htol = 30
        
        wx.StaticText(panel,-1,'Size X:',(30,60+htol))
        wx.StaticText(panel,-1,'Size Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Size Z:',(30,120+htol))
        wx.StaticText(panel,-1,'First X:',(190,60+htol))
        wx.StaticText(panel,-1,'First Y:',(190,90+htol)) 
        wx.StaticText(panel,-1,'First Z:',(190,120+htol))
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(50+ltol,57+htol),(90,-1),min_val=1,max_val=100000000,value = frame.object_manager.call_top(self.pieces).size[0],digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(50+ltol,87+htol),(90,-1),min_val=1,max_val=100000000,value = frame.object_manager.call_top(self.pieces).size[1],digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(50+ltol,117+htol),(90,-1),min_val=1,max_val=100000000,value = frame.object_manager.call_top(self.pieces).size[2],digits=3)
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(220+ltol,57+htol),(90,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call_top(self.pieces).first[0],digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(220+ltol,87+htol),(90,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call_top(self.pieces).first[1],digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(220+ltol,117+htol),(90,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call_top(self.pieces).first[2],digits=3)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        new_size = (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
        new_first   = (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
        frame.object_manager.call_top(self.pieces).translation(new_size,new_first)
        frame.onreview_object(self.pieces)
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXtranslationSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Translation surface Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'Self',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'crop_'+pieces[0],(160,30),(150,-1))
        self.name.Disable()
        self.choice.Disable()
        
        ltol = 30
        htol = 30
        
        wx.StaticText(panel,-1,'Size X:',(30,60+htol))
        wx.StaticText(panel,-1,'Size Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Size Z:',(30,120+htol))
        wx.StaticText(panel,-1,'First X:',(190,60+htol))
        wx.StaticText(panel,-1,'First Y:',(190,90+htol)) 
        wx.StaticText(panel,-1,'First Z:',(190,120+htol))
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(50+ltol,57+htol),(90,-1),min_val=1,max_val=100000000,value = frame.object_manager.call_top(self.pieces).size[0],digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(50+ltol,87+htol),(90,-1),min_val=1,max_val=100000000,value = frame.object_manager.call_top(self.pieces).size[1],digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(50+ltol,117+htol),(90,-1),min_val=1,max_val=100000000,value = frame.object_manager.call_top(self.pieces).size[2],digits=3)
        self.size_in_z.Disable()
        
        self.first_in_x   = FS.FloatSpin(panel, -1,(220+ltol,57+htol),(90,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call_top(self.pieces).first[0],digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(220+ltol,87+htol),(90,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call_top(self.pieces).first[1],digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(220+ltol,117+htol),(90,-1),min_val=-100000000,max_val=100000000,value = frame.object_manager.call_top(self.pieces).first[2],digits=3)
        self.first_in_z.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        new_size = (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
        new_first   = (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
        frame.object_manager.call_top(self.pieces).translation(new_size,new_first)
        frame.onreview_object(self.pieces)
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXtranslationPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Translation point Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'Self',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'crop_'+pieces[0],(160,30),(150,-1))
        self.name.Disable()
        self.choice.Disable()
        
        ltol = 30
        htol = 30
        
        wx.StaticText(panel,-1,'Size X:',(30,60+htol))
        wx.StaticText(panel,-1,'Size Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Size Z:',(30,120+htol))
        wx.StaticText(panel,-1,'First X:',(190,60+htol))
        wx.StaticText(panel,-1,'First Y:',(190,90+htol)) 
        wx.StaticText(panel,-1,'First Z:',(190,120+htol))
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(50+ltol,57+htol),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(50+ltol,87+htol),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(50+ltol,117+htol),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_x.Disable()        
        self.size_in_y.Disable()
        self.size_in_z.Disable()
        
        self.first_in_x   = FS.FloatSpin(panel, -1,(220+ltol,57+htol),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(220+ltol,87+htol),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(220+ltol,117+htol),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        #self.first_in_z.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        #new_size = (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
        new_const   = (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
        frame.object_manager.call_top(self.pieces).translation(new_const)
        frame.onreview_object(self.pieces)
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXpicklePointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Pickle point Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'pickled_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Step:',(30,60+htol))
        wx.StaticText(panel,-1,'N step:',(30,90+htol)) 
        wx.StaticText(panel,-1,'N step:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).x.shape[0],initial=1)
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).x.shape[0],initial=1)
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).x.shape[0],initial=1)
        
        self.stepy.Disable()
        self.stepz.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_pickle_point(self.pieces,self.stepx.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXrepeatPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Repeat point Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'repeat_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Rep.:',(30,60+htol))
        wx.StaticText(panel,-1,'Rep N:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Rep N:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).x.shape[0],initial=2)
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).x.shape[0],initial=2)
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).x.shape[0],initial=2)
        self.stepy.Disable()        
        self.stepz.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_repeat_point(self.pieces,self.stepx.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
        
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXflipxPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Flip X point Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'flipx_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_flipx_point(self.pieces,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXflipyPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Flip Y point Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'flipy_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_flipy_point(self.pieces,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXflipzPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Flip Z point Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'flipz_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_flipz_point(self.pieces,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXpickleSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Pickle surface Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'pickled_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'X step:',(30,60+htol))
        wx.StaticText(panel,-1,'Y step:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Z step:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=1)
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=1)
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=1)
        self.stepz.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_pickle_surf(self.pieces,self.stepx.GetValue(),self.stepy.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXrepeatSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Repeat surface Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'repeat_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Rep X:',(30,60+htol))
        wx.StaticText(panel,-1,'Rep Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Rep Z:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=2)
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=2)
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=2)
        self.stepz.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_repeat_surf(self.pieces,self.stepx.GetValue(),self.stepy.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXexpandSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Expand surface Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'expand_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'New X:',(30,60+htol))
        wx.StaticText(panel,-1,'New Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'New Z:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0]*1000,initial=frame.object_manager.call_top(pieces).blocks[0])
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1]*1000,initial=frame.object_manager.call_top(pieces).blocks[1])
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2]*1000,initial=frame.object_manager.call_top(pieces).blocks[2])
        self.stepz.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_expand_surf(self.pieces,self.stepx.GetValue(),self.stepy.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXtileSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Tile surface Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'tile_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Tiles X:',(30,60+htol))
        wx.StaticText(panel,-1,'Tiles Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=2)
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=2)
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=2)
        self.stepz.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_tile_surf(self.pieces,self.stepx.GetValue(),self.stepy.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXtransposeSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Transpose surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'tranpose_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_transpose_surf(self.pieces,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXshiftSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Shift surface Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'shift_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Shift X:',(30,60+htol))
        wx.StaticText(panel,-1,'Shift Y:',(30,90+htol)) 
        wx.StaticText(panel,-1,'Shift Z:',(30,120+htol)) 
        
        self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[0],initial=2)
        self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[1],initial=2)
        self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=0,max=frame.object_manager.call_top(pieces).blocks[2],initial=2)
        self.stepz.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_shift_surf(self.pieces,self.stepx.GetValue(),self.stepy.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXflipxSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Flip X surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'flipx_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_flipx_surf(self.pieces,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXflipySurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Flip Y surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'flipy_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_flipy_surf(self.pieces,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXrotateSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Rotate surface Frame",size=(350,255),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'rotate_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()

        wx.StaticText(panel,-1,'Rotations:',(30,80))
        self.number = wx.SpinCtrl(panel,-1,'',(110,77),(100,-1),min=1,max=3,initial=1)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.geometric_rotate_surf(self.pieces,self.number.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXswapSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Swap axis surface Frame",size=(350,255),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'swap_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        self.first = wx.ComboBox(panel,-1,'X',(30,80),(100,-1),choices=['X','Y'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'by this',(150,83))
        self.last = wx.ComboBox(panel,-1,'Y',(200,80),(100,-1),choices=['X','Y'],style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,150),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        if self.first.GetValue() != self.last.GetValue():
            frame.object_manager.geometric_swap_surf(self.pieces,self.first.GetValue(),self.last.GetValue(),self.name.GetValue())
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("You cant swap the same axis.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXconstantcalculatorMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Mesh constant calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Ccalc_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Constant:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'add',(50+ltol,57+htol),(90,-1),choices = ['add','subtract','multiply','divide'],style=wx.CB_READONLY)
        self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        #self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=2)
        #self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=2)
        #self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=2)
        #self.stepz.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.calculator_constant(self.pieces,self.operation.GetValue(),self.constant.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXobjectcalculatorMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Mesh object calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Ocalc_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Object:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'add',(50+ltol,57+htol),(90,-1),choices = ['add','subtract','multiply','divide'],style=wx.CB_READONLY)
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,87+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_variable_names(),style=wx.CB_READONLY)
        #self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())

    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        selection2 = [self.object.GetValue(),self.variable.GetValue()]
        frame.object_manager.calculator_object(self.pieces,self.operation.GetValue(),selection2,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXconstantcalculatorPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Point constant calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Ccalc_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Constant:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'add',(50+ltol,57+htol),(90,-1),choices = ['add','subtract','multiply','divide'],style=wx.CB_READONLY)
        self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        #self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=2)
        #self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=2)
        #self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=2)
        #self.stepz.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.calculator_constant(self.pieces,self.operation.GetValue(),self.constant.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXconstantcalculatorDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Data constant calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Ccalc_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Constant:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'add',(50+ltol,57+htol),(90,-1),choices = ['add','subtract','multiply','divide'],style=wx.CB_READONLY)
        self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        #self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=2)
        #self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=2)
        #self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=2)
        #self.stepz.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.calculator_constant(self.pieces,self.operation.GetValue(),self.constant.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXobjectcalculatorPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Point object calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Ocalc_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Object:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'add',(50+ltol,57+htol),(90,-1),choices = ['add','subtract','multiply','divide'],style=wx.CB_READONLY)
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,87+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_variable_names(),style=wx.CB_READONLY)
        #self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())

    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        selection2 = [self.object.GetValue(),self.variable.GetValue()]
        frame.object_manager.calculator_object(self.pieces,self.operation.GetValue(),selection2,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXobjectcalculatorDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Data object calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Ocalc_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Object:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'add',(50+ltol,57+htol),(90,-1),choices = ['add','subtract','multiply','divide'],style=wx.CB_READONLY)
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,87+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_variable_names(),style=wx.CB_READONLY)
        #self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())

    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        selection2 = [self.object.GetValue(),self.variable.GetValue()]
        frame.object_manager.calculator_object(self.pieces,self.operation.GetValue(),selection2,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXconstantcalculatorSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Surface constant calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Ccalc_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Constant:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'add',(50+ltol,57+htol),(90,-1),choices = ['add','subtract','multiply','divide'],style=wx.CB_READONLY)
        self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        #self.stepx = wx.SpinCtrl(panel,-1,'',(50+ltol,57+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[0],initial=2)
        #self.stepy = wx.SpinCtrl(panel,-1,'',(50+ltol,87+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[1],initial=2)
        #self.stepz = wx.SpinCtrl(panel,-1,'',(50+ltol,117+htol),(90,-1),min=1,max=frame.object_manager.call_top(pieces).blocks[2],initial=2)
        #self.stepz.Disable()        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.calculator_constant(self.pieces,self.operation.GetValue(),self.constant.GetValue(),self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXobjectcalculatorSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Surface object calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Ocalc_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Object:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'add',(50+ltol,57+htol),(90,-1),choices = ['add','subtract','multiply','divide'],style=wx.CB_READONLY)
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,87+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_variable_names(),style=wx.CB_READONLY)
        #self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())

    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        selection2 = [self.object.GetValue(),self.variable.GetValue()]
        frame.object_manager.calculator_object(self.pieces,self.operation.GetValue(),selection2,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXglobalcalculatorMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Mesh global calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        #self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        #self.name = wx.TextCtrl(panel,-1,'Ccalc_'+pieces[0],(160,30),(150,-1))
        #self.choice.Disable()
        wx.StaticText(panel,-1,'No output',(30,30))
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Result:',(30,90+htol)) 
        self.result = wx.StaticText(panel,-1,'None',(50+ltol,90+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'sum',(50+ltol,57+htol),(90,-1),choices = ['sum','product','stdeviation'],style=wx.CB_READONLY)
               
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        result = frame.object_manager.calculator_global(self.pieces,self.operation.GetValue())
        self.result.SetLabel(str(result))
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXglobalcalculatorSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Surface global calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        #self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        #self.name = wx.TextCtrl(panel,-1,'Ccalc_'+pieces[0],(160,30),(150,-1))
        #self.choice.Disable()
        wx.StaticText(panel,-1,'No output',(30,30))
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Result:',(30,90+htol)) 
        self.result = wx.StaticText(panel,-1,'None',(50+ltol,90+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'sum',(50+ltol,57+htol),(90,-1),choices = ['sum','product','stdeviation'],style=wx.CB_READONLY)
               
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        result = frame.object_manager.calculator_global(self.pieces,self.operation.GetValue())
        self.result.SetLabel(str(result))
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXglobalcalculatorPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Point global calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        #self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        #self.name = wx.TextCtrl(panel,-1,'Ccalc_'+pieces[0],(160,30),(150,-1))
        #self.choice.Disable()
        wx.StaticText(panel,-1,'No output',(30,30))
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Result:',(30,90+htol)) 
        self.result = wx.StaticText(panel,-1,'None',(50+ltol,90+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'sum',(50+ltol,57+htol),(90,-1),choices = ['sum','product','stdeviation'],style=wx.CB_READONLY)
               
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        result = frame.object_manager.calculator_global(self.pieces,self.operation.GetValue())
        self.result.SetLabel(str(result))
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXglobalcalculatorDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Data global calculator Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        #self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        #self.name = wx.TextCtrl(panel,-1,'Ccalc_'+pieces[0],(160,30),(150,-1))
        #self.choice.Disable()
        wx.StaticText(panel,-1,'No output',(30,30))
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Operation:',(30,60+htol))
        wx.StaticText(panel,-1,'Result:',(30,90+htol)) 
        self.result = wx.StaticText(panel,-1,'None',(50+ltol,90+htol)) 
        
        self.operation = wx.ComboBox(panel,1,'sum',(50+ltol,57+htol),(90,-1),choices = ['sum','product','stdeviation'],style=wx.CB_READONLY)
               
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        result = frame.object_manager.calculator_global(self.pieces,self.operation.GetValue())
        self.result.SetLabel(str(result))
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXjoinMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Mesh join Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Join_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Axis:',(30,60+htol))
        wx.StaticText(panel,-1,'Object:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol))
        
        self.compatible = compatible = self.check_what_goes()
        self.axis = wx.ComboBox(panel,1,'X',(50+ltol,57+htol),(90,-1),choices = ['X','Y','Z'],style=wx.CB_READONLY)
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,87+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_variable_names(),style=wx.CB_READONLY)
        #self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives

    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        selection2 = [self.object.GetValue(),self.variable.GetValue()]
        flag = False
        if self.axis.GetValue()=='X':
            if frame.object_manager.call_top(self.pieces).blocks[1]==frame.object_manager.call_top(selection2).blocks[1] and frame.object_manager.call_top(self.pieces).blocks[2]==frame.object_manager.call_top(selection2).blocks[2]: flag = True
        elif self.axis.GetValue()=='Y':
            if frame.object_manager.call_top(self.pieces).blocks[0]==frame.object_manager.call_top(selection2).blocks[0] and frame.object_manager.call_top(self.pieces).blocks[2]==frame.object_manager.call_top(selection2).blocks[2]: flag = True
        elif self.axis.GetValue()=='Z':
            if frame.object_manager.call_top(self.pieces).blocks[1]==frame.object_manager.call_top(selection2).blocks[1] and frame.object_manager.call_top(self.pieces).blocks[0]==frame.object_manager.call_top(selection2).blocks[0]: flag = True
        if flag: 
            frame.object_manager.manipulate_join(self.pieces,self.axis.GetValue(),selection2,self.name.GetValue())
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Object not compatible for the chosen axis.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXjoinSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Surface join Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Join_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Axis:',(30,60+htol))
        wx.StaticText(panel,-1,'Object:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol))
        
        self.compatible = compatible = self.check_what_goes()
        self.axis = wx.ComboBox(panel,1,'X',(50+ltol,57+htol),(90,-1),choices = ['X','Y'],style=wx.CB_READONLY)
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,87+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_variable_names(),style=wx.CB_READONLY)
        #self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def check_what_goes(self):
        inside = ['surf']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives

    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        selection2 = [self.object.GetValue(),self.variable.GetValue()]
        flag = False
        if self.axis.GetValue()=='X':
            if frame.object_manager.call_top(self.pieces).blocks[1]==frame.object_manager.call_top(selection2).blocks[1] and frame.object_manager.call_top(self.pieces).blocks[2]==frame.object_manager.call_top(selection2).blocks[2]: flag = True
        elif self.axis.GetValue()=='Y':
            if frame.object_manager.call_top(self.pieces).blocks[0]==frame.object_manager.call_top(selection2).blocks[0] and frame.object_manager.call_top(self.pieces).blocks[2]==frame.object_manager.call_top(selection2).blocks[2]: flag = True
        elif self.axis.GetValue()=='Z':
            if frame.object_manager.call_top(self.pieces).blocks[1]==frame.object_manager.call_top(selection2).blocks[1] and frame.object_manager.call_top(self.pieces).blocks[0]==frame.object_manager.call_top(selection2).blocks[0]: flag = True
        if flag: 
            frame.object_manager.manipulate_join(self.pieces,self.axis.GetValue(),selection2,self.name.GetValue())
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Object not compatible for the chosen axis.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXjoinPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Point join Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Join_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Axis:',(30,60+htol))
        wx.StaticText(panel,-1,'Object:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol))
        
        self.compatible = compatible = self.check_what_goes()
        self.axis = wx.ComboBox(panel,1,'X',(50+ltol,57+htol),(90,-1),choices = ['X'],style=wx.CB_READONLY)
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,87+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_variable_names(),style=wx.CB_READONLY)
        #self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def check_what_goes(self):
        inside = ['point']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives

    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        selection2 = [self.object.GetValue(),self.variable.GetValue()]
        flag = False
        #if self.axis.GetValue()=='X':
        #    if frame.object_manager.call_top(self.pieces).x.shape[0]==frame.object_manager.call_top(selection2).x.shape[0]: flag = True
        flag = True
        if flag: 
            frame.object_manager.manipulate_join(self.pieces,self.axis.GetValue(),selection2,self.name.GetValue())
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Object not compatible for the chosen axis.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXjoinDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Data join Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'Join_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'Axis:',(30,60+htol))
        wx.StaticText(panel,-1,'Object:',(30,90+htol)) 
        #wx.StaticText(panel,-1,'Tiles Z:',(30,120+htol))
        
        self.compatible = compatible = self.check_what_goes()
        self.axis = wx.ComboBox(panel,1,'X',(50+ltol,57+htol),(90,-1),choices = ['X'],style=wx.CB_READONLY)
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,87+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        if frame.object_manager.call(self.pieces).vtype!='string':        
            self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_variable_names(),style=wx.CB_READONLY)
        else:
            if len(frame.object_manager.object_list[self.object.GetValue()].get_string_variable_names())>0:
                self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_string_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_string_variable_names(),style=wx.CB_READONLY)
            else:
                self.variable = wx.ComboBox(panel,-1,'None exist',(220,87+htol),(90,-1),choices = ['None exist'],style=wx.CB_READONLY)
                self.variable.Disable()
        #self.constant  = FS.FloatSpin(panel,-1,(50+ltol,87+htol),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def check_what_goes(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives

    def onobjectcombo(self,event):
        self.variable.Clear()
        if frame.object_manager.call(self.pieces).vtype!='string':  
            self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
            self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        else:
            self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_string_variable_names())
            if len(frame.object_manager.object_list[self.object.GetValue()].get_string_variable_names())>0:
                self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_string_variable_names()[0])
                self.variable.Enable()
            else:
                self.variable.Disable()
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        selection2 = [self.object.GetValue(),self.variable.GetValue()]
        flag = False
        #if self.axis.GetValue()=='X':
        #    if frame.object_manager.call_top(self.pieces).x.shape[0]==frame.object_manager.call_top(selection2).x.shape[0]: flag = True
        flag = True
        if flag: 
            frame.object_manager.manipulate_join(self.pieces,self.axis.GetValue(),selection2,self.name.GetValue())
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Object not compatible for the chosen axis.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcopyMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Copy to mesh Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Copy to:',(30,33))
        self.choice = wx.ComboBox(panel,-1,compatible[0],(160,30),(150,-1),choices=compatible,style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
            
    def onapply(self,event):
        frame.object_manager.copy(self.pieces,[self.choice.GetValue(),self.pieces[1]])
        frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcutMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Cut to mesh Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Copy to:',(30,33))
        self.choice = wx.ComboBox(panel,-1,compatible[0],(160,30),(150,-1),choices=compatible,style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
            
    def onapply(self,event):
        frame.object_manager.copy(self.pieces,[self.choice.GetValue()])
        frame.update_last_variable_list()
        #frame.onreview_object([self.choice.GetValue(),self.pieces[1]])
        frame.on_delete_object(self.pieces)
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcopySurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Copy to surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Copy to:',(30,33))
        self.choice = wx.ComboBox(panel,-1,compatible[0],(160,30),(150,-1),choices=compatible,style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
            
    def onapply(self,event):
        frame.object_manager.copy(self.pieces,[self.choice.GetValue(),self.pieces[1]])
        frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcutSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Cut to surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Copy to:',(30,33))
        self.choice = wx.ComboBox(panel,-1,compatible[0],(160,30),(150,-1),choices=compatible,style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
            
    def onapply(self,event):
        frame.object_manager.copy(self.pieces,[self.choice.GetValue()])
        frame.update_last_variable_list()
        #frame.onreview_object([self.choice.GetValue(),self.pieces[1]])
        frame.on_delete_object(self.pieces)
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcopyPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Copy to point Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Copy to:',(30,33))
        self.choice = wx.ComboBox(panel,-1,compatible[0],(160,30),(150,-1),choices=compatible,style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
            
    def onapply(self,event):
        frame.object_manager.copy(self.pieces,[self.choice.GetValue(),self.pieces[1]])
        frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcutPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Cut to point Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Copy to:',(30,33))
        self.choice = wx.ComboBox(panel,-1,compatible[0],(160,30),(150,-1),choices=compatible,style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
            
    def onapply(self,event):
        frame.object_manager.copy(self.pieces,[self.choice.GetValue()])
        frame.update_last_variable_list()
        #frame.onreview_object([self.choice.GetValue(),self.pieces[1]])
        frame.on_delete_object(self.pieces)
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcopyDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Copy to data Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Copy to:',(30,33))
        self.choice = wx.ComboBox(panel,-1,compatible[0],(160,30),(150,-1),choices=compatible,style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
            
    def onapply(self,event):
        if frame.object_manager.object_type[self.choice.GetValue()]=='point' and frame.object_manager.call(self.pieces).vtype=='string':
            wx.MessageBox("Cant copy a string variable to a point object.","Error")
        else:
            frame.object_manager.copy(self.pieces,[self.choice.GetValue()])
            frame.update_last_variable_list()
            #frame.onreview_object([self.choice.GetValue(),self.pieces[1]])
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXcutDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Cut to data Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Copy to:',(30,33))
        self.choice = wx.ComboBox(panel,-1,compatible[0],(160,30),(150,-1),choices=compatible,style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
            
    def onapply(self,event):
        if frame.object_manager.object_type[self.choice.GetValue()]=='point' and frame.object_manager.call(self.pieces).vtype=='string':
            wx.MessageBox("Cant copy a string variable to a point object.","Error")
        else:
            frame.object_manager.copy(self.pieces,[self.choice.GetValue()])
            frame.update_last_variable_list()
            #frame.onreview_object([self.choice.GetValue(),self.pieces[1]])
            frame.on_delete_object(self.pieces)
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXaboveorbelowSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Above or below surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Mesh:',(30,33))
        wx.StaticText(panel,-1,'Method:',(30,63))
        wx.StaticText(panel,-1,'Constant:',(190,63))
        compatible = self.check_what_goes()
        self.choice = wx.ComboBox(panel,-1,compatible[0],(90,30),(90,-1),choices=compatible,style=wx.CB_READONLY)
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.choice.GetValue()].get_variable_names()[0],(190,30),(90,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        self.method = wx.ComboBox(panel,-1,'Above',(90,60),(90,-1),choices=['Above','Below'],style=wx.CB_READONLY)
        self.constant = FS.FloatSpin(panel,-1,(240,60),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onchoice(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[self.pieces[0]].blocks[0]-frame.object_manager.object_list[i].blocks[0]==0 and frame.object_manager.object_list[self.pieces[0]].blocks[1]-frame.object_manager.object_list[i].blocks[1]==0:
                    what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        frame.object_manager.related_above_or_below_surface(self.pieces,[self.choice.GetValue(),self.variable.GetValue()],self.method.GetValue(),self.constant.GetValue())
        frame.onreview_object([self.choice.GetValue(),self.variable.GetValue()])
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXinbetweenSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"In between surface Frame",size=(350,265),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Mesh:',(30,33))
        wx.StaticText(panel,-1,'Second:',(30,63))
        wx.StaticText(panel,-1,'Constant:',(190,93))
        wx.StaticText(panel,-1,'Method:',(30,123))
        compatible = self.check_what_goes()
        compatible2 = self.check_what_goes2()
        self.choice = wx.ComboBox(panel,-1,compatible[0],(90,30),(90,-1),choices=compatible,style=wx.CB_READONLY)
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.choice.GetValue()].get_variable_names()[0],(190,30),(90,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        self.method = wx.ComboBox(panel,-1,'Inside',(90,120),(90,-1),choices=['Inside','Outside'],style=wx.CB_READONLY)
        self.choice2 = wx.ComboBox(panel,-1,compatible2[0],(90,60),(90,-1),choices=compatible2,style=wx.CB_READONLY)
        self.variable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.choice2.GetValue()].get_variable_names()[0],(190,60),(90,-1),choices=frame.object_manager.object_list[self.choice2.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        self.constant = FS.FloatSpin(panel,-1,(240,90),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,160),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,160),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onchoice(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0])
        
    def onchoice2(self,event):
        self.variable2.Clear()
        self.variable2.AppendItems(frame.object_manager.object_list[self.choice2.GetValue()].get_numeric_variable_names())
        self.variable2.SetValue(frame.object_manager.object_list[self.choice2.GetValue()].get_numeric_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[self.pieces[0]].blocks[0]-frame.object_manager.object_list[i].blocks[0]==0 and frame.object_manager.object_list[self.pieces[0]].blocks[1]-frame.object_manager.object_list[i].blocks[1]==0:
                    what_gives.append(i)
        return what_gives
        
    def check_what_goes2(self):
        inside = ['surf']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[self.pieces[0]].blocks[0]-frame.object_manager.object_list[i].blocks[0]==0 and frame.object_manager.object_list[self.pieces[0]].blocks[1]-frame.object_manager.object_list[i].blocks[1]==0:
                    what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        frame.object_manager.related_in_between_surface(self.pieces,[self.choice.GetValue(),self.variable.GetValue()],[self.choice2.GetValue(),self.variable2.GetValue()],self.method.GetValue(),self.constant.GetValue())
        frame.onreview_object([self.choice.GetValue(),self.variable.GetValue()])
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXflattenSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Flatten with surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Mesh:',(30,33))
        wx.StaticText(panel,-1,'Method:',(30,63))
        #wx.StaticText(panel,-1,'Constant:',(190,63))
        compatible = self.check_what_goes()
        self.choice = wx.ComboBox(panel,-1,compatible[0],(90,30),(90,-1),choices=compatible,style=wx.CB_READONLY)
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.choice.GetValue()].get_variable_names()[0],(190,30),(90,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        #self.method = wx.ComboBox(panel,-1,'Above',(90,60),(90,-1),choices=['Above','Below'],style=wx.CB_READONLY)
        self.name = wx.TextCtrl(panel,-1,'flatten_'+pieces[0],(90,60),(150,-1))
        #self.constant = FS.FloatSpin(panel,-1,(240,60),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onchoice(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[self.pieces[0]].blocks[0]-frame.object_manager.object_list[i].blocks[0]==0 and frame.object_manager.object_list[self.pieces[0]].blocks[1]-frame.object_manager.object_list[i].blocks[1]==0:
                    what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        frame.object_manager.related_flatten_surface(self.pieces,[self.choice.GetValue(),self.variable.GetValue()],self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXmap2SurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Map to surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Mesh:',(30,33))
        #wx.StaticText(panel,-1,'Method:',(30,63))
        #wx.StaticText(panel,-1,'Constant:',(190,63))
        compatible = self.check_what_goes()
        self.choice = wx.ComboBox(panel,-1,compatible[0],(90,30),(90,-1),choices=compatible,style=wx.CB_READONLY)
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.choice.GetValue()].get_variable_names()[0],(190,30),(90,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        #self.method = wx.ComboBox(panel,-1,'Above',(90,60),(90,-1),choices=['Above','Below'],style=wx.CB_READONLY)
        self.map_flag = wx.CheckBox(panel,-1,'  Map mesh to surface',(30,63))
        self.map_flag.SetValue(frame.object_manager.call(pieces).map_flag)
        #self.name = wx.TextCtrl(panel,-1,'flatten_'+pieces[0],(90,60),(150,-1))
        #self.constant = FS.FloatSpin(panel,-1,(240,60),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onchoice(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[self.pieces[0]].blocks[0]-frame.object_manager.object_list[i].blocks[0]==0 and frame.object_manager.object_list[self.pieces[0]].blocks[1]-frame.object_manager.object_list[i].blocks[1]==0:
                    what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        frame.object_manager.call(self.pieces).map_flag = self.map_flag.GetValue()
        if self.map_flag.GetValue():
            frame.object_manager.call(self.pieces).map_variable = frame.object_manager.call([self.choice.GetValue(),self.variable.GetValue()]).data[:,:,0]
        #frame.object_manager.related_flatten_surface(self.pieces,[self.choice.GetValue(),self.variable.GetValue()],self.name.GetValue())
        #frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXflattenpointSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Flatten point with surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Point:',(30,33))
        wx.StaticText(panel,-1,'Method:',(30,63))
        #wx.StaticText(panel,-1,'Constant:',(190,63))
        compatible = self.check_what_goes()
        self.choice = wx.ComboBox(panel,-1,compatible[0],(90,30),(90,-1),choices=compatible,style=wx.CB_READONLY)
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.choice.GetValue()].get_variable_names()[0],(190,30),(90,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        #self.method = wx.ComboBox(panel,-1,'Above',(90,60),(90,-1),choices=['Above','Below'],style=wx.CB_READONLY)
        self.name = wx.TextCtrl(panel,-1,'flatten_'+pieces[0],(90,60),(150,-1))
        #self.constant = FS.FloatSpin(panel,-1,(240,60),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onchoice(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['point']
        what_gives = []
        selection = self.pieces
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                selection2 = [i,'any']
                x = frame.object_manager.call_top(selection2).x
                y = frame.object_manager.call_top(selection2).y
                z = frame.object_manager.call_top(selection2).z
                ind = np.where((x>=frame.object_manager.call_top(selection).first[0]) & (x<=frame.object_manager.call_top(selection).first[0]+frame.object_manager.call_top(selection).size[0]*frame.object_manager.call_top(selection).blocks[0]) & (y>=frame.object_manager.call_top(selection).first[1]) & (y<=frame.object_manager.call_top(selection).first[1]+frame.object_manager.call_top(selection).size[1]*frame.object_manager.call_top(selection).blocks[1]))
                if len(ind[0])>0:                
                    what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        frame.object_manager.related_flatten_point_surface(self.pieces,[self.choice.GetValue(),self.variable.GetValue()],self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXunflattenpointSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"unFlatten point with surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Point:',(30,33))
        wx.StaticText(panel,-1,'Method:',(30,63))
        #wx.StaticText(panel,-1,'Constant:',(190,63))
        compatible = self.check_what_goes()
        self.choice = wx.ComboBox(panel,-1,compatible[0],(90,30),(90,-1),choices=compatible,style=wx.CB_READONLY)
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.choice.GetValue()].get_variable_names()[0],(190,30),(90,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        #self.method = wx.ComboBox(panel,-1,'Above',(90,60),(90,-1),choices=['Above','Below'],style=wx.CB_READONLY)
        self.name = wx.TextCtrl(panel,-1,'unflatten_'+pieces[0],(90,60),(150,-1))
        #self.constant = FS.FloatSpin(panel,-1,(240,60),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onchoice(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['point']
        what_gives = []
        selection = self.pieces
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                selection2 = [i,'any']
                x = frame.object_manager.call_top(selection2).x
                y = frame.object_manager.call_top(selection2).y
                z = frame.object_manager.call_top(selection2).z
                ind = np.where((x>=frame.object_manager.call_top(selection).first[0]) & (x<=frame.object_manager.call_top(selection).first[0]+frame.object_manager.call_top(selection).size[0]*frame.object_manager.call_top(selection).blocks[0]) & (y>=frame.object_manager.call_top(selection).first[1]) & (y<=frame.object_manager.call_top(selection).first[1]+frame.object_manager.call_top(selection).size[1]*frame.object_manager.call_top(selection).blocks[1]))
                if len(ind[0])>0:                
                    what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        frame.object_manager.related_unflatten_point_surface(self.pieces,[self.choice.GetValue(),self.variable.GetValue()],self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXunflattenSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"unFlatten with surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Mesh:',(30,33))
        wx.StaticText(panel,-1,'Method:',(30,63))
        #wx.StaticText(panel,-1,'Constant:',(190,63))
        compatible = self.check_what_goes()
        self.choice = wx.ComboBox(panel,-1,compatible[0],(90,30),(90,-1),choices=compatible,style=wx.CB_READONLY)
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.choice.GetValue()].get_variable_names()[0],(190,30),(90,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        #self.method = wx.ComboBox(panel,-1,'Above',(90,60),(90,-1),choices=['Above','Below'],style=wx.CB_READONLY)
        self.name = wx.TextCtrl(panel,-1,'unflatten_'+pieces[0],(90,60),(150,-1))
        #self.constant = FS.FloatSpin(panel,-1,(240,60),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onchoice(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[self.pieces[0]].blocks[0]-frame.object_manager.object_list[i].blocks[0]==0 and frame.object_manager.object_list[self.pieces[0]].blocks[1]-frame.object_manager.object_list[i].blocks[1]==0:
                    what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        frame.object_manager.related_unflatten_surface(self.pieces,[self.choice.GetValue(),self.variable.GetValue()],self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXshovelSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Shovel surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Data:',(30,33))
        wx.StaticText(panel,-1,'Method:',(30,63))
        wx.StaticText(panel,-1,'Constant:',(190,63))
        compatible = self.check_what_goes()
        self.choice = wx.ComboBox(panel,-1,compatible[0],(80,30),(90,-1),choices=compatible,style=wx.CB_READONLY)
        if 'X' in frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(): x1name='X'
        else: x1name = frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0]
        self.variable1 = wx.ComboBox(panel,-1,x1name,(180,30),(70,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        if 'Y' in frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(): x2name='Y'
        else: x2name = frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0]        
        self.variable2 = wx.ComboBox(panel,-1,x2name,(260,30),(70,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.method = wx.ComboBox(panel,-1,'Above',(90,60),(90,-1),choices=['Above','Below'],style=wx.CB_READONLY)
        self.name = wx.TextCtrl(panel,-1,'shovel_'+pieces[0],(80,60),(100,-1))
        self.constant = FS.FloatSpin(panel,-1,(240,60),(90,-1),min_val=-10000000,max_val=10000000,value=0,digits=3)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onchoice(self,event):
        self.variable1.Clear()
        self.variable1.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names())
        if 'X' in frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(): x1name='X'
        else: x1name = frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0]
        self.variable1.SetValue(x1name)
        
        self.variable2.Clear()
        self.variable2.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names())
        if 'Y' in frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(): x2name='Y'
        else: x2name = frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0]
        self.variable2.SetValue(x2name)
        
    def check_what_goes(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if (frame.object_manager.object_list[i].get_numeric_variable_names())>=2:
                    what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        # related_shovel_surface(self,selection,selection2,selection3,const,name)
        frame.object_manager.related_shovel_surface(self.pieces,[self.choice.GetValue(),self.variable1.GetValue()],[self.choice.GetValue(),self.variable2.GetValue()],self.name.GetValue(),self.constant.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXbalancedshovelSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Balanced shovel surface Frame",size=(350,205),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        wx.StaticText(panel,-1,'Data:',(30,33))
        wx.StaticText(panel,-1,'Method:',(30,63))
        wx.StaticText(panel,-1,'Constant:',(190,63))
        compatible = self.check_what_goes()
        self.choice = wx.ComboBox(panel,-1,compatible[0],(80,30),(90,-1),choices=compatible,style=wx.CB_READONLY)
        if 'X' in frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(): x1name='X'
        else: x1name = frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0]
        self.variable1 = wx.ComboBox(panel,-1,x1name,(180,30),(70,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        if 'Y' in frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(): x2name='Y'
        else: x2name = frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0]        
        self.variable2 = wx.ComboBox(panel,-1,x2name,(260,30),(70,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.method = wx.ComboBox(panel,-1,'Above',(90,60),(90,-1),choices=['Above','Below'],style=wx.CB_READONLY)
        self.name = wx.TextCtrl(panel,-1,'shovel_'+pieces[0],(80,60),(100,-1))
        self.constant = FS.FloatSpin(panel,-1,(240,60),(90,-1),min_val=0,max_val=10000000,value=0,digits=3)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onchoice(self,event):
        self.variable1.Clear()
        self.variable1.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names())
        if 'X' in frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(): x1name='X'
        else: x1name = frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0]
        self.variable1.SetValue(x1name)
        
        self.variable2.Clear()
        self.variable2.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names())
        if 'Y' in frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names(): x2name='Y'
        else: x2name = frame.object_manager.object_list[self.choice.GetValue()].get_numeric_variable_names()[0]
        self.variable2.SetValue(x2name)
        
    def check_what_goes(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if (frame.object_manager.object_list[i].get_numeric_variable_names())>=2:
                    what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        # related_shovel_surface(self,selection,selection2,selection3,const,name)
        frame.object_manager.related_balanced_shovel_surface(self.pieces,[self.choice.GetValue(),self.variable1.GetValue()],[self.choice.GetValue(),self.variable2.GetValue()],self.name.GetValue(),self.constant.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXslopemapSurfFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Slope mapping for surface Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'slope_map_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.related_slope_map_surface(self.pieces,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXconvert2dataPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Point to Data converter Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'pconversion_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        self.inherit = wx.CheckBox(panel,-1,'  inherit coordinates',(30,60+htol))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.related_convert_point2data(self.pieces,self.name.GetValue(),self.inherit.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXfullconvert2dataPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Point to Data full converter Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'pfconversion_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        #self.inherit = wx.CheckBox(panel,-1,'  inherit coordinates',(30,60+htol))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.related_full_convert_point2data([self.pieces[0],'Any'],self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXconvert2pointDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Data to Point converter Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'dconversion_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'X variable',(30,60))
        wx.StaticText(panel,-1,'Y variable',(30,90))
        self.z_check = wx.CheckBox(panel,-1,' Z variable',(30,120))
        
        choices = frame.object_manager.object_list[self.pieces[0]].get_numeric_variable_names()
        if 'X' in choices: x1name = 'X'
        else: x1name = choices[0]
        if 'Y' in choices: x2name = 'Y'
        else: x2name = choices[0]
        if 'Z' in choices: x3name = 'Z'
        else: x3name = choices[0]
        self.xvariable = wx.ComboBox(panel,-1,x1name,(130,57),(150,-1),choices=choices,style=wx.CB_READONLY)
        self.yvariable = wx.ComboBox(panel,-1,x2name,(130,87),(150,-1),choices=choices,style=wx.CB_READONLY)
        self.zvariable = wx.ComboBox(panel,-1,x3name,(130,117),(150,-1),choices=choices,style=wx.CB_READONLY)
        if 'Z' in choices:
            self.z_check.SetValue(True)
        else:
            self.zvariable.Disable()
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.z_check.GetId())
        
        #self.inherit = wx.CheckBox(panel,-1,'  inherit coordinates',(30,60+htol))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def oncheck(self,event):
        if self.z_check.GetValue():
            self.zvariable.Enable()
        else:
            self.zvariable.Disable()
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        if self.z_check.GetValue():
            frame.object_manager.related_convert_data2point(self.pieces,self.name.GetValue(),[self.pieces[0],self.xvariable.GetValue()],[self.pieces[0],self.yvariable.GetValue()],[self.pieces[0],self.zvariable.GetValue()])
        else:
            frame.object_manager.related_convert_data2point(self.pieces,self.name.GetValue(),[self.pieces[0],self.xvariable.GetValue()],[self.pieces[0],self.yvariable.GetValue()],[False,False])
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXfullconvert2pointDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Data to Point full converter Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'dfconversion_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        wx.StaticText(panel,-1,'X variable',(30,60))
        wx.StaticText(panel,-1,'Y variable',(30,90))
        self.z_check = wx.CheckBox(panel,-1,' Z variable',(30,120))
        
        choices = frame.object_manager.object_list[self.pieces[0]].get_numeric_variable_names()
        if 'X' in choices: x1name = 'X'
        else: x1name = choices[0]
        if 'Y' in choices: x2name = 'Y'
        else: x2name = choices[0]
        if 'Z' in choices: x3name = 'Z'
        else: x3name = choices[0]
        self.xvariable = wx.ComboBox(panel,-1,x1name,(130,57),(150,-1),choices=choices,style=wx.CB_READONLY)
        self.yvariable = wx.ComboBox(panel,-1,x2name,(130,87),(150,-1),choices=choices,style=wx.CB_READONLY)
        self.zvariable = wx.ComboBox(panel,-1,x3name,(130,117),(150,-1),choices=choices,style=wx.CB_READONLY)
        if 'Z' in choices:
            self.z_check.SetValue(True)
        else:
            self.zvariable.Disable()
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.z_check.GetId())        
        
        #self.inherit = wx.CheckBox(panel,-1,'  inherit coordinates',(30,60+htol))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def oncheck(self,event):
        if self.z_check.GetValue():
            self.zvariable.Enable()
        else:
            self.zvariable.Disable()
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        if self.z_check.GetValue():
            frame.object_manager.related_full_convert_data2point(self.pieces,self.name.GetValue(),[self.pieces[0],self.xvariable.GetValue()],[self.pieces[0],self.yvariable.GetValue()],[self.pieces[0],self.zvariable.GetValue()])
        else:
            frame.object_manager.related_full_convert_data2point(self.pieces,self.name.GetValue(),[self.pieces[0],self.xvariable.GetValue()],[self.pieces[0],self.yvariable.GetValue()],[False,False])
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXconvert2dataMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Mesh to data converter Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'mconversion_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        #wx.StaticText(panel,-1,'X variable',(30,60))
        
        self.inherit = wx.CheckBox(panel,-1,'  Pickle',(30,60))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.inherit.GetId())
        self.pickle = wx.SpinCtrl(panel,-1,'',(100,57),(100,-1),min=1,max=100000,initial=2)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def oncheck(self,event):
        if self.inherit.GetValue():
            self.pickle.Enable()
        else:
            self.pickle.Disable()
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):       
        frame.object_manager.related_convert_mesh2data(self.pieces,self.name.GetValue(),self.inherit.GetValue(),self.pickle.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXfullconvert2dataMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Mesh to data full converter Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'mfconversion_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        self.inherit = wx.CheckBox(panel,-1,'  Pickle',(30,60))
        self.Bind(wx.EVT_CHECKBOX,self.oncheck,id=self.inherit.GetId())
        self.pickle = wx.SpinCtrl(panel,-1,'',(100,57),(100,-1),min=1,max=100000,initial=2)      
        
        #self.inherit = wx.CheckBox(panel,-1,'  inherit coordinates',(30,60+htol))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def oncheck(self,event):
        if self.z_check.GetValue():
            self.zvariable.Enable()
        else:
            self.zvariable.Disable()
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        frame.object_manager.related_full_convert_mesh2data(self.pieces,self.name.GetValue(),self.inherit.GetValue(),self.pickle.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXpcaDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Principal Component Analysis Frame",size=(350,405),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        #self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.y_check = wx.CheckBox(panel,-1,'  PC basis vectors',(30,32))
        self.name1 = wx.TextCtrl(panel,-1,'pca_bv_'+pieces[0],(150,30),(170,-1))
        self.y_check.SetValue(True)
        
        self.fracs_check = wx.CheckBox(panel,-1,'  axis alignment',(30,62))
        self.name2 = wx.TextCtrl(panel,-1,'pca_al_'+pieces[0],(150,60),(170,-1))
        
        self.rot_check = wx.CheckBox(panel,-1,'  eigen_vectors',(30,92))
        self.name3 = wx.TextCtrl(panel,-1,'pca_ev_'+pieces[0],(150,90),(170,-1))
        #self.choice.Disable()
        
        ltol = 60
        htol = 30
        
        self.variables = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()

        self.chosen_variables = wx.ListBox(panel, -1, (30,120), (290, 150), self.variables, style = wx.LB_MULTIPLE|wx.LB_HSCROLL)
        self.select = wx.Button (panel,-1,'Select all',(30,275),(90,-1))
        self.Bind(wx.EVT_BUTTON,self.onselect,id=self.select.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,310),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,310),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onselect(self,event):
        for i in xrange(len(self.variables)):
            self.chosen_variables.SetSelection(i)
        
    def oncheck(self,event):
        if self.z_check.GetValue():
            self.zvariable.Enable()
        else:
            self.zvariable.Disable()
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        name1 = self.name1.GetValue()
        name2 = self.name2.GetValue()
        name3 = self.name3.GetValue()
        index = self.chosen_variables.GetSelections()
        variables = []
        for i in index:
            #variables.append(self.chosen_variables.GetString(i))
            variables.append('pc_'+str(i))
        if len(variables)>=2:
            if self.y_check.GetValue() or self.fracs_check.GetValue() or self.rot_check.GetValue():
                vshape = frame.object_manager.object_list[self.pieces[0]].variable[variables[0]].data.data.shape[0]
                data = frame.object_manager.object_list[self.pieces[0]].variable[variables[0]].data.data.reshape((vshape,1))
                #dtype = [frame.object_manager.object_list[self.pieces[0]].variable[variables[0]].dtype]
                #vtype = [frame.object_manager.object_list[self.pieces[0]].variable[variables[0]].vtype]
                dtype = ['float32']
                vtype = ['continuous']
                for i in xrange(1,len(variables)):
                    data = np.hstack((data,frame.object_manager.object_list[self.pieces[0]].variable[variables[i]].data.data.reshape((vshape,1))))
                    #dtype.append(frame.object_manager.object_list[self.pieces[0]].variable[variables[i]].dtype)
                    #vtype.append(frame.object_manager.object_list[self.pieces[0]].variable[variables[i]].vtype)
                    dtype.append('float32')
                    vtype.append('continuous')
                null = frame.object_manager.object_list[self.pieces[0]].null
                pca_results = PCA(data)
                if self.y_check.GetValue():
                    variables = []
                    for i in index:
                        #variables.append(self.chosen_variables.GetString(i))
                        variables.append('pc_'+str(i))
                    if name1 in frame.object_manager.object_name: 
                        name1 = frame.object_manager.do_newname_from_name(name1)
                    frame.object_manager.add_data_object(null,name1,variables,pca_results.Y,dtype,vtype)
                    frame.object_manager.last_object = name1
                    frame.update_last_object_list()
                if self.fracs_check.GetValue():
                    if name2 in frame.object_manager.object_name: 
                        name2 = frame.object_manager.do_newname_from_name(name2)
                    #variables = []
                    #for i in index:
                    #    #variables.append(self.chosen_variables.GetString(i))
                    #    variables.append('fracs_'+str(i))
                    fsize = pca_results.fracs.shape[0]
                    fdata = np.hstack((np.arange(1,fsize+1).reshape((fsize,1)),pca_results.fracs.reshape((fsize,1)),np.cumsum(pca_results.fracs).reshape((fsize,1)),pca_results.mu.reshape((fsize,1)),pca_results.sigma.reshape((fsize,1))))
                    frame.object_manager.add_data_object(null,name2,['indexes','fracs','cumulated_fracs','mu','sigma'],fdata,['float32','float32','float32','float32','float32'],['continuous','continuous','continuous','continuous','continuous'])
                    frame.object_manager.last_object = name2
                    frame.update_last_object_list()
                if self.rot_check.GetValue():
                    if name3 in frame.object_manager.object_name: 
                        name3 = frame.object_manager.do_newname_from_name(name3)
                    variables = []
                    for i in index:
                        #variables.append(self.chosen_variables.GetString(i))
                        variables.append('ev_'+str(i))
                    frame.object_manager.add_data_object(null,name3,variables,pca_results.Wt,dtype,vtype)
                    frame.object_manager.last_object = name3
                    frame.update_last_object_list()
                wx.MessageBox("Operation is finished.","Information")
                self.Destroy()
            else:
                wx.MessageBox("There must be some output.","Error")
        else:
            wx.MessageBox("You need at least 2 variables for PCA.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXclassifyDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Data visual classification frame",size=(420,315),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        page1 = panel=self.panel=wx.Panel(self)
        
        #nb = wx.Notebook(panel)

        #page1 = wx.Panel(self) #wx.Panel(nb)
        #page2 = wx.Panel(nb)
        
        #nb.AddPage(page1, "Common")
        
        self.pieces = pieces
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = [pieces[0]],style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        self.object.Disable()
        if len(pieces)==1:
            v = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0]
            self.bin_array = np.zeros(frame.object_manager.call([pieces[0],v]).data.shape[0])
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.bin_array = np.zeros(frame.object_manager.call(pieces).data.shape[0])
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        #self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        wx.StaticBox(page1,-1,'Settings',(10,90),(380,80))
        wx.StaticText(page1,-1,'Colormap:',(200,110))
        wx.StaticText(page1,-1,'Class:',(200,140))
        self.colormap = wx.ComboBox(page1,-1,'jet',(280,107),(90,-1),choices = frame.object_manager.matplotlib_colormaps,style=wx.CB_READONLY)
        self.bins = wx.SpinCtrl(panel,-1,'',(280,137),(90,-1),min=0,max=500,initial=1)
        
        self.build = wx.Button(panel,-1,'Build',(30,110),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onbuild,id = self.build.GetId())
        
        wx.StaticText(panel,-1,'Name new variable:',(30,183))
        self.name = wx.TextCtrl(panel,-1,'idx_'+pieces[0],(130,180),(150,-1))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(70,230),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(250,230),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId()) 
        
    def onapply(self,event):
        name = self.name.GetValue()
        if name in frame.object_manager.object_list[self.pieces[0]].variable.keys(): 
            name = frame.object_manager.object_list[self.pieces[0]].get_newname_from_name(name)
        #frame.object_manager.add_surf_object(blocks, size, first, null, name,self.pieces[1], data)
        frame.object_manager.object_list[self.pieces[0]].add_variable(name,self.bin_array,self.bin_array.dtype,'discrete')
        frame.object_manager.last_object = self.pieces[0]
        frame.object_manager.last_variable = name
        frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
        
    def onbuild(self,event):
        self.bin_array = frame.object_manager.related_classify_data(frame.object_manager.call([self.object.GetValue(),self.variablex.GetValue()]).data,
                                                                    frame.object_manager.call([self.object.GetValue(),self.variabley.GetValue()]).data
                                                                    ,self.bins.GetValue(),self.colormap.GetValue(),self.bin_array)
                                                                    
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()

class CTXclusteranalysisDataFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Data cluster analysis frame",size=(420,315),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        page1 = panel=self.panel=wx.Panel(self)
        
        #nb = wx.Notebook(panel)

        #page1 = wx.Panel(self) #wx.Panel(nb)
        #page2 = wx.Panel(nb)
        
        #nb.AddPage(page1, "Common")
        
        self.pieces = pieces
        
        wx.StaticBox(page1,-1,'Object',(10,10),(380,80))
        wx.StaticText(page1,-1,'Object name:',(30,30))
        wx.StaticText(page1,-1,'Variable X:',(200,30))
        wx.StaticText(page1,-1,'Variable Y:',(200,60))
        self.object = wx.ComboBox(page1,-1,pieces[0],(100,27),(90,-1),choices = [pieces[0]],style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
        self.object.Disable()
        if len(pieces)==1:
            v = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0]
            self.bin_array = np.zeros(frame.object_manager.call([pieces[0],v]).data.shape[0])
            self.variablex = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,frame.object_manager.object_list[pieces[0]].get_numeric_variable_names()[0],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        else:
            self.bin_array = np.zeros(frame.object_manager.call(pieces).data.shape[0])
            self.variablex = wx.ComboBox(page1,-1,pieces[1],(280,27),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
            self.variabley = wx.ComboBox(page1,-1,pieces[1],(280,57),(90,-1),choices = frame.object_manager.object_list[pieces[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onobjectvariablex,id=self.variablex.GetId())
        #self.Bind(wx.EVT_COMBOBOX,self.onobjectvariabley,id=self.variabley.GetId())
        wx.StaticBox(page1,-1,'Settings',(10,90),(380,80))
        wx.StaticText(page1,-1,'Type:',(30,110))
        wx.StaticText(page1,-1,'Clusters:',(30,140))
        self.canalysis = wx.ComboBox(page1,-1,'KMeans',(100,107),(90,-1),choices = ['KMeans','Mean Shift','DBSCAN'],style=wx.CB_READONLY)
        self.clusters = wx.SpinCtrl(panel,-1,'',(100,137),(90,-1),min=2,max=500,initial=3)
        
        wx.StaticText(page1,-1,'Quant./EPS:',(200,110))
        wx.StaticText(page1,-1,'Samples:',(200,140))
        self.eps = FS.FloatSpin(page1,-1,(280,107),(90,-1),min_val=0.001,max_val=0.999,value=0.3,digits=3)
        self.samples = wx.SpinCtrl(panel,-1,'',(280,137),(90,-1),min=2,max=500,initial=10)
        
        # QUANTILE/EPS
        # NUMBER OF SAMPLES/MINIMUM SAMPLES
        # NUMBER OF CLUSTERS
        
        wx.StaticText(panel,-1,'Name new variable:',(30,183))
        self.name = wx.TextCtrl(panel,-1,'idx_'+pieces[0],(130,180),(150,-1))
        
        self.build = wx.Button(panel,-1,'Build',(290,178),(90,-1))
        self.Bind(wx.EVT_BUTTON,self.onbuild,id = self.build.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(70,230),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(250,230),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId()) 
        
    def onapply(self,event):
        name = self.name.GetValue()
        if name in frame.object_manager.object_list[self.pieces[0]].variable.keys(): 
            name = frame.object_manager.object_list[self.pieces[0]].get_newname_from_name(name)
        #frame.object_manager.add_surf_object(blocks, size, first, null, name,self.pieces[1], data)
        frame.object_manager.object_list[self.pieces[0]].add_variable(name,self.bin_array,self.bin_array.dtype,'discrete')
        frame.object_manager.last_object = self.pieces[0]
        frame.object_manager.last_variable = name
        frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
        
    def onbuild(self,event):
        self.bin_array = frame.object_manager.related_cluster_analysis_data(frame.object_manager.call([self.object.GetValue(),self.variablex.GetValue()]).data,
                                                                            frame.object_manager.call([self.object.GetValue(),self.variabley.GetValue()]).data
                                                                            ,self.canalysis.GetValue(),self.clusters.GetValue(),self.eps.GetValue()
                                                                            ,self.samples.GetValue(),self.bin_array)
                                                                    
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXattributeMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Calculate mesh attribute Frame",size=(350,425),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'att_'+pieces[1],(160,30),(150,-1))
        self.choice.Disable()
        
        wx.StaticText(panel,-1,'Attribute:',(30,80))
        choice = ['Uniform','Gaussian','Minimum','Maximum','Median','Percentile',
                  'Rank','Prewitt','Sobel','Laplace','Gaussian Laplace','Fourier uniform'
                  ,'Fourier gaussian','Spline','Local MoranI'
                  ,'Local MoranI with distance','Local GearyC','Local GearyC with distance'
                  ,'G statistics','G statistics with distance','Equalization'
                  ,'Sigmoid','Minimum isoVariance','Maximum isoVariance','Mean isoVariance'
                  ,'mean','variance','std','sum','product','peak2peak','signal2noise'
                  ,'skewness','kurtosis']
        choice.sort()
        self.att = wx.ComboBox(panel,-1,'Uniform',(90,77),(100,-1),choices = choice,style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'X:',(30,120))
        wx.StaticText(panel,-1,'Y:',(30,150))
        wx.StaticText(panel,-1,'Z:',(30,180))
        
        self.x = wx.SpinCtrl(panel,-1,'',(60,117),(60,-1),min=1,max=1000,initial=3)
        self.y = wx.SpinCtrl(panel,-1,'',(60,147),(60,-1),min=1,max=1000,initial=3)
        self.z = wx.SpinCtrl(panel,-1,'',(60,177),(60,-1),min=1,max=1000,initial=3)
        
        wx.StaticText(panel,-1,'Order:',(140,120))
        wx.StaticText(panel,-1,'Percentile:',(140,150))
        wx.StaticText(panel,-1,'Rank:',(140,180))
        wx.StaticText(panel,-1,'Axis:',(140,210))
        
        self.order = wx.SpinCtrl(panel,-1,'',(200,117),(60,-1),min=0,max=3,initial=3)
        self.percentile = wx.SpinCtrl(panel,-1,'',(200,147),(60,-1),min=1,max=99,initial=50)
        self.rank = wx.SpinCtrl(panel,-1,'',(200,177),(60,-1),min=-1,max=100,initial=0)
        self.axis = wx.SpinCtrl(panel,-1,'',(200,207),(60,-1),min=0,max=2,initial=0)
        
        #wx.StaticText(panel,-1,'Minimum:',(30,80))
        #wx.StaticText(panel,-1,'Maximum:',(30,110))
        #self.minimum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[0]),(90,77),(100,-1))
        #self.maximum = wx.TextCtrl(panel,-1,str(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].variable_range[1]),(90,107),(100,-1))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        window = (self.x.GetValue(),self.y.GetValue(),self.z.GetValue())
        order = self.order.GetValue()
        percentile = self.percentile.GetValue()
        rank = self.rank.GetValue()
        axis = self.axis.GetValue()
        choice = self.att.GetValue()
        frame.object_manager.related_attribute_mesh(self.pieces,self.name.GetValue(),choice,window,order,percentile,rank,axis)
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXinterpretationMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Interprate surface from mesh Frame",size=(350,425),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'intrp_'+pieces[1],(160,30),(150,-1))
        self.choice.Disable()
        
        wx.StaticText(panel,-1,'Axis:',(30,80))
        wx.StaticText(panel,-1,'Step:',(30,110))
        wx.StaticText(panel,-1,'Colormap:',(30,140))
        
        self.axis = wx.ComboBox(panel,-1,'X',(100,77),(100,-1),choices=['X','Y','Z'],style=wx.CB_READONLY)
        self.step = wx.SpinCtrl(panel,-1,'',(100,107),(100,-1),min=1,max=1000,initial=10)
        choice = frame.object_manager.matplotlib_colormaps
        self.colormap = wx.ComboBox(panel,-1,'jet',(100,137),(100,-1),choices = choice,style=wx.CB_READONLY)
       
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())        
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        data = pympl.create_surface(frame.object_manager.call(self.pieces).data,self.axis.GetValue(),self.step.GetValue(),self.colormap.GetValue())
        if type(data)!=bool:
            data = data*frame.object_manager.call_top(self.pieces).size[2]+frame.object_manager.call_top(self.pieces).first[2]
            blocks = (data.shape[0],data.shape[1],1)
            size = (frame.object_manager.call_top(self.pieces).size[0],frame.object_manager.call_top(self.pieces).size[1],1)
            first = (frame.object_manager.call_top(self.pieces).first[0],frame.object_manager.call_top(self.pieces).first[1],1)
            null = frame.object_manager.call_top(self.pieces).null
            name = self.name.GetValue()
            if name in frame.object_manager.object_name: 
                name = frame.object_manager.do_newname_from_name(name)
            frame.object_manager.add_surf_object(blocks, size, first, null, name,self.pieces[1], data)
            frame.object_manager.last_object = name
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXaddfrommeshPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Add to point from mesh Frame",size=(350,225),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,'new_'+pieces[0],(160,30),(150,-1))
        self.choice.Disable()
        
        ltol = 30
        htol = 30
        
        wx.StaticText(panel,-1,'Object:',(30,30+htol)) 
        
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,27+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_variable_names()[0],(220,27+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_variable_names(),style=wx.CB_READONLY)
       
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,100),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        name = self.name.GetValue()
        selection2 = [self.object.GetValue(),self.variable.GetValue()]
        frame.object_manager.related_add_from_mesh_point(self.pieces,selection2,name)
        frame.update_last_variable_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXmap2QuiverFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Map as quiver Frame",size=(350,325),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        #self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        #self.name = wx.TextCtrl(panel,-1,'new_'+pieces[0],(160,30),(150,-1))
        #self.choice.Disable()
        
        ltol = 30
        htol = 0
        
        wx.StaticText(panel,-1,'U:',(30,30+htol))         
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,27+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,27+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'V:',(30,60+htol))         
        self.object1 = wx.ComboBox(panel,-1,compatible[0],(50+ltol,57+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo1,id=self.object1.GetId())        
        self.variable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,57+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'W:',(30,90+htol))         
        self.object2 = wx.ComboBox(panel,-1,compatible[0],(50+ltol,87+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo2,id=self.object2.GetId())        
        self.variable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
       
        self.quiver_flag = wx.CheckBox(panel,-1,'  map as quiver',(30,120+htol))
        self.quiver_flag.SetValue(frame.object_manager.call(self.pieces).quiver_flag)
        
        wx.StaticText(panel,-1,'Opacity:',(30,150+htol))
        self.opacity = wx.SpinCtrl(panel,-1,'',(50+ltol,147+htol),(100,-1),min=1,max=100,initial=int(frame.object_manager.call(self.pieces).quiver_opacity*100))
       
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
        
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        
    def onobjectcombo1(self,event):
        self.variable1.Clear()
        self.variable1.AppendItems(frame.object_manager.object_list[self.object1.GetValue()].get_numeric_variable_names())
        self.variable1.SetValue(frame.object_manager.object_list[self.object1.GetValue()].get_numeric_variable_names()[0])
        
    def onobjectcombo2(self,event):
        self.variable2.Clear()
        self.variable2.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        #name = self.name.GetValue()
        selection = [self.object.GetValue(),self.variable.GetValue()]
        selection1 = [self.object1.GetValue(),self.variable1.GetValue()]
        selection2 = [self.object2.GetValue(),self.variable2.GetValue()]
        frame.object_manager.call(self.pieces).quiver_flag = self.quiver_flag.GetValue()
        frame.object_manager.call(self.pieces).quiver_opacity = self.opacity.GetValue()/100
        if self.quiver_flag.GetValue():
            frame.object_manager.call(selection).stream_flag = False
            frame.object_manager.call(selection).fracture_flag = False
            frame.object_manager.call(selection).graph_flag  = False
            u = frame.object_manager.call(selection).data
            v = frame.object_manager.call(selection1).data
            w = frame.object_manager.call(selection2).data
            frame.object_manager.call(self.pieces).calculate_quiver_variables(u,v,w)
        #frame.object_manager.related_add_from_mesh_point(self.pieces,selection2,name)
        #frame.update_last_variable_list()
        frame.onreview_object(self.pieces)
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXmap2FractureFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Map as fracture Frame",size=(350,425),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        self.color  = frame.object_manager.call(self.pieces).fracture_color
        #self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        #self.name = wx.TextCtrl(panel,-1,'new_'+pieces[0],(160,30),(150,-1))
        #self.choice.Disable()
        
        ltol = 30
        htol = 0
        
        wx.StaticText(panel,-1,'Azimuth:',(30,30+htol))         
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,27+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,27+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'Dip:',(30,60+htol))         
        self.object1 = wx.ComboBox(panel,-1,compatible[0],(50+ltol,57+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo1,id=self.object1.GetId())        
        self.variable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,57+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'Hsize:',(30,90+htol))         
        self.object2 = wx.ComboBox(panel,-1,compatible[0],(50+ltol,87+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo2,id=self.object2.GetId())        
        self.variable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        #wx.StaticText(panel,-1,'Vsize:',(30,120+htol))         
        #self.object3 = wx.ComboBox(panel,-1,compatible[0],(50+ltol,117+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo2,id=self.object2.GetId())        
        #self.variable3 = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,117+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        self.fracture_flag = wx.CheckBox(panel,-1,'  map as fracture',(30,150+htol))
        self.fracture_flag.SetValue(frame.object_manager.call(self.pieces).fracture_flag)
        
        self.my_color = wx.Button(panel,-1,'Choose color',(30,180),(120,30))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        
        #wx.StaticText(panel,-1,'Opacity:',(30,150+htol))
        #self.opacity = wx.SpinCtrl(panel,-1,'',(50+ltol,147+htol),(100,-1),min=1,max=100,initial=int(frame.object_manager.call(self.pieces).quiver_opacity*100))
       
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.color = (color[0]/255,color[1]/255,color[2]/255)        
        
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        
    def onobjectcombo1(self,event):
        self.variable1.Clear()
        self.variable1.AppendItems(frame.object_manager.object_list[self.object1.GetValue()].get_numeric_variable_names())
        self.variable1.SetValue(frame.object_manager.object_list[self.object1.GetValue()].get_numeric_variable_names()[0])
        
    def onobjectcombo2(self,event):
        self.variable2.Clear()
        self.variable2.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def onobjectcombo3(self,event):
        self.variable3.Clear()
        self.variable3.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        #name = self.name.GetValue()
        selection = [self.object.GetValue(),self.variable.GetValue()]
        selection1 = [self.object1.GetValue(),self.variable1.GetValue()]
        selection2 = [self.object2.GetValue(),self.variable2.GetValue()]
        #selection3 = [self.object3.GetValue(),self.variable3.GetValue()]
        frame.object_manager.call(self.pieces).fracture_flag = self.fracture_flag.GetValue()
        frame.object_manager.call(self.pieces).fracture_color = self.color
        #frame.object_manager.call(self.pieces).quiver_opacity = self.opacity.GetValue()/100
        if self.fracture_flag.GetValue():
            frame.object_manager.call(selection).stream_flag = False
            frame.object_manager.call(selection).quiver_flag = False
            frame.object_manager.call(selection).graph_flag  = False
            azimuth = frame.object_manager.call(selection).data
            dip = frame.object_manager.call(selection1).data
            sizeh = frame.object_manager.call(selection2).data
            #sizev = frame.object_manager.call(selection3).data
            frame.object_manager.call(self.pieces).calculate_fracture_variables(frame.object_manager.call_top(self.pieces).x,frame.object_manager.call_top(self.pieces).y,frame.object_manager.call_top(self.pieces).z,azimuth,dip,sizeh)
        #frame.object_manager.related_add_from_mesh_point(self.pieces,selection2,name)
        #frame.update_last_variable_list()
        frame.onreview_object(self.pieces)
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXmap2GraphFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Map as graph Frame",size=(350,425),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        self.color  = frame.object_manager.call(self.pieces).graph_color
        self.path = 'none'
        
        ltol = 30
        htol = 0
        
        self.btn_load_graph = wx.Button(panel,-1,'Load graph data',(30,30),(150,40))
        self.Bind(wx.EVT_BUTTON,self.onloadgraph,id=self.btn_load_graph.GetId())
        #wx.StaticText(panel,-1,'Azimuth:',(30,30+htol))         
        #self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,27+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        

        wx.StaticText(panel,-1,'Line size:',(30,120+htol))
        self.lsize = wx.SpinCtrl(panel,-1,'',(100,117+htol),(100,-1),min=1,max=1000,initial=1)        
        
        self.graph_flag = wx.CheckBox(panel,-1,'  map as graph',(30,150+htol))
        self.graph_flag.SetValue(frame.object_manager.call(self.pieces).graph_flag)
        
        self.my_color = wx.Button(panel,-1,'Choose color',(30,180),(120,30))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onloadgraph(self,event):
        dlg=wx.FileDialog(self,"Input graph file...",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            self.path = dlg.GetPath()
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.color = (color[0]/255,color[1]/255,color[2]/255)        
            
    def onapply(self,event):
        pieces = self.pieces
        if self.graph_flag.GetValue():
            if self.path!='none':
                path = self.path
                if path[-4:]=='.npy':
                    gdata = np.load(path).astype('int32')
                else:
                    gdata = np.loadtxt(path,dtype='int32')
                    #print gdata
                flag = frame.object_manager.call(pieces).include_graph_data(gdata)
                if flag == True:
                    frame.object_manager.call(pieces).stream_flag = False
                    frame.object_manager.call(pieces).quiver_flag = False
                    frame.object_manager.call(pieces).fracture_flag = False
                    frame.object_manager.call(pieces).graph_flag  = True
                    frame.object_manager.call(pieces).graph_line = self.lsize.GetValue()
                    frame.object_manager.call(pieces).graph_color = self.color
                    frame.onreview_object(self.pieces)
                    wx.MessageBox("Operation is finished.","Information")
                    self.Destroy()
                else:
                    wx.MessageBox("Information on file does not seem to be adequate.","Error")
            else:
                if frame.object_manager.call(pieces).gdata_flag:
                    frame.object_manager.call(pieces).stream_flag = False
                    frame.object_manager.call(pieces).quiver_flag = False
                    frame.object_manager.call(pieces).fracture_flag = False
                    frame.object_manager.call(pieces).graph_flag  = True
                    frame.object_manager.call(pieces).graph_line = self.lsize.GetValue()
                    frame.object_manager.call(pieces).graph_color = self.color
                    frame.onreview_object(self.pieces)
                    wx.MessageBox("Operation is finished.","Information")
                    self.Destroy()
                else:
                    wx.MessageBox("You need to load information from file.","Error")
        else:
            frame.object_manager.call(pieces).graph_flag  = False
            frame.onreview_object(self.pieces)
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
            
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXconvert2worldFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Convert coordinates to world view referential",size=(350,425),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        #self.color  = frame.object_manager.call(self.pieces).fracture_color
        #self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        #self.name = wx.TextCtrl(panel,-1,'new_'+pieces[0],(160,30),(150,-1))
        #self.choice.Disable()
        
        ltol = 30
        htol = 0
        
        wx.StaticText(panel,-1,'Object:',(30,30+htol))         
        self.object = wx.ComboBox(panel,-1,compatible[0],(50+ltol,27+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())        
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,27+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'Name:',(30,60+htol))
        self.name = wx.TextCtrl(panel,-1,'world_'+pieces[0],(50+ltol,57+htol),(100,-1))
        #wx.StaticText(panel,-1,'Dip:',(30,60+htol))         
        #self.object1 = wx.ComboBox(panel,-1,compatible[0],(50+ltol,57+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo1,id=self.object1.GetId())        
        #self.variable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,57+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        #wx.StaticText(panel,-1,'Hsize:',(30,90+htol))         
        #self.object2 = wx.ComboBox(panel,-1,compatible[0],(50+ltol,87+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo2,id=self.object2.GetId())        
        #self.variable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,87+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        #wx.StaticText(panel,-1,'Vsize:',(30,120+htol))         
        #self.object3 = wx.ComboBox(panel,-1,compatible[0],(50+ltol,117+htol),(100,-1),choices=compatible,style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo2,id=self.object2.GetId())        
        #self.variable3 = wx.ComboBox(panel,-1,frame.object_manager.object_list[compatible[0]].get_numeric_variable_names()[0],(220,117+htol),(90,-1),choices = frame.object_manager.object_list[compatible[0]].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        #self.fracture_flag = wx.CheckBox(panel,-1,'  map as fracture',(30,150+htol))
        #self.fracture_flag.SetValue(frame.object_manager.call(self.pieces).fracture_flag)
        
        #self.my_color = wx.Button(panel,-1,'Choose color',(30,180),(120,30))
        #self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        
        #wx.StaticText(panel,-1,'Opacity:',(30,150+htol))
        #self.opacity = wx.SpinCtrl(panel,-1,'',(50+ltol,147+htol),(100,-1),min=1,max=100,initial=int(frame.object_manager.call(self.pieces).quiver_opacity*100))
       
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.color = (color[0]/255,color[1]/255,color[2]/255)        
        
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_numeric_variable_names()[0])
        
    def onobjectcombo1(self,event):
        self.variable1.Clear()
        self.variable1.AppendItems(frame.object_manager.object_list[self.object1.GetValue()].get_numeric_variable_names())
        self.variable1.SetValue(frame.object_manager.object_list[self.object1.GetValue()].get_numeric_variable_names()[0])
        
    def onobjectcombo2(self,event):
        self.variable2.Clear()
        self.variable2.AppendItems(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names())
        self.variable2.SetValue(frame.object_manager.object_list[self.object2.GetValue()].get_numeric_variable_names()[0])
        
    def onobjectcombo3(self,event):
        self.variable3.Clear()
        self.variable3.AppendItems(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names())
        self.variable3.SetValue(frame.object_manager.object_list[self.object3.GetValue()].get_numeric_variable_names()[0])
        
    def onchoice(self,event):
        if self.choice.GetValue()=='Self':
            self.name.Disable()
        else:
            self.name.Enable()
            
    def onapply(self,event):
        #name = self.name.GetValue()
        selection = [self.object.GetValue(),self.variable.GetValue()]
        frame.object_manager.convert_to_world_referential_point(self.pieces,selection,self.name.GetValue())
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
    
        
class CTXLabelPointFrame(wx.Frame):
    def __init__(self,parent,id,pieces,compatible):
        wx.Frame.__init__(self,parent,id,"Label point frame",size=(350,405),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.check_label = wx.CheckBox(panel,-1,'  Use labels',(30,10))
        self.check_label.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].uselabel)        
        
        wx.StaticText(panel,-1,'Use this:',(30,33))
        self.choice = wx.ComboBox(panel,-1,compatible[0],(90,30),(90,-1),choices=compatible,style=wx.CB_READONLY)
        self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.choice.GetValue()].get_variable_names()[0],(190,30),(90,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        
        wx.StaticText(panel,-1,'With size:',(30,63))
        self.size = wx.SpinCtrl(panel,-1,'',(90,60),(90,-1),min=1,max=10000,initial=frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelsize)
        
        wx.StaticText(panel,-1,'Color:',(30,90))
        wx.StaticText(panel,-1,'Red:',(30,120))
        wx.StaticText(panel,-1,'Green:',(30,150))
        wx.StaticText(panel,-1,'Blue:',(30,180))
        wx.StaticText(panel,-1,'Alpha:',(30,210))
        self.my_color = wx.Button(panel,-1,'Choose',(100,85),(90,-1))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelcolor
        self.red = wx.SpinCtrl(panel,-1,'',(100,117),(90,-1),min=0,max=255,initial=appex[0]*255)
        self.green = wx.SpinCtrl(panel,-1,'',(100,147),(90,-1),min=0,max=255,initial=appex[1]*255)
        self.blue = wx.SpinCtrl(panel,-1,'',(100,177),(90,-1),min=0,max=255,initial=appex[2]*255)
        appex = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelopacity
        self.alpha = wx.SpinCtrl(panel,-1,'',(100,207),(90,-1),min=0,max=255,initial=appex*255)
        
        wx.StaticText(panel,-1,'Orientation:',(30,240))
        appex = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelorientation
        self.a = wx.SpinCtrl(panel,-1,'',(90,237),(50,-1),min=0,max=180,initial=int(appex[0]*180/np.pi))
        self.b = wx.SpinCtrl(panel,-1,'',(150,237),(50,-1),min=0,max=180,initial=int(appex[1]*180/np.pi))
        self.c = wx.SpinCtrl(panel,-1,'',(200,237),(50,-1),min=0,max=180,initial=int(appex[2]*180/np.pi))
        
        self.check_camera = wx.CheckBox(panel,-1,'  Keep camera orientation',(30,270))
        self.check_camera.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelusescamera)
    
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
        
    def onchoice(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.choice.GetValue()].get_variable_names()[0])
        
    def onapply(self,event):
        pieces = self.pieces
        if self.check_label.GetValue():
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].uselabel = True
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].change_my_label(frame.object_manager.object_list[self.choice.GetValue()].variable[self.variable.GetValue()].data.data)
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelsize = self.size.GetValue()
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelcolor = (self.red.GetValue()/255,self.green.GetValue()/255,self.blue.GetValue()/255)
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelopacity = self.alpha.GetValue()/255
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelorientation = (self.a.GetValue()*np.pi/180,self.b.GetValue()*np.pi/180,self.c.GetValue()*np.pi/180)
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelusescamera = self.check_camera.GetValue()
            frame.onreview_object(pieces)
        else:
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].uselabel = False
            frame.onreview_object(pieces)
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXLabelMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Label mesh and surf frame",size=(350,405),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        
        self.check_label = wx.CheckBox(panel,-1,'  Use labels',(30,10))
        self.check_label.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].uselabel)        
        
        wx.StaticText(panel,-1,'Use this:',(30,33))
        #self.choice = wx.ComboBox(panel,-1,compatible[0],(90,30),(90,-1),choices=compatible,style=wx.CB_READONLY)
        #self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.choice.GetValue()].get_variable_names()[0],(190,30),(90,-1),choices=frame.object_manager.object_list[self.choice.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        self.name = wx.TextCtrl(panel,-1,frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabel,(90,30),(90,-1))
        wheres = ['Xo,Yo,Zo','Xf,Yo,Zo','Xf,Yf,Zo','Xo,Yf,Zo','Xo,Yo,Zf','Xf,Yo,Zf','Xf,Yf,Zf','Xo,Yf,Zf']
        self.where = wx.ComboBox(panel,-1,frame.object_manager.object_list[pieces[0]].variable[pieces[1]].labelspot,(190,30),(90,-1),choices=wheres,style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'With size:',(30,63))
        self.size = wx.SpinCtrl(panel,-1,'',(90,60),(90,-1),min=1,max=10000,initial=frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelsize)
        
        wx.StaticText(panel,-1,'Color:',(30,90))
        wx.StaticText(panel,-1,'Red:',(30,120))
        wx.StaticText(panel,-1,'Green:',(30,150))
        wx.StaticText(panel,-1,'Blue:',(30,180))
        wx.StaticText(panel,-1,'Alpha:',(30,210))
        self.my_color = wx.Button(panel,-1,'Choose',(100,85),(90,-1))
        self.Bind(wx.EVT_BUTTON,self.oncolor,id=self.my_color.GetId())
        appex = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelcolor
        self.red = wx.SpinCtrl(panel,-1,'',(100,117),(90,-1),min=0,max=255,initial=appex[0]*255)
        self.green = wx.SpinCtrl(panel,-1,'',(100,147),(90,-1),min=0,max=255,initial=appex[1]*255)
        self.blue = wx.SpinCtrl(panel,-1,'',(100,177),(90,-1),min=0,max=255,initial=appex[2]*255)
        appex = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelopacity
        self.alpha = wx.SpinCtrl(panel,-1,'',(100,207),(90,-1),min=0,max=255,initial=appex*255)
        
        wx.StaticText(panel,-1,'Orientation:',(30,240))
        appex = frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelorientation
        self.a = wx.SpinCtrl(panel,-1,'',(90,237),(50,-1),min=0,max=180,initial=int(appex[0]*180/np.pi))
        self.b = wx.SpinCtrl(panel,-1,'',(150,237),(50,-1),min=0,max=180,initial=int(appex[1]*180/np.pi))
        self.c = wx.SpinCtrl(panel,-1,'',(200,237),(50,-1),min=0,max=180,initial=int(appex[2]*180/np.pi))
        
        self.check_camera = wx.CheckBox(panel,-1,'  Keep camera orientation',(30,270))
        self.check_camera.SetValue(frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelusescamera)
    
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,300),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def oncolor(self,event):
        dlg = wx.ColourDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            color = dlg.GetColourData().GetColour()
            self.red.SetValue(color[0])
            self.green.SetValue(color[1])
            self.blue.SetValue(color[2])
        
    def onchoice(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.choice.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.choice.GetValue()].get_variable_names()[0])
        
    def onapply(self,event):
        pieces = self.pieces
        if self.check_label.GetValue():
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].uselabel = True
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabel = self.name.GetValue()
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].labelspot = self.where.GetValue()
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelsize = self.size.GetValue()
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelcolor = (self.red.GetValue()/255,self.green.GetValue()/255,self.blue.GetValue()/255)
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelopacity = self.alpha.GetValue()/255
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelorientation = (self.a.GetValue()*np.pi/180,self.b.GetValue()*np.pi/180,self.c.GetValue()*np.pi/180)
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].mylabelusescamera = self.check_camera.GetValue()
            frame.onreview_object(pieces)
        else:
            frame.object_manager.object_list[pieces[0]].variable[pieces[1]].uselabel = False
            frame.onreview_object(pieces)
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()        
        
class CTXimagesetMeshFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Image set generator for Mesh Frame",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        self.odir = 'None'
        #self.choice = wx.ComboBox(panel,-1,'New',(30,30),(100,-1),choices=['Self','New'],style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onchoice,id=self.choice.GetId())
        #self.name = wx.TextCtrl(panel,-1,'Ocalc_'+pieces[0],(160,30),(150,-1))
        #self.choice.Disable()
        
        self.btn_odir = wx.Button(panel,-1,'Set directory',(30,30),(100,30))
        self.Bind(wx.EVT_BUTTON,self.ondir,id=self.btn_odir.GetId())
        wx.StaticText(panel,-1,'Axis:',(30,73))
        self.axis = wx.ComboBox(panel,-1,'X',(100,70),(100,-1),choices = ['X','Y','Z'],style = wx.CB_READONLY)
        wx.StaticText(panel,-1,'Step:',(30,103))        
        self.step = wx.SpinCtrl(panel,-1,'',(100,100),(100,-1),min=1,max=1000,initial=10)
        wx.StaticText(panel,-1,'Colormap:',(30,133))
        self.cmap = wx.ComboBox(panel,-1,'jet',(100,130),(100,-1),choices = frame.object_manager.matplotlib_colormaps,style=wx.CB_READONLY)
        self.color = wx.CheckBox(panel,-1,' Colorbar',(230,130))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def ondir(self,event):
        dlg = wx.DirDialog(self,"Give image set folder...",style=wx.DD_DEFAULT_STYLE)        
        if dlg.ShowModal() == wx.ID_OK:
            self.odir = dlg.GetPath()
            
    def onapply(self,event):
        if self.odir != 'None':
            cmap = self.cmap.GetValue()
            colorbar = self.color.GetValue()
            pympl.generate_mesh_image_set(self.odir,self.axis.GetValue(),self.step.GetValue(),frame.object_manager.call(self.pieces).data,cmap,colorbar)
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Must give output directory.","Error")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXZscaleFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Z-Stretch object",size=(350,305),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)

        self.pieces = pieces        
        
        wx.StaticText(panel,-1,'Z-strech:',(30,30))
        self.z = wx.SpinCtrl(panel,-1,'',(90,27),(100,-1),min=1,max=10000,initial=1)
        wx.StaticText(panel,-1,'Z-mode:',(30,60))
        self.mode = wx.ComboBox(panel,-1,'Multiply',(90,57),(100,-1),choices=['Multiply','Fraction'],style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,200),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
            
    def onapply(self,event):
        frame.object_manager.call_top(self.pieces).zstretch(self.z.GetValue(),self.mode.GetValue())
        frame.onreview_single_object([self.pieces[0]])
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class ToolboxFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"External files toolbox",size=(420,515),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        nb = wx.Notebook(panel)

        page1 = wx.Panel(nb)
        page2 = wx.Panel(nb)
        
        nb.AddPage(page1, "Continuous")
        
        self.num1 = 0
        self.paths1 = []
        self.load_files1 = wx.Button(page1,-1,'Load files',(30,30),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onload1,id=self.load_files1.GetId())
        self.number1 = wx.StaticText(page1,-1,'0 paths in system.',(30,30+50))

        wx.StaticText(page1,-1,'Operation:',(30,110))        
        choices1 = ['Mean and Variance','P25 - P50 - P75','Kurtosis','Skewness','Minimum and Maximum']
        self.operation1 = wx.ComboBox(page1,-1,'Mean and Variance',(130,107),(200,-1),choices = choices1,style=wx.CB_READONLY)
        
        self.calculate1 = wx.Button(page1,-1,'Calculate',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncalculate1,id=self.calculate1.GetId())
        self.cancel1 = wx.Button(page1,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel1.GetId())
        
        nb.AddPage(page2, "Discrete")
        
        self.num2 = 0
        self.paths2 = []
        self.load_files2 = wx.Button(page2,-1,'Load files',(30,30),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onload2,id=self.load_files2.GetId())
        self.number2 = wx.StaticText(page2,-1,'0 paths in system.',(30,30+50))

        wx.StaticText(page2,-1,'Operation:',(30,110))        
        choices2 = ['Most likely and entropy','Most likely','Entropy']
        self.operation2 = wx.ComboBox(page2,-1,'Most likely and entropy',(130,107),(200,-1),choices = choices2,style=wx.CB_READONLY)
        
        self.calculate2 = wx.Button(page2,-1,'Calculate',(210,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncalculate2,id=self.calculate2.GetId())
        self.cancel2 = wx.Button(page2,-1,'Cancel',(300,400),(80,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id=self.cancel2.GetId())
        
        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        panel.SetSizer(sizer)
        
    def onload1(self,event):
        dlg=wx.FileDialog(self,"Input ASCII files with continuous variable...",style=wx.OPEN|wx.MULTIPLE,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            self.paths1 = dlg.GetPaths()
            self.num1 = len(self.paths1)
            self.number1.SetLabel('%i paths in system.'%self.num1)
            
    def onload2(self,event):
        dlg=wx.FileDialog(self,"Input ASCII files with discrete variable...",style=wx.OPEN|wx.MULTIPLE,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            self.paths2 = dlg.GetPaths()
            self.num2 = len(self.paths2)
            self.number2.SetLabel('%i paths in system.'%self.num2)
                        
    def oncalculate1(self,event):
        # ['Mean and Variance','P25 - P50 - P75','Kurtosis','Skewness']
        if self.num1 > 1:
            self.dpath = odir = os.path.dirname(self.paths1[0])
            sims=len(self.paths1)
            header = self.get_header_number(self.paths1)
            fid = open(self.paths1[0])
            for h in xrange(header[0]): fid.readline()
            blocks=np.loadtxt(fid).shape[0]
            fid.close()
            d={}
            for k in xrange(sims):
                d[k]=open(self.paths1[k],'r')
                for h in xrange(header[k]): d[k].readline()
            if self.operation1.GetValue()=='Mean and Variance':
                fmean=open(self.dpath+'\\'+'mean.PRN','w')
                fvar=open(self.dpath+'\\'+'variance.PRN','w')
                fmean.write('MEAN\n1\nmean\n')
                fvar.write('VARIANCE\n1\nvariance\n')
                t=blocks
                tc=t
                c=0
                l=0
                dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
                line=np.zeros(sims)        
                for i in xrange(t):
                    if c>tc:
                        tc=tc+t
                        l=l+1
                    c=c+1
                    for j in xrange(sims):
                        line[j]=np.float(d[j].readline())
                    fmean.write('%15.6f\n'%line.mean())
                    fvar.write('%15.6f\n'%line.var())
                    dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
                fmean.close()
                fvar.close()
                for k in xrange(sims):
                    d[k].close()
                dialog.Destroy()
            elif self.operation1.GetValue()=='P25 - P50 - P75':
                f1q=open(self.dpath+'\\'+'1stquartile.PRN','w')
                f2q=open(self.dpath+'\\'+'2qdquartile.PRN','w')
                f3q=open(self.dpath+'\\'+'3rdquartile.PRN','w')
                f1q.write('QUARTILE1\n1\nQ1\n')
                f2q.write('QUARTILE2\n1\nQ2\n')
                f3q.write('QUARTILE3\n1\nQ3\n')
                t=blocks
                tc=t
                c=0
                l=0
                dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
                line=np.zeros(sims)        
                for i in xrange(t):
                    if c>tc:
                        tc=tc+t
                        l=l+1
                    c=c+1
                    for j in xrange(sims):
                        line[j]=np.float(d[j].readline())
                    f1q.write('%15.6f\n'%np.percentile(line,25))
                    f2q.write('%15.6f\n'%np.percentile(line,50))
                    f3q.write('%15.6f\n'%np.percentile(line,75))
                    dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
                f1q.close()
                f2q.close()
                f3q.close()
                for k in xrange(sims):
                    d[k].close()
                dialog.Destroy()
            elif self.operation1.GetValue()=='Kurtosis':
                fku=open(self.dpath+'\\'+'Kurtosis.PRN','w')
                fku.write('KURTOSIS\n1\nkurtosis\n')
                t=blocks
                tc=t
                c=0
                l=0
                dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
                line=np.zeros(sims)        
                for i in xrange(t):
                    if c>tc:
                        tc=tc+t
                        l=l+1
                    c=c+1
                    for j in xrange(sims):
                        line[j]=np.float(d[j].readline())
                    fku.write('%15.6f\n'%st.kurtosis(line))
                    dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
                fku.close()
                for k in xrange(sims):
                    d[k].close()
                dialog.Destroy()
            elif self.operation1.GetValue()=='Skewness':
                fsk=open(self.dpath+'\\'+'Skewness.PRN','w')
                fsk.write('SKEWNESS\n1\nskewness\n')
                t=blocks
                tc=t
                c=0
                l=0
                dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
                line=np.zeros(sims)        
                for i in xrange(t):
                    if c>tc:
                        tc=tc+t
                        l=l+1
                    c=c+1
                    for j in xrange(sims):
                        line[j]=np.float(d[j].readline())
                    fsk.write('%15.6f\n'%st.skew(line))
                    dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
                fsk.close()
                for k in xrange(sims):
                    d[k].close()
                dialog.Destroy()
            elif self.operation1.GetValue()=='Minimum and Maximum':
                fmin=open(self.dpath+'\\'+'minimum.PRN','w')
                fmax=open(self.dpath+'\\'+'maximum.PRN','w')
                fmin.write('MINIMUM\n1\nmin\n')
                fmax.write('MAXIMUM\n1\nmax\n')
                t=blocks
                tc=t
                c=0
                l=0
                dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
                line=np.zeros(sims)        
                for i in xrange(t):
                    if c>tc:
                        tc=tc+t
                        l=l+1
                    c=c+1
                    for j in xrange(sims):
                        line[j]=np.float(d[j].readline())
                    fmin.write('%15.6f\n'%line.min())
                    fmax.write('%15.6f\n'%line.max())
                    dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
                fmin.close()
                fmax.close()
                for k in xrange(sims):
                    d[k].close()
                dialog.Destroy()
        else:
            wx.MessageBox('You need at least 2 files to proceed', 'Files missing', wx.OK | wx.ICON_INFORMATION)
            
    def get_header_number(self,paths,at_least=3):
        header = []
        for i in xrange(len(paths)):
            fid = open(paths[i])
            flag = True
            counter = at_least
            flag = False
            cc = 0
            while counter != 0:
                if fid.readline().replace('\n','').replace('.','').replace('-','').replace('e','').replace('+','').split()[0].isdigit():
                    counter = counter - 1
                    cc = cc + 1
                    flag = True
                else:
                    if flag:
                        counter = at_least
                        flag = False
                        cc = cc + 1
                    else:
                        cc = cc + 1
            fid.close()
            header.append(cc-at_least)
        return header
            
    def oncalculate2(self,event):
        # ['Most likely and entropy','Most likely','Entropy']
        if self.num2 > 1:
            self.dpath = odir = os.path.dirname(self.paths2[0])
            sims=len(self.paths2)
            header = self.get_header_number(self.paths2)
            fid = open(self.paths2[0])
            for h in xrange(header[0]): fid.readline()
            data=np.loadtxt(fid)
            unique = np.unique(data)
            blocks = data.shape[0]
            fid.close()
            d={}
            for k in xrange(sims):
                d[k]=open(self.paths2[k],'r')
                for h in xrange(header[k]): d[k].readline()
            if self.operation2.GetValue()=='Most likely and entropy':
                fmost=open(self.dpath+'\\'+'most_likely.PRN','w')
                fmost.write('MOST_LIKELY\n1\nmost_likely\n')
                fent=open(self.dpath+'\\'+'entropy.PRN','w')
                fent.write('ENTROPY\n1\nentropy\n')
                t=blocks
                tc=t
                c=0
                l=0
                prob = np.zeros(unique.shape[0])
                dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
                line=np.zeros(sims,dtype='uint8')        
                for i in xrange(t):
                    if c>tc:
                        tc=tc+t
                        l=l+1
                    c=c+1
                    for j in xrange(sims):
                        # counts = np.bincount(a)
                        # np.argmax(counts)
                        line[j]=np.int(np.float(d[j].readline()))
                    for k in xrange(prob.shape[0]):
                        m = (line==unique[k])
                        prob[k] = np.count_nonzero(m)/sims
                    m2 = (prob!=0)
                    fmost.write('%i\n'%np.argmax(np.bincount(line)))
                    fent.write('%15.6f\n'%(-np.sum(prob[m2]*np.log(prob[m2]))))
                    dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
                fmost.close()
                fent.close()
                for k in xrange(sims):
                    d[k].close()
                dialog.Destroy()
            elif self.operation2.GetValue()=='Most likely':
                fmost=open(self.dpath+'\\'+'most_likely.PRN','w')
                fmost.write('MOST_LIKELY\n1\nmost_likely\n')
                t=blocks
                tc=t
                c=0
                l=0
                dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
                line=np.zeros(sims,dtype='uint8')        
                for i in xrange(t):
                    if c>tc:
                        tc=tc+t
                        l=l+1
                    c=c+1
                    for j in xrange(sims):
                        # counts = np.bincount(a)
                        # np.argmax(counts)
                        line[j]=np.int(d[j].readline())
                    fmost.write('%i\n'%np.argmax(np.bincount(line)))
                    dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
                fmost.close()
                for k in xrange(sims):
                    d[k].close()
                dialog.Destroy()
            elif self.operation2.GetValue()=='Entropy':
                fent=open(self.dpath+'\\'+'entropy.PRN','w')
                fent.write('ENTROPY\n1\nentropy\n')
                t=blocks
                tc=t
                c=0
                l=0
                prob = np.zeros(unique.shape[0])
                dialog = wx.ProgressDialog ( 'Progress', 'Calculating basic simulation statistics.', maximum = t-1, style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_ESTIMATED_TIME | wx.PD_AUTO_HIDE )
                line=np.zeros(sims,dtype='uint8')        
                for i in xrange(t):
                    if c>tc:
                        tc=tc+t
                        l=l+1
                    c=c+1
                    for j in xrange(sims):
                        # counts = np.bincount(a)
                        # np.argmax(counts)
                        line[j]=np.int(d[j].readline())
                    for k in xrange(prob.shape[0]):
                        m = (line==unique[k])
                        prob[k] = np.count_nonzero(m)/sims
                    m2 = (prob!=0)
                    # -np.sum(prob*np.log(prob))
                    fent.write('%15.6f\n'%(-np.sum(prob[m2]*np.log(prob[m2]))))
                    dialog.Update ( i, 'Step...'+'  '+repr(i)+'   of   '+repr(t-1) )
                fent.close()
                for k in xrange(sims):
                    d[k].close()
                dialog.Destroy()
        else:
            wx.MessageBox('You need at least 2 files to proceed', 'Files missing', wx.OK | wx.ICON_INFORMATION)
        
    def oncancel(self,event):
        self.Destroy()
        
class RdosaZonesFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Zoned Reservoir distribution optimization by simulated annealing",size=(370,535),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)

        wx.StaticText(panel,-1,'Distribution:',(30,30))
        self.dobject = wx.ComboBox(panel,-1,self.check_what_goes()[0],(130,27),(90,-1),choices=self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.ondobject,id=self.dobject.GetId())
        self.dvariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.dobject.GetValue()].get_numeric_variable_names()[0],(230,27),(90,-1),choices=frame.object_manager.object_list[self.dobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
    		
        wx.StaticText(panel,-1,'Seismic:',(30,60))
        self.sobject = wx.ComboBox(panel,-1,self.check_what_goes2()[0],(130,57),(90,-1),choices=self.check_what_goes2(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onsobject,id=self.sobject.GetId())
        self.svariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0],(230,57),(90,-1),choices=frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'Ip:',(30,90))
        self.pobject = wx.ComboBox(panel,-1,self.check_what_goes4()[0],(130,87),(90,-1),choices=self.check_what_goes4(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onpobject,id=self.pobject.GetId())
        self.pvariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.pobject.GetValue()].get_numeric_variable_names()[0],(230,87),(90,-1),choices=frame.object_manager.object_list[self.pobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
    		
        wx.StaticText(panel,-1,'Wavelet:',(30,120))
        self.wobject = wx.ComboBox(panel,-1,self.check_what_goes3()[0],(130,117),(90,-1),choices=self.check_what_goes3(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onwobject,id=self.wobject.GetId())
        self.wvariable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0],(230,117),(90,-1),choices=frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.wvariable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0],(300,27),(60,-1),choices=frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
    		
        wx.StaticText(panel,-1,'Model;Z-range:',(30,150))
        self.model = wx.ComboBox(panel,-1,'Exponential',(130,147),(90,-1),choices=['Exponential','Gaussian','Spherical'],style=wx.CB_READONLY)
        self.zrange = wx.SpinCtrl(panel,-1,'',(230,147),(90,-1),min=1,max=100000,initial=13)
    		
        wx.StaticText(panel,-1,'Iterations;Switch prob.:',(30,180))
        self.ites = wx.SpinCtrl(panel,-1,'',(150,177),(70,-1),min=2,max=100000,initial=300)
        self.sprob = FS.FloatSpin(panel, -1,(230, 177),(70,-1),min_val=0,max_val=1,value = 0.5,digits=3)
    		
        wx.StaticText(panel,-1,'Variogram weights:',(30,210))
        self.var_weigths = wx.TextCtrl(panel,-1,'0.4;0.3;0.2;0.1',(130,207),(150,-1))

        wx.StaticText(panel,-1,'Zones:',(30,240))
        self.zobject = wx.ComboBox(panel,-1,self.check_what_goes4()[0],(130,237),(90,-1),choices=self.check_what_goes4(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onzobject,id=self.zobject.GetId())
        self.zvariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.zobject.GetValue()].get_numeric_variable_names()[0],(230,237),(90,-1),choices=frame.object_manager.object_list[self.zobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)    
    
        wx.StaticText(panel,-1,'Synthetic coordinates:',(30,270))
        self.coords = wx.TextCtrl(panel,-1,self.get_random_coords_string(10),(30,300),(300,100),style = wx.TE_MULTILINE)
        
        self.odir = 'None'
        self.output = wx.Button(panel,-1,'Output',(150,267),(100,-1))
        self.Bind(wx.EVT_BUTTON,self.onoutput,id=self.output.GetId())
    		
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,430),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,430),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onoutput(self,event):
        dlg=wx.DirDialog(self,"Choose output directory.",style=wx.SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            self.odir=dlg.GetPath()
        
    def get_random_coords_string(self,number):
        blocks = frame.object_manager.object_list[self.sobject.GetValue()].blocks
        x = np.random.randint(0,blocks[0],number)
        y = np.random.randint(0,blocks[1],number)
        s = ''
        for i in xrange(x.shape[0]):
            s = s + str(x[i])+';'+str(y[i])+'\n'
        return s
		
    def check_what_goes(self):
        inside = ['point','data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
		
    def check_what_goes2(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
		
    def check_what_goes3(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def check_what_goes4(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
		
    def ondobject(self,event):
        self.dvariable.Clear()
        self.dvariable.AppendItems(frame.object_manager.object_list[self.dobject.GetValue()].get_numeric_variable_names())
        self.dvariable.SetValue(frame.object_manager.object_list[self.dobject.GetValue()].get_numeric_variable_names()[0])
		
    def onsobject(self,event):
        self.svariable.Clear()
        self.svariable.AppendItems(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names())
        self.svariable.SetValue(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0])
        self.coords.SetValue(self.get_random_coords_string(5))
        
    def onpobject(self,event):
        self.pvariable.Clear()
        self.pvariable.AppendItems(frame.object_manager.object_list[self.pobject.GetValue()].get_numeric_variable_names())
        self.pvariable.SetValue(frame.object_manager.object_list[self.pobject.GetValue()].get_numeric_variable_names()[0])
        #self.coords.SetValue(self.get_random_coords_string(5))
        
    def onzobject(self,event):
        self.zvariable.Clear()
        self.zvariable.AppendItems(frame.object_manager.object_list[self.zobject.GetValue()].get_numeric_variable_names())
        self.zvariable.SetValue(frame.object_manager.object_list[self.zobject.GetValue()].get_numeric_variable_names()[0])
        #self.coords.SetValue(self.get_random_coords_string(5))
		
    def onwobject(self,event):
        self.wvariable1.Clear()
        self.wvariable1.AppendItems(frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names())
        self.wvariable1.SetValue(frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0])
        
            
    def onapply(self,event):
        if self.odir!='None':
            sy = self.coords.GetValue().split('\n')
            sy.pop()
            #print sy,sy[0].split(';')
            sycoord = np.zeros((len(sy),2),dtype='int16')
            for i in xrange(len(sy)): sycoord[i,:] = np.int_(sy[i].split(';'))[:]
            par = plg.read_par_zones(frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data,
                                                                frame.object_manager.object_list[self.pobject.GetValue()].variable[self.pvariable.GetValue()].data
                                                                ,self.model.GetValue()
                                                                ,self.zrange.GetValue()
                                                                ,sycoord,frame.object_manager.object_list[self.wobject.GetValue()].variable[self.wvariable1.GetValue()].data
                                                                ,self.ites.GetValue()
                                                                ,frame.object_manager.object_list[self.dobject.GetValue()].variable[self.dvariable.GetValue()].data
                                                                ,self.sprob.GetValue()
                                                                ,np.float_(self.var_weigths.GetValue().split(';'))/np.sum(np.float_(self.var_weigths.GetValue().split(';')))
                                                                ,frame.object_manager.object_list[self.zobject.GetValue()].variable[self.zvariable.GetValue()].data)
            proc = plg.run_procedure_zones(par,self.odir)
            mesh_data = np.zeros((proc.ccresult.shape[0]-1,proc.ccresult.shape[1],1,4),dtype='float32')
            mesh_data[:,:,0,0] = proc.ccresult[1:,:] # CORRELATIONS
            mesh_data[:,:,0,1] = proc.vvresult[1:,:] # VARIOGRAM RESIDUES
            mesh_data[:,:,0,2] = proc.ssresult[1:,:] # SEISMIC RESIDUES
            mesh_data[:,:,0,3] = proc.aaresult[1:,:] # ACCEPTANCE TABLE
            size = (float(mesh_data.shape[1]/mesh_data.shape[0]),1,1)
            frame.object_manager.add_mesh_object((mesh_data.shape[0],mesh_data.shape[1],1),size,(0,0,0),-999,'RDO_results',['correlation_table','variogram_residues','seismic_residues','acceptance_table'],mesh_data)
            frame.update_last_object_list()
            frame.object_manager.add_data_object(-999,'RDO_distribution',['X','Y','Z','Synthetic_distribution'],proc.ips,['float32','float32','float32','float32'],['continuous','continuous','continuous','continuous'])
            frame.update_last_object_list()
            self.Destroy()
        else:
            wx.MessageBox("You must have an output path.","Warning")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class RdosaFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Reservoir distribution optimization by simulated annealing",size=(370,505),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)

        wx.StaticText(panel,-1,'Distribution:',(30,30))
        self.dobject = wx.ComboBox(panel,-1,self.check_what_goes()[0],(130,27),(90,-1),choices=self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.ondobject,id=self.dobject.GetId())
        self.dvariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.dobject.GetValue()].get_numeric_variable_names()[0],(230,27),(90,-1),choices=frame.object_manager.object_list[self.dobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
    		
        wx.StaticText(panel,-1,'Seismic:',(30,60))
        self.sobject = wx.ComboBox(panel,-1,self.check_what_goes2()[0],(130,57),(90,-1),choices=self.check_what_goes2(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onsobject,id=self.sobject.GetId())
        self.svariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0],(230,57),(90,-1),choices=frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'Ip:',(30,90))
        self.pobject = wx.ComboBox(panel,-1,self.check_what_goes4()[0],(130,87),(90,-1),choices=self.check_what_goes4(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onpobject,id=self.pobject.GetId())
        self.pvariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.pobject.GetValue()].get_numeric_variable_names()[0],(230,87),(90,-1),choices=frame.object_manager.object_list[self.pobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
    		
        wx.StaticText(panel,-1,'Wavelet:',(30,120))
        self.wobject = wx.ComboBox(panel,-1,self.check_what_goes3()[0],(130,117),(90,-1),choices=self.check_what_goes3(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onwobject,id=self.wobject.GetId())
        self.wvariable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0],(230,117),(90,-1),choices=frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.wvariable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0],(300,27),(60,-1),choices=frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
    		
        wx.StaticText(panel,-1,'Model;Z-range:',(30,150))
        self.model = wx.ComboBox(panel,-1,'Exponential',(130,147),(90,-1),choices=['Exponential','Gaussian','Spherical'],style=wx.CB_READONLY)
        self.zrange = wx.SpinCtrl(panel,-1,'',(230,147),(90,-1),min=1,max=100000,initial=13)
    		
        wx.StaticText(panel,-1,'Iterations;Switch prob.:',(30,180))
        self.ites = wx.SpinCtrl(panel,-1,'',(150,177),(70,-1),min=2,max=100000,initial=300)
        self.sprob = FS.FloatSpin(panel, -1,(230, 177),(70,-1),min_val=0,max_val=1,value = 0.5,digits=3)
    		
        wx.StaticText(panel,-1,'Variogram weights:',(30,210))
        self.var_weigths = wx.TextCtrl(panel,-1,'0.4;0.3;0.2;0.1',(130,207),(150,-1))
    		
        wx.StaticText(panel,-1,'Synthetic coordinates:',(30,240))
        self.coords = wx.TextCtrl(panel,-1,self.get_random_coords_string(10),(30,260),(300,100),style = wx.TE_MULTILINE)
        
        self.odir = 'None'
        self.output = wx.Button(panel,-1,'Output',(150,237),(100,-1))
        self.Bind(wx.EVT_BUTTON,self.onoutput,id=self.output.GetId())
    		
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,400),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,400),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onoutput(self,event):
        dlg=wx.DirDialog(self,"Choose output directory.",style=wx.SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            self.odir=dlg.GetPath()
        
    def get_random_coords_string(self,number):
        blocks = frame.object_manager.object_list[self.sobject.GetValue()].blocks
        x = np.random.randint(0,blocks[0],number)
        y = np.random.randint(0,blocks[1],number)
        s = ''
        for i in xrange(x.shape[0]):
            s = s + str(x[i])+';'+str(y[i])+'\n'
        return s
		
    def check_what_goes(self):
        inside = ['point','data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
		
    def check_what_goes2(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
		
    def check_what_goes3(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def check_what_goes4(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
		
    def ondobject(self,event):
        self.dvariable.Clear()
        self.dvariable.AppendItems(frame.object_manager.object_list[self.dobject.GetValue()].get_numeric_variable_names())
        self.dvariable.SetValue(frame.object_manager.object_list[self.dobject.GetValue()].get_numeric_variable_names()[0])
		
    def onsobject(self,event):
        self.svariable.Clear()
        self.svariable.AppendItems(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names())
        self.svariable.SetValue(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0])
        self.coords.SetValue(self.get_random_coords_string(5))
        
    def onpobject(self,event):
        self.pvariable.Clear()
        self.pvariable.AppendItems(frame.object_manager.object_list[self.pobject.GetValue()].get_numeric_variable_names())
        self.pvariable.SetValue(frame.object_manager.object_list[self.pobject.GetValue()].get_numeric_variable_names()[0])
        #self.coords.SetValue(self.get_random_coords_string(5))
		
    def onwobject(self,event):
        self.wvariable1.Clear()
        self.wvariable1.AppendItems(frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names())
        self.wvariable1.SetValue(frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0])
        
            
    def onapply(self,event):
        if self.odir!='None':
            sy = self.coords.GetValue().split('\n')
            sy.pop()
            #print sy,sy[0].split(';')
            sycoord = np.zeros((len(sy),2),dtype='int16')
            for i in xrange(len(sy)): sycoord[i,:] = np.int_(sy[i].split(';'))[:]
            par = plg.read_par(frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data,
                                                                frame.object_manager.object_list[self.pobject.GetValue()].variable[self.pvariable.GetValue()].data
                                                                ,self.model.GetValue()
                                                                ,self.zrange.GetValue()
                                                                ,sycoord,frame.object_manager.object_list[self.wobject.GetValue()].variable[self.wvariable1.GetValue()].data
                                                                ,self.ites.GetValue()
                                                                ,frame.object_manager.object_list[self.dobject.GetValue()].variable[self.dvariable.GetValue()].data
                                                                ,self.sprob.GetValue()
                                                                ,np.float_(self.var_weigths.GetValue().split(';'))/np.sum(np.float_(self.var_weigths.GetValue().split(';'))))
            proc = plg.run_procedure(par,self.odir)
            mesh_data = np.zeros((proc.ccresult.shape[0]-1,proc.ccresult.shape[1],1,4),dtype='float32')
            mesh_data[:,:,0,0] = proc.ccresult[1:,:] # CORRELATIONS
            mesh_data[:,:,0,1] = proc.vvresult[1:,:] # VARIOGRAM RESIDUES
            mesh_data[:,:,0,2] = proc.ssresult[1:,:] # SEISMIC RESIDUES
            mesh_data[:,:,0,3] = proc.aaresult[1:,:] # ACCEPTANCE TABLE
            size = (float(mesh_data.shape[1]/mesh_data.shape[0]),1,1)
            frame.object_manager.add_mesh_object((mesh_data.shape[0],mesh_data.shape[1],1),size,(0,0,0),-999,'RDO_results',['correlation_table','variogram_residues','seismic_residues','acceptance_table'],mesh_data)
            frame.update_last_object_list()
            frame.object_manager.add_data_object(-999,'RDO_distribution',['X','Y','Z','Synthetic_distribution'],proc.ips,['float32','float32','float32','float32'],['continuous','continuous','continuous','continuous'])
            frame.update_last_object_list()
            self.Destroy()
        else:
            wx.MessageBox("You must have an output path.","Warning")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class FSimFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Fracture stochastic simulation frame",size=(400,565),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        wx.StaticBox(panel,-1,'Mesh specifics',(10,10),(380,140))
        wx.StaticText(panel,-1,
                      '              Number                   Size                         First coordinate',
                      (30,30))#.SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(30,60))#.SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(30,90))#.SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(30,120))#.SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(70,57),(90,-1),min=1,max=100000000,initial=100)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(70,87),(90,-1),min=1,max=100000000,initial=100)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(70,117),(90,-1),min=1,max=100000000,initial=30)
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(170, 57),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(170, 87),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(170, 117),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(270, 57),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(270, 87),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(270, 117),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        wx.StaticText(panel,-1,'Number of fractures:',(30,170))
        self.number = wx.SpinCtrl(panel,-1,'',(150,167),min=2,max=10000,initial=1000)
        self.pmesh_flag = wx.CheckBox(panel,-1,'  use probability mesh',(30,200))
        
        if len(self.check_what_goes())!=0:
            self.object = wx.ComboBox(panel,-1,self.check_what_goes()[0],(170,197),(100,-1),choices = self.check_what_goes(),style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.variable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0],(280,197),(90,-1),choices = frame.object_manager.object_list[self.object.GetValue()].get_variable_names(),style=wx.CB_READONLY)
        else:
            self.object = wx.ComboBox(panel,-1,'None',(170,197),(100,-1),choices = ['None'],style=wx.CB_READONLY)
            self.Bind(wx.EVT_COMBOBOX,self.onobjectcombo,id=self.object.GetId())
            self.variable = wx.ComboBox(panel,-1,'None',(280,197),(90,-1),choices = ['None'],style=wx.CB_READONLY)
            self.object.Disable()
            self.variable.Disable()
            self.pmesh_flag.Disable()
            
        wx.StaticText(panel,-1,'Size (min;max;peak):',(30,230))
        self.smin = wx.SpinCtrl(panel,-1,'',(150,227),(80,-1),min=1,max=1000,initial=1)
        self.smax = wx.SpinCtrl(panel,-1,'',(240,227),(80,-1),min=2,max=10000,initial=9)
        self.speak = wx.SpinCtrl(panel,-1,'',(330,227),(50,-1),min=1,max=10000,initial=2)
        
        wx.StaticText(panel,-1,'Azimuth(min;max;peak):',(30,260))
        self.amin = wx.SpinCtrl(panel,-1,'',(150,257),(80,-1),min=0,max=360,initial=30)
        self.amax = wx.SpinCtrl(panel,-1,'',(240,257),(80,-1),min=0,max=360,initial=60)
        self.apeak = wx.SpinCtrl(panel,-1,'',(330,257),(50,-1),min=0,max=360,initial=45)
        
        wx.StaticText(panel,-1,'Dip(min;max;peak):',(30,290))
        self.dmin = wx.SpinCtrl(panel,-1,'',(150,287),(80,-1),min=0,max=360,initial=30)
        self.dmax = wx.SpinCtrl(panel,-1,'',(240,287),(80,-1),min=0,max=360,initial=60)
        self.dpeak = wx.SpinCtrl(panel,-1,'',(330,287),(50,-1),min=0,max=360,initial=45)
        
        wx.StaticText(panel,-1,'Name:',(30,320))
        self.name = wx.TextCtrl(panel,-1,'Fracture_set',(150,317),(150,-1))
        
        wx.StaticText(panel,-1,'Seed|Sims|Tries:',(30,410))
        self.seed = wx.SpinCtrl(panel,-1,'',(150,407),(80,-1),min=1000000,max=9999999,initial=1234567)
        self.sims = wx.SpinCtrl(panel,-1,'',(240,407),(80,-1),min=2,max=300,initial=8)
        self.tries = wx.SpinCtrl(panel,-1,'',(330,407),(50,-1),min=0,max=100,initial=3)
        
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(60,460),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,460),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onapply(self,event):
        # SIZE DISTRIBUTION
        min_size = self.smin.GetValue()
        max_size = self.smax.GetValue()
        peak_size = self.speak.GetValue()
        # AZIMUTH DISTRIBUTION
        min_azi = self.amin.GetValue()
        max_azi = self.amax.GetValue()
        peak_azi = self.apeak.GetValue()
        # DIP DISTRIBUTION
        min_dip = self.dmin.GetValue()
        max_dip = self.dmax.GetValue()
        peak_dip = self.dpeak.GetValue()
        if min_size < peak_size < max_size and min_azi < peak_azi < max_azi and min_dip < peak_dip < max_dip:
            pflag = False
            if self.pmesh_flag.GetValue():
                if frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()>0 and frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.min()>=0:
                    pflag = True
                    pmesh = frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data[:,:,:]/frame.object_manager.object_list[self.object.GetValue()].variable[self.variable.GetValue()].data.max()
            name = self.name.GetValue()
            seed = self.seed.GetValue()
            sims = self.sims.GetValue()
            tries = self.tries.GetValue()
            blocks = (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
            size   = (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
            first  = (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
            number = self.number.GetValue()
            #cbis(opath,ipoint,blpoint,blocks,error_flag=False,error=None,nodes=4,bnodes=4,model='Exponential',amp=30,nugget=0,ratio1=1,ratio2=1,angle=0,simulations=1,seed=12345,tries=3,size=(1,1,1),first=(0,0,0))
            if not pflag:            
                data = plg.fracture_sim(number,[min_size,max_size,peak_size],[min_azi,max_azi,peak_azi],[min_dip,max_dip,peak_dip],sims,seed,tries,blocks,size,first)
            else:
                data = plg.fracture_sim_wpmesh(number,[min_size,max_size,peak_size],[min_azi,max_azi,peak_azi],[min_dip,max_dip,peak_dip],sims,seed,tries,blocks,size,first,pmesh)
            #frame.object_manager.call(selection).stream_flag = False
            #frame.object_manager.call(selection).quiver_flag = False
            #frame.object_manager.call(selection).graph_flag  = False
            #azimuth = frame.object_manager.call(selection).data
            #dip = frame.object_manager.call(selection1).data
            #sizeh = frame.object_manager.call(selection2).data
            #sizev = frame.object_manager.call(selection3).data
            if name in frame.object_manager.object_name: 
                name = frame.object_manager.do_newname_from_name(name)
            null = -999 #self.object_manager.call_top(selection).null
            vname = ['Size','Azimuth','Dip']
            frame.object_manager.add_point_object(data[:,0],data[:,1],data[:,2],null,name,vname,data[:,3:])
            self.last_object = name
            frame.object_manager.call([name,vname[0]]).fracture_flag = True
            frame.object_manager.call([name,vname[0]]).calculate_fracture_variables(frame.object_manager.call_top([name,vname[0]]).x,frame.object_manager.call_top([name,vname[0]]).y,frame.object_manager.call_top([name,vname[0]]).z,frame.object_manager.call([name,vname[1]]).data,frame.object_manager.call([name,vname[2]]).data,frame.object_manager.call([name,vname[0]]).data)
            frame.update_last_object_list()            
            wx.MessageBox("Operation is finished. Check output directory.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Minimum must be inferior to peak which is inferior to maximum in all distributions. Check distribution parameters.","Error")
            
    def onobjectcombo(self,event):
        self.variable.Clear()
        self.variable.AppendItems(frame.object_manager.object_list[self.object.GetValue()].get_variable_names())
        self.variable.SetValue(frame.object_manager.object_list[self.object.GetValue()].get_variable_names()[0])
        self.blocks_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[0])
        self.blocks_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[1])
        self.blocks_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].blocks[2])
        
        self.size_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[0])
        self.size_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[1])
        self.size_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].size[2])
        
        self.first_in_x.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[0])
        self.first_in_y.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[1])
        self.first_in_z.SetValue(frame.object_manager.object_list[self.object.GetValue()].first[2])
        
    def oniobject(self,event):
        self.ivariable.Clear()
        self.ivariable.AppendItems(frame.object_manager.object_list[self.iobject.GetValue()].get_numeric_variable_names())
        self.ivariable.SetValue(frame.object_manager.object_list[self.iobject.GetValue()].get_numeric_variable_names()[0])
        #self.coords.SetValue(self.get_random_coords_string(5))
    
    def onbobject(self,event):
        self.bvariable.Clear()
        self.evariable.Clear()
        self.bvariable.AppendItems(frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names())
        self.bvariable.SetValue(frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names()[0])
        self.evariable.AppendItems(frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names())
        self.evariable.SetValue(frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names()[0])
        #self.coords.SetValue(self.get_random_coords_string(5))
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def ondir(self,event):
        dlg=wx.DirDialog(self,"Choose output directory.",style=wx.SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            self.output_dir=dlg.GetPath()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CBISFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"CBIS launcher frame",size=(400,565),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.output_dir = 'None'

        wx.StaticBox(panel,-1,'Mesh specifics',(10,10),(380,140))
        wx.StaticText(panel,-1,
                      '              Number                   Size                         First coordinate',
                      (30,30))#.SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(30,60))#.SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(30,90))#.SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(30,120))#.SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(70,57),(90,-1),min=1,max=100000000,initial=100)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(70,87),(90,-1),min=1,max=100000000,initial=100)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(70,117),(90,-1),min=1,max=100000000,initial=30)
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(170, 57),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(170, 87),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(170, 117),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(270, 57),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(270, 87),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(270, 117),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        #wx.StaticText(panel,-1,':',(30,170))
        #self.stype = wx.ComboBox(panel,-1,'channels',(150,167),(100,-1),choices=['channels','layers','sin_fold','cos_fold','delta'],style=wx.CB_READONLY)
        #self.allequal = wx.CheckBox(panel,-1,'  all equal?',(260,167))
        self.dir = wx.Button(panel,-1,'Output',(30,160),(100,30))
        self.Bind(wx.EVT_BUTTON,self.ondir,id=self.dir.GetId())
        
        #cbis(opath,ipoint,blpoint,blocks,error_flag,error,nodes=4,bnodes=4,model='Exponential',amp=30,nugget=0,ratio1=1,ratio2=1,angle=0,simulations=1,seed=12345,tries=3,size=(1,1,1),first=(0,0,0))
        
        wx.StaticText(panel,-1,'Hard-data:',(30,200))
        self.iobject = wx.ComboBox(panel,-1,self.check_what_goes()[0],(150,197),(90,-1),choices=self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.oniobject,id=self.iobject.GetId())
        self.ivariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.iobject.GetValue()].get_numeric_variable_names()[0],(250,197),(90,-1),choices=frame.object_manager.object_list[self.iobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'Block-data:',(30,230))
        self.bobject = wx.ComboBox(panel,-1,self.check_what_goes()[0],(130,227),(80,-1),choices=self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onbobject,id=self.bobject.GetId())
        self.bvariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names()[0],(220,227),(80,-1),choices=frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        self.evariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names()[0],(305,227),(65,-1),choices=frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)        
        self.error = wx.CheckBox(panel,-1,'  use error',(305,257))        
        
        wx.StaticText(panel,-1,'Grid-nodes:',(30,260))
        self.gnodes = wx.SpinCtrl(panel,-1,'',(150,257),(100,-1),min=1,max=100,initial=4)
        wx.StaticText(panel,-1,'Block-nodes:',(30,290))
        self.bnodes = wx.SpinCtrl(panel,-1,'',(150,287),(70,-1),min=1,max=100,initial=7)
        #self.delta2 = wx.SpinCtrl(panel,-1,'',(230,287),(70,-1),min=1,max=100,initial=3)
        wx.StaticText(panel,-1,'Model:',(30,320))
        self.model = wx.ComboBox(panel,-1,'Exponential',(150,317),(100,-1),choices=['Exponential','Gaussian','Spheric'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Range|Angle:',(30,350))
        self.amp = wx.SpinCtrl(panel,-1,'',(150,347),(90,-1),min=1,max=999999,initial=22)
        self.angle = wx.SpinCtrl(panel,-1,'',(250,347),(90,-1),min=0,max=90,initial=0)
        wx.StaticText(panel,-1,'Rat1|Rat2|nugget:',(30,380))
        self.ratio1 = wx.SpinCtrl(panel,-1,'',(150,377),(80,-1),min=0,max=100,initial=100)
        self.ratio2 = wx.SpinCtrl(panel,-1,'',(240,377),(80,-1),min=0,max=100,initial=100)
        self.nugget = wx.SpinCtrl(panel,-1,'',(330,377),(50,-1),min=0,max=100,initial=0)
        
        wx.StaticText(panel,-1,'Seed|Sims|Tries:',(30,410))
        self.seed = wx.SpinCtrl(panel,-1,'',(150,407),(80,-1),min=1000000,max=9999999,initial=1234567)
        self.sims = wx.SpinCtrl(panel,-1,'',(240,407),(80,-1),min=2,max=300,initial=8)
        self.tries = wx.SpinCtrl(panel,-1,'',(330,407),(50,-1),min=0,max=100,initial=3)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(60,460),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,460),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onapply(self,event):
        if self.output_dir!='None':
            opath = self.output_dir
            ipoint = np.hstack((frame.object_manager.object_list[self.iobject.GetValue()].X[:,np.newaxis],frame.object_manager.object_list[self.iobject.GetValue()].Y[:,np.newaxis],frame.object_manager.object_list[self.iobject.GetValue()].Z[:,np.newaxis],frame.object_manager.object_list[self.iobject.GetValue()].variable[self.ivariable.GetValue()].data[:,np.newaxis]))            
            bpoint = np.hstack((frame.object_manager.object_list[self.bobject.GetValue()].X[:,np.newaxis],frame.object_manager.object_list[self.bobject.GetValue()].Y[:,np.newaxis],frame.object_manager.object_list[self.bobject.GetValue()].Z[:,np.newaxis],frame.object_manager.object_list[self.bobject.GetValue()].variable[self.bvariable.GetValue()].data[:,np.newaxis]))
            error_flag = self.error.GetValue()
            if error_flag: error = frame.object_manager.object_list[self.bobject.GetValue()].variable[self.evariable.GetValue()].data
            else: error = None
            gnodes = self.gnodes.GetValue()
            bnodes = self.bnodes.GetValue()
            model = self.model.GetValue()
            amp = self.amp.GetValue()
            angle = self.angle.GetValue()
            ratio1 = self.ratio1.GetValue()/100
            ratio2 = self.ratio2.GetValue()/100
            nugget = self.ratio1.GetValue()/100
            seed = self.seed.GetValue()
            sims = self.sims.GetValue()
            tries = self.tries.GetValue()
            blocks = (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
            size   = (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
            first  = (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
            #cbis(opath,ipoint,blpoint,blocks,error_flag=False,error=None,nodes=4,bnodes=4,model='Exponential',amp=30,nugget=0,ratio1=1,ratio2=1,angle=0,simulations=1,seed=12345,tries=3,size=(1,1,1),first=(0,0,0))
            plg.cbis(opath,ipoint,bpoint,blocks,error_flag,error,gnodes,bnodes,model,amp,nugget,ratio1,ratio2,angle,sims,seed,tries,size,first)
            wx.MessageBox("Operation is finished. Check output directory.","Information")
            self.Destroy()
        else:
            wx.MessageBox("You must give an output directory.","Information")
        
    def oniobject(self,event):
        self.ivariable.Clear()
        self.ivariable.AppendItems(frame.object_manager.object_list[self.iobject.GetValue()].get_numeric_variable_names())
        self.ivariable.SetValue(frame.object_manager.object_list[self.iobject.GetValue()].get_numeric_variable_names()[0])
        #self.coords.SetValue(self.get_random_coords_string(5))
    
    def onbobject(self,event):
        self.bvariable.Clear()
        self.evariable.Clear()
        self.bvariable.AppendItems(frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names())
        self.bvariable.SetValue(frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names()[0])
        self.evariable.AppendItems(frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names())
        self.evariable.SetValue(frame.object_manager.object_list[self.bobject.GetValue()].get_numeric_variable_names()[0])
        #self.coords.SetValue(self.get_random_coords_string(5))
        
    def check_what_goes(self):
        inside = ['point']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def ondir(self,event):
        dlg=wx.DirDialog(self,"Choose output directory.",style=wx.SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            self.output_dir=dlg.GetPath()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class MySheet(sheet.CSheet):
    def __init__(self, parent):
        sheet.CSheet.__init__(self, parent)
        self.row = self.col = 0
        self.SetNumberRows(55)
        self.SetNumberCols(3)
        column_names = ['Depth', 'Distribution', 'Error']
        for i in range(55):
            self.SetRowSize(i, 20)
        for index, name in enumerate(column_names):
            self.SetColLabelValue(index, name)

    def OnGridSelectCell(self, event):
        self.row, self.col = event.GetRow(), event.GetCol()
        #control = self.GetParent().GetParent().position
        value =  self.GetColLabelValue(self.col) + self.GetRowLabelValue(self.row)
        #control.SetValue(value)
        event.Skip()
        
class PseudoDistributionMakerFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Pseudo Distribution parser",size=(350,365),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        #panel=self.panel=wx.Panel(self)
        notebook = wx.Notebook(self, -1, style=wx.NB_TOP)
        panel=self.panel=wx.Panel(notebook)
        notebook.AddPage(panel, 'Global parameters')
        #self.pieces = pieces
        self.flag = False
        self.data = None
        
        wx.StaticText(panel,-1,'Point-data:',(30,30))
        self.sobject = wx.ComboBox(panel,-1,self.check_what_goes2()[0],(130,27),(90,-1),choices=self.check_what_goes2(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onsobject,id=self.sobject.GetId())
        self.svariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0],(230,27),(90,-1),choices=frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        # choices=['Gaussian','Exponential','Rayleigh','Triangular','Von Mises','Uniform','Log-normal',
                   #'Weibull','Power','Pareto','Logistic','Laplace','Beta','Chi-square','Fisher','Gamma','Gumbel']
        wx.StaticText(panel,-1,'g - gaussian     e - exponential\nt - triangular     r - rayleigh\nv - von mises     u - uniform\nl - lognormal     w - weibull\np - power     pa - pareto\nb - beta     c - chi square',(30,90))
        #wx.StaticText(panel,-1,'Bins:',(30,30))
        #self.bins = wx.SpinCtrl(panel,-1,'',(90,27),(100,-1),min=1,max=1000,initial=30)
        #self.draw_button = wx.Button(panel,-1,'Draw',(200,20),(100,30))
        #self.Bind(wx.EVT_BUTTON,self.ondraw,id = self.draw_button.GetId())
        #wx.StaticText(panel,-1,'Distribution:',(30,65))
        #self.mode = wx.ComboBox(panel,-1,'Gaussian',(90,62),(100,-1),choices=['Gaussian','Exponential','Rayleigh','Triangular','Von Mises','Uniform','Log-normal','Weibull','Power','Pareto','Logistic','Laplace','Beta','Chi-square','Fisher','Gamma','Gumbel'],style=wx.CB_READONLY)
        #self.compute_button = wx.Button(panel,-1,'Compute',(200,55),(100,30))
        #self.compute_button.Disable()
        
        #wx.StaticText(panel,-1,'Minimum:',(30,100))
        #wx.StaticText(panel,-1,'Maximum:',(30,130))
        #wx.StaticText(panel,-1,'Mean|Peak:',(30,160))
        #wx.StaticText(panel,-1,'Std|Kappa:',(30,190))
        #wx.StaticText(panel,-1,'Number|Mode:',(30,220))
        
        #self.min = wx.SpinCtrl(panel,-1,'',(130,97),(100,-1),min=0,max=100000,initial=0)
        #self.max = wx.SpinCtrl(panel,-1,'',(130,127),(100,-1),min=0,max=100000,initial=100)
        #self.peak = wx.SpinCtrl(panel,-1,'',(130,157),(100,-1),min=0,max=100000,initial=50)
        #self.std = wx.SpinCtrl(panel,-1,'',(130,187),(100,-1),min=0,max=100000,initial=20)
        #self.number = wx.SpinCtrl(panel,-1,'',(130,217),(100,-1),min=0,max=10000,initial=1000)
        #self.tmode = wx.ComboBox(panel,-1,'Stochastic',(240,217),(80,-1),choices=['Normal','Stochastic'],style=wx.CB_READONLY)
        #self.tmode.Disable()
        
        sheet1 = self.sheet1 = MySheet(notebook)
        notebook.AddPage(sheet1, 'Specific parameters')      
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,260),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,260),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onsobject(self,event):
        self.svariable.Clear()
        self.svariable.AppendItems(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names())
        self.svariable.SetValue(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0])
        
    def ondraw(self,event):
        t = frame.object_manager.build_distribution(self.mode.GetValue(),self.min.GetValue(),self.max.GetValue(),self.peak.GetValue(),self.std.GetValue(),self.number.GetValue(),self.tmode.GetValue())
        self.data = np.zeros((self.number.GetValue(),4),dtype='float32')
        self.data[:,2] = np.arange(self.number.GetValue())
        self.data[:,3] = t[:]        
        self.flag = True
        pympl.simple_histogram(self.data[:,-1],bins=self.bins.GetValue())
        
    def check_what_goes2(self):
        inside = ['point']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        c=0
        for i in xrange(50):
            if self.sheet1.GetCellValue(i,0)!='':
                c = c + 1
            else:
                break
        if c<2:
            wx.MessageBox("You need at least two areas to proceed with the algorithm.","Error")
        else:
            depths = []
            dists  = []
            errors = []
            for i in xrange(c):
                depths.append(float(self.sheet1.GetCellValue(i,0)))
                dists.append(self.sheet1.GetCellValue(i,1))
                errors.append(np.clip(int(self.sheet1.GetCellValue(i,2)),0,100))
            z = frame.object_manager.object_list[self.sobject.GetValue()].z
            ape = np.zeros(z.shape[0],dtype='|S2')
            ind = np.where((z<depths[0]))
            ape[ind] = dists[0]
            var1 = []
            var1.append(frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data[ind].std()*(errors[0]/100))
            inds = []
            inds.append(ind)
            #ext = []
            #ext.append([frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data[ind].min(),frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data[ind].max()])
            ext = np.zeros((z.shape[0],2))
            ext[ind[0],0] = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data[ind].min()
            ext[ind[0],1] = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data[ind].max()            
            #er = np.zeros(z.shape[0],dtype='float32')
            var = np.zeros(z.shape[0],dtype='float32')
            var[ind] = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data[ind].std()*(errors[0]/100)
            for i in xrange(1,len(depths)):
                print depths[i],depths[i-1],z,depths
                ind = np.where((z<depths[i]) & (z>=depths[i-1]))
                print ind
                var1.append(frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data[ind].std()*(errors[i]/100))
                var[ind] = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data[ind].std()*(errors[i]/100)
                inds.append(ind)
                ape[ind] = dists[i]
                ext[ind,0] = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data[ind].min()
                ext[ind,1] = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data[ind].max()   
            data = np.zeros((z.shape[0],104),dtype='float32')
            v = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data
            
            data[:,0] = frame.object_manager.object_list[self.sobject.GetValue()].x
            data[:,1] = frame.object_manager.object_list[self.sobject.GetValue()].y
            data[:,2] = frame.object_manager.object_list[self.sobject.GetValue()].z
            #data[:,3] = v[:]
            
            for i in xrange(v.shape[0]):
                dd = plg.get_percentile_dist(v[i],ape[i],100000,var[i],ext[i,0],ext[i,1])
                data[i,3:] = dd[:]
            fid = open(r'C:\PedroCorreia\PyWorkspace\GEOMS2\software\teste.prn','w')
            fid.write(str(v.shape[0])+'\n101\n')
            np.savetxt(fid,data,fmt='%10.3f')
            fid.close()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class DistributionMakerFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Distribution maker toolbox",size=(350,365),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)

        #self.pieces = pieces
        self.flag = False
        self.data = None
        
        wx.StaticText(panel,-1,'Bins:',(30,30))
        self.bins = wx.SpinCtrl(panel,-1,'',(90,27),(100,-1),min=1,max=1000,initial=30)
        self.draw_button = wx.Button(panel,-1,'Draw',(200,20),(100,30))
        self.Bind(wx.EVT_BUTTON,self.ondraw,id = self.draw_button.GetId())
        wx.StaticText(panel,-1,'Distribution:',(30,65))
        self.mode = wx.ComboBox(panel,-1,'Gaussian',(90,62),(100,-1),choices=['Gaussian','Exponential','Rayleigh','Triangular','Von Mises','Uniform','Log-normal','Weibull','Power','Pareto','Logistic','Laplace','Beta','Chi-square','Fisher','Gamma','Gumbel'],style=wx.CB_READONLY)
        #self.compute_button = wx.Button(panel,-1,'Compute',(200,55),(100,30))
        #self.compute_button.Disable()
        
        wx.StaticText(panel,-1,'Minimum:',(30,100))
        wx.StaticText(panel,-1,'Maximum:',(30,130))
        wx.StaticText(panel,-1,'Mean|Peak:',(30,160))
        wx.StaticText(panel,-1,'Std|Kappa:',(30,190))
        wx.StaticText(panel,-1,'Number|Mode:',(30,220))
        
        self.min = wx.SpinCtrl(panel,-1,'',(130,97),(100,-1),min=0,max=100000,initial=0)
        self.max = wx.SpinCtrl(panel,-1,'',(130,127),(100,-1),min=0,max=100000,initial=100)
        self.peak = wx.SpinCtrl(panel,-1,'',(130,157),(100,-1),min=0,max=100000,initial=50)
        self.std = wx.SpinCtrl(panel,-1,'',(130,187),(100,-1),min=0,max=100000,initial=20)
        self.number = wx.SpinCtrl(panel,-1,'',(130,217),(100,-1),min=0,max=10000,initial=1000)
        self.tmode = wx.ComboBox(panel,-1,'Stochastic',(240,217),(80,-1),choices=['Normal','Stochastic'],style=wx.CB_READONLY)
        self.tmode.Disable()
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,260),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,260),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def ondraw(self,event):
        t = frame.object_manager.build_distribution(self.mode.GetValue(),self.min.GetValue(),self.max.GetValue(),self.peak.GetValue(),self.std.GetValue(),self.number.GetValue(),self.tmode.GetValue())
        self.data = np.zeros((self.number.GetValue(),4),dtype='float32')
        self.data[:,2] = np.arange(self.number.GetValue())
        self.data[:,3] = t[:]        
        self.flag = True
        pympl.simple_histogram(self.data[:,-1],bins=self.bins.GetValue())
            
    def onapply(self,event):
        if self.flag:
            data = self.data
            frame.object_manager.add_data_object(None,name=self.mode.GetValue()+'_distribution',vname=['X','Y','Z',self.mode.GetValue()],data=data,dtype=['float32','float32','float32','float32'],vtype=['continuous','continuous','continuous','continuous'])
        else:
            t = frame.object_manager.build_distribution(self.mode.GetValue(),self.min.GetValue(),self.max.GetValue(),self.peak.GetValue(),self.std.GetValue(),self.number.GetValue(),self.tmode.GetValue())
            data = np.zeros((self.number.GetValue(),4),dtype='float32')
            data[:,2] = np.arange(self.number.GetValue())
            data[:,3] = t[:]
            frame.object_manager.add_data_object(None,name=self.mode.GetValue()+'_distribution',vname=['X','Y','Z',self.mode.GetValue()],data=data,dtype=['float32','float32','float32','float32'],vtype=['continuous','continuous','continuous','continuous'])
        frame.update_last_object_list()
        #print frame.object_manager.call_top([frame.object_manager.last_object,'']).variable.keys()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class PropertyMakerFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Stochastic property maker toolbox",size=(350,435),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)

        #self.pieces = pieces
        self.flag = False
        self.data = []
        self.ibins= None
        
        wx.StaticText(panel,-1,'Bin mesh:',(30,30))
        self.sobject = wx.ComboBox(panel,-1,self.check_what_goes()[0],(130,27),(90,-1),choices=self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onsobject,id=self.sobject.GetId())
        self.svariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0],(230,27),(90,-1),choices=frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)

        self.check = wx.Button(panel,-1,'Check if good',(30,60),(100,40))
        self.Bind(wx.EVT_BUTTON,self.checkifgood,id=self.check.GetId())
        
        wx.StaticText(panel,-1,'Bin:',(30,120))
        self.bin = wx.ComboBox(panel,-1,'0',(100,117),(90,-1),choices=['0'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchange,id=self.bin.GetId())
        
        wx.StaticText(panel,-1,'Mean:',(30,150))
        wx.StaticText(panel,-1,'Variance:',(30,180))
        self.filter_flag = wx.CheckBox(panel,-1,'  Moving window filter',(30,210))
        self.mean = wx.SpinCtrl(panel,-1,'',(130,147),(100,-1),min=-100000,max=100000,initial=100)
        self.Bind(wx.EVT_SPINCTRL,self.onmean,id=self.mean.GetId())
        self.var = wx.SpinCtrl(panel,-1,'',(130,177),(100,-1),min=-10000,max=10000,initial=20)
        self.Bind(wx.EVT_SPINCTRL,self.onvar,id=self.var.GetId())
        self.wind = wx.SpinCtrl(panel,-1,'',(230,207),(100,-1),min=1,max=13,initial=2)
        wx.StaticText(panel,-1,'Seed:',(30,240))
        self.seed = wx.SpinCtrl(panel,-1,'',(130,237),(100,-1),min=1000000,max=9999999,initial=1234567)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,350),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,350),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onmean(self,event):
        i = np.where(self.ibins==int(self.bin.GetValue()))[0][0]
        self.data[i][0]=self.mean.GetValue()
        
    def onvar(self,event):
        i = np.where(self.ibins==int(self.bin.GetValue()))[0][0]
        self.data[i][1]=self.var.GetValue()
        
    def onchange(self,event):
        i = np.where(self.ibins==int(self.bin.GetValue()))[0][0]
        self.mean.SetValue(self.data[i][0])
        self.var.SetValue(self.data[i][1])
        
    def update_table(self,ibins):
        items = []
        for i in ibins:
            items.append(str(i))
        self.bin.Clear()
        self.bin.AppendItems(items)
        self.bin.SetValue(items[0])
        
    def checkifgood(self,event):
        ibins = np.int_(np.unique(frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data))
        self.ibins = ibins
        if ibins.shape[0]<255:
            res = True
        else:
            res = False
        if res == False: 
            wx.MessageBox('Conversion failed. Maximum number of unique values is 255.', 'Error', wx.OK | wx.ICON_INFORMATION)
        else:
            self.flag = True
            self.data = []
            for i in xrange(ibins.shape[0]):
                self.data.append([(ibins[i]+1)*100,20])
            self.update_table(ibins)
            wx.MessageBox('Mesh seems adequate. Edit bin distributions.', 'Information', wx.OK | wx.ICON_INFORMATION)
            
    def onsobject(self,event):
        self.svariable.Clear()
        self.svariable.AppendItems(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names())
        self.svariable.SetValue(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        if self.flag:
            size = frame.object_manager.call_top([self.sobject.GetValue(),self.svariable.GetValue()]).size
            first = frame.object_manager.call_top([self.sobject.GetValue(),self.svariable.GetValue()]).first
            mesh_data = plg.build_continuous_variable(frame.object_manager.call([self.sobject.GetValue(),self.svariable.GetValue()]).data.copy().astype('float32'),self.data,self.wind.GetValue(),self.filter_flag.GetValue(),self.seed.GetValue())
            frame.object_manager.add_mesh_object((mesh_data.shape[0],mesh_data.shape[1],mesh_data.shape[2]),size,first,-999,'Continuous_'+self.sobject.GetValue(),self.svariable.GetValue(),mesh_data)
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished. Check object manager.","Information")
            self.Destroy()
        else:
            wx.MessageBox("You need to check if mesh is valid (Check if good button).","Information")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class MultiplePropertyMakerFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Stochastic multiple property maker toolbox",size=(350,435),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)

        #self.pieces = pieces
        self.flag = False
        self.data = []
        self.corr1 = []
        self.corr2 = []
        self.ibins= None
        #self.third_flag = False
        
        wx.StaticText(panel,-1,'Bin mesh:',(30,30))
        self.sobject = wx.ComboBox(panel,-1,self.check_what_goes()[0],(130,27),(90,-1),choices=self.check_what_goes(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onsobject,id=self.sobject.GetId())
        self.svariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0],(230,27),(90,-1),choices=frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)

        self.check = wx.Button(panel,-1,'Check if good',(30,60),(100,40))
        self.Bind(wx.EVT_BUTTON,self.checkifgood,id=self.check.GetId())
        
        wx.StaticText(panel,-1,'Bin:',(30,120))
        self.bin = wx.ComboBox(panel,-1,'0',(100,117),(90,-1),choices=['0'],style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onchange,id=self.bin.GetId())
        
        self.third_flag = wx.CheckBox(panel,-1,'  +1',(220,120))
        
        wx.StaticText(panel,-1,'Mean:',(30,150))
        wx.StaticText(panel,-1,'Variance:',(30,180))
        self.filter_flag = wx.CheckBox(panel,-1,'  Moving window filter',(30,210))
        self.mean = wx.SpinCtrl(panel,-1,'',(100,147),(100,-1),min=-100000,max=100000,initial=100)
        self.Bind(wx.EVT_SPINCTRL,self.onmean,id=self.mean.GetId())
        self.cc1 = wx.SpinCtrl(panel,-1,'',(210,147),(60,-1),min=-99,max=99,initial=80)
        self.Bind(wx.EVT_SPINCTRL,self.oncc1,id=self.cc1.GetId())
        self.cc2 = wx.SpinCtrl(panel,-1,'',(280,147),(60,-1),min=-99,max=99,initial=50)
        self.Bind(wx.EVT_SPINCTRL,self.oncc2,id=self.cc2.GetId())
        self.var = wx.SpinCtrl(panel,-1,'',(100,177),(100,-1),min=-10000,max=10000,initial=20)
        self.Bind(wx.EVT_SPINCTRL,self.onvar,id=self.var.GetId())
        self.wind = wx.SpinCtrl(panel,-1,'',(230,207),(100,-1),min=1,max=13,initial=2)
        wx.StaticText(panel,-1,'Seed:',(30,240))
        self.seed = wx.SpinCtrl(panel,-1,'',(130,237),(100,-1),min=1000000,max=9999999,initial=1234567)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,350),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,350),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onmean(self,event):
        i = np.where(self.ibins==int(self.bin.GetValue()))[0][0]
        self.data[i][0]=self.mean.GetValue()
        
    def onvar(self,event):
        i = np.where(self.ibins==int(self.bin.GetValue()))[0][0]
        self.data[i][1]=self.var.GetValue()
        
    def oncc1(self,event):
        i = np.where(self.ibins==int(self.bin.GetValue()))[0][0]
        self.corr1[i]=self.cc1.GetValue()
        
    def oncc2(self,event):
        i = np.where(self.ibins==int(self.bin.GetValue()))[0][0]
        self.corr2[i]=self.cc2.GetValue()
        
    def onchange(self,event):
        i = np.where(self.ibins==int(self.bin.GetValue()))[0][0]
        self.mean.SetValue(self.data[i][0])
        self.var.SetValue(self.data[i][1])
        self.cc1.SetValue(self.corr1[i])
        self.cc2.SetValue(self.corr2[i])
        
    def update_table(self,ibins):
        items = []
        for i in ibins:
            items.append(str(i))
        self.bin.Clear()
        self.bin.AppendItems(items)
        self.bin.SetValue(items[0])
        
    def checkifgood(self,event):
        ibins = np.unique(frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data)
        self.ibins = ibins
        if ibins.shape[0]<255:
            res = True
        else:
            res = False
        if res == False: 
            wx.MessageBox('Conversion failed. Maximum number of unique values is 255.', 'Error', wx.OK | wx.ICON_INFORMATION)
        else:
            self.flag = True
            self.data = []
            self.corr1 = []
            self.corr2 = []
            for i in xrange(ibins.shape[0]):
                self.data.append([(ibins[i]+1)*100,20])
                self.corr1.append(80)
                self.corr2.append(50)
            self.update_table(ibins)
            wx.MessageBox('Mesh seems adequate. Edit bin distributions.', 'Information', wx.OK | wx.ICON_INFORMATION)
            
    def onsobject(self,event):
        self.svariable.Clear()
        self.svariable.AppendItems(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names())
        self.svariable.SetValue(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0])
        
    def check_what_goes(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
            
    def onapply(self,event):
        if self.flag:
            size = frame.object_manager.call_top([self.sobject.GetValue(),self.svariable.GetValue()]).size
            first = frame.object_manager.call_top([self.sobject.GetValue(),self.svariable.GetValue()]).first
            mesh_data = plg.build_multiple_continuous_variable(frame.object_manager.call([self.sobject.GetValue(),self.svariable.GetValue()]).data,self.data,self.corr1,self.corr2,self.third_flag.GetValue(),self.wind.GetValue(),self.filter_flag.GetValue(),self.seed.GetValue())
            svariables = [self.svariable.GetValue(),self.svariable.GetValue()+'_2']
            if self.third_flag.GetValue(): svariables.append(self.svariable.GetValue()+'_3')       
            frame.object_manager.add_mesh_object((mesh_data.shape[0],mesh_data.shape[1],mesh_data.shape[2]),size,first,-999,'Continuous_'+self.sobject.GetValue(),svariables,mesh_data)
            frame.update_last_object_list()
            wx.MessageBox("Operation is finished. Check object manager.","Information")
            self.Destroy()
        else:
            wx.MessageBox("You need to check if mesh is valid (Check if good button).","Information")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class GeometricTransformFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Geometric transform toolbox",size=(350,465),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        wx.StaticText(panel,-1,'Mesh:',(30,30))
        self.sobject = wx.ComboBox(panel,-1,self.check_what_goes2()[0],(130,27),(90,-1),choices=self.check_what_goes2(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onsobject,id=self.sobject.GetId())
        self.svariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0],(230,27),(90,-1),choices=frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        wx.StaticText(panel,-1,'Type:',(30,60))
        self.transtype = wx.ComboBox(panel,-1,'sin_fold',(130,57),(90,-1),choices=['sin_fold','cos_fold','intrusion'],style=wx.CB_READONLY)
        
        back = -110
        wx.StaticText(panel,-1,'Number:',(30,200+back))
        self.number = wx.SpinCtrl(panel,-1,'',(150,197+back),(100,-1),min=1,max=100,initial=10)
        wx.StaticText(panel,-1,'Tickness(min|max):',(30,230+back))
        self.thick1 = wx.SpinCtrl(panel,-1,'',(150,227+back),(70,-1),min=1,max=100,initial=5)
        self.thick2 = wx.SpinCtrl(panel,-1,'',(230,227+back),(70,-1),min=1,max=100,initial=15)
        wx.StaticText(panel,-1,'Step|noise:',(30,260+back))
        self.step = wx.SpinCtrl(panel,-1,'',(150,257+back),(100,-1),min=1,max=100,initial=10)
        wx.StaticText(panel,-1,'Delta(hor|ver):',(30,290+back))
        self.delta1 = wx.SpinCtrl(panel,-1,'',(150,287+back),(70,-1),min=1,max=100,initial=7)
        self.delta2 = wx.SpinCtrl(panel,-1,'',(230,287+back),(70,-1),min=1,max=100,initial=3)
        wx.StaticText(panel,-1,'Start in:',(30,320+back))
        self.startin = wx.ComboBox(panel,-1,'x',(150,317+back),(100,-1),choices=['x','y'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Seed:',(30,350+back))
        self.seed = wx.SpinCtrl(panel,-1,'',(150,347+back),(100,-1),min=100000,max=999999,initial=123456)
        wx.StaticText(panel,-1,'Fraction:',(30,380+back))
        self.fraction = wx.SpinCtrl(panel,-1,'',(150,377+back),(100,-1),min=1,max=100,initial=50)
        self.reflective = wx.CheckBox(panel,-1,'  reflective',(260,377+back))
        
        #wx.StaticText(panel,-1,'Wavelet:',(30,60))
        #self.wobject = wx.ComboBox(panel,-1,self.check_what_goes3()[0],(130,57),(90,-1),choices=self.check_what_goes3(),style=wx.CB_READONLY)
        #self.Bind(wx.EVT_COMBOBOX,self.onwobject,id=self.wobject.GetId())
        #self.wvariable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0],(230,57),(90,-1),choices=frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.wvariable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0],(300,27),(60,-1),choices=frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,360),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,360),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def check_what_goes2(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
		
    def check_what_goes3(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onsobject(self,event):
        self.svariable.Clear()
        self.svariable.AppendItems(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names())
        self.svariable.SetValue(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0])
        self.coords.SetValue(self.get_random_coords_string(5))
		
    def onwobject(self,event):
        self.wvariable1.Clear()
        self.wvariable1.AppendItems(frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names())
        self.wvariable1.SetValue(frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0])
            
    def onapply(self,event):
        #blocks = (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
        size   = frame.object_manager.call_top([self.sobject.GetValue(),self.svariable.GetValue()]).size
        first  = frame.object_manager.call_top([self.sobject.GetValue(),self.svariable.GetValue()]).first
        stype = self.transtype.GetValue()
        number = self.number.GetValue()
        step   = self.step.GetValue()
        thick  = (self.thick1.GetValue(),self.thick2.GetValue())
        delta  = (self.delta1.GetValue(),self.delta2.GetValue())
        startin = self.startin.GetValue()
        seed   = self.seed.GetValue()
        fraction = self.fraction.GetValue()
        reflective = self.reflective.GetValue()
        mesh = frame.object_manager.call([self.sobject.GetValue(),self.svariable.GetValue()]).data.copy().astype('float32')
        mesh_data = plg.geometric_transform(mesh,stype,number,step,thick,delta,startin,seed,fraction,reflective)
        frame.object_manager.add_mesh_object((mesh_data.shape[0],mesh_data.shape[1],mesh_data.shape[2]),size,first,-999,'GeoTrans_'+self.sobject.GetValue(),self.svariable.GetValue(),mesh_data)
        frame.update_last_object_list()
        #print frame.object_manager.call_top([frame.object_manager.last_object,'']).variable.keys()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class WaveletConvolveFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Wavelet convolve toolbox",size=(350,365),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        wx.StaticText(panel,-1,'Mesh:',(30,30))
        self.sobject = wx.ComboBox(panel,-1,self.check_what_goes2()[0],(130,27),(90,-1),choices=self.check_what_goes2(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onsobject,id=self.sobject.GetId())
        self.svariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0],(230,27),(90,-1),choices=frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
    		
        wx.StaticText(panel,-1,'Wavelet:',(30,60))
        self.wobject = wx.ComboBox(panel,-1,self.check_what_goes3()[0],(130,57),(90,-1),choices=self.check_what_goes3(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onwobject,id=self.wobject.GetId())
        self.wvariable1 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0],(230,57),(90,-1),choices=frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        #self.wvariable2 = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0],(300,27),(60,-1),choices=frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,260),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,260),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def check_what_goes2(self):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
		
    def check_what_goes3(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onsobject(self,event):
        self.svariable.Clear()
        self.svariable.AppendItems(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names())
        self.svariable.SetValue(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0])
        #self.coords.SetValue(self.get_random_coords_string(5))
		
    def onwobject(self,event):
        self.wvariable1.Clear()
        self.wvariable1.AppendItems(frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names())
        self.wvariable1.SetValue(frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0])
            
    def onapply(self,event):
        size = frame.object_manager.call_top([self.sobject.GetValue(),self.svariable.GetValue()]).size
        first = frame.object_manager.call_top([self.sobject.GetValue(),self.svariable.GetValue()]).first
        mesh = frame.object_manager.call([self.sobject.GetValue(),self.svariable.GetValue()]).data.copy().astype('float32')
        wave = frame.object_manager.call([self.wobject.GetValue(),self.wvariable1.GetValue()]).data.copy().astype('float32')
        mesh_data = plg.wavelet_convolve(mesh,wave)
        frame.object_manager.add_mesh_object((mesh_data.shape[0],mesh_data.shape[1],mesh_data.shape[2]),size,first,-999,'WaveConv_'+self.sobject.GetValue(),self.svariable.GetValue(),mesh_data)
        frame.update_last_object_list()
        #print frame.object_manager.call_top([frame.object_manager.last_object,'']).variable.keys()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class FractureConnectFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Fracture connect procedure frame",size=(350,365),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        wx.StaticText(panel,-1,'Point:',(30,30))
        self.sobject = wx.ComboBox(panel,-1,self.check_what_goes2()[0],(130,27),(90,-1),choices=self.check_what_goes2(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onsobject,id=self.sobject.GetId())
        self.svariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0],(230,27),(90,-1),choices=frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
    		
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,260),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,260),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def check_what_goes2(self):
        inside = ['point']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
		
    def check_what_goes3(self):
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onsobject(self,event):
        self.svariable.Clear()
        self.svariable.AppendItems(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names())
        self.svariable.SetValue(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0])
        #self.coords.SetValue(self.get_random_coords_string(5))
		
    def onwobject(self,event):
        self.wvariable1.Clear()
        self.wvariable1.AppendItems(frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names())
        self.wvariable1.SetValue(frame.object_manager.object_list[self.wobject.GetValue()].get_numeric_variable_names()[0])
            
    def onapply(self,event):
        if frame.object_manager.call([self.sobject.GetValue(),self.svariable.GetValue()]).fracture_flag:
            xxs = frame.object_manager.call([self.sobject.GetValue(),self.svariable.GetValue()]).xxs
            yys = frame.object_manager.call([self.sobject.GetValue(),self.svariable.GetValue()]).yys
            zzs = frame.object_manager.call([self.sobject.GetValue(),self.svariable.GetValue()]).zzs
            triangles = frame.object_manager.call([self.sobject.GetValue(),self.svariable.GetValue()]).triangles
            x = frame.object_manager.call_top([self.sobject.GetValue(),self.svariable.GetValue()]).x
            y = frame.object_manager.call_top([self.sobject.GetValue(),self.svariable.GetValue()]).y
            z = frame.object_manager.call_top([self.sobject.GetValue(),self.svariable.GetValue()]).z
            data = frame.object_manager.call([self.sobject.GetValue(),self.svariable.GetValue()]).data
            
            con, cen, un = plg.get_fracture_connections_points(xxs,yys,zzs,x,y,z)
            name = 'connect_'+self.sobject.GetValue()
            if name in frame.object_manager.object_name: 
                name = frame.object_manager.do_newname_from_name(name)
            null = -999 #self.object_manager.call_top(selection).null
            vname = self.svariable.GetValue()
            frame.object_manager.add_point_object(x[un],y[un],z[un],null,name,vname,data[un])
            self.last_object = name
            frame.object_manager.call([name,vname]).fracture_flag = True
            frame.object_manager.call([name,vname]).xxs = xxs
            frame.object_manager.call([name,vname]).yys = yys
            frame.object_manager.call([name,vname]).zzs = zzs
            frame.object_manager.call([name,vname]).triangles = triangles[un]
            frame.update_last_object_list()   
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Fracture flag must be on for this procedure to work.","Information")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class WaveletMakerFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Wavelet maker toolbox",size=(350,365),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)

        #self.pieces = pieces
        self.flag = False
        self.data = None
        
        wx.StaticText(panel,-1,'Half-size:',(30,30))
        self.size = wx.SpinCtrl(panel,-1,'',(90,27),(100,-1),min=1,max=1000,initial=7)
        self.draw_button = wx.Button(panel,-1,'Draw',(200,20),(100,30))
        self.Bind(wx.EVT_BUTTON,self.ondraw,id = self.draw_button.GetId())
        wx.StaticText(panel,-1,'Type:',(30,65))
        self.mode = wx.ComboBox(panel,-1,'Ricker',(90,62),(100,-1),choices=['Ricker'],style=wx.CB_READONLY)
        #self.compute_button = wx.Button(panel,-1,'Compute',(200,55),(100,30))
        #self.compute_button.Disable()
        
        wx.StaticText(panel,-1,'dt:',(30,100))
        self.dt = wx.SpinCtrl(panel,-1,'',(130,97),(100,-1),min=1,max=100,initial=1)
        wx.StaticText(panel,-1,'Frequency:',(30,130))
        self.hz = FS.FloatSpin(panel, -1,(160, 127),(90,-1),min_val=0,max_val=100,value = 0.3,digits=3)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,260),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,260),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def ondraw(self,event):
        if self.mode.GetValue()=='Ricker':
            plg.draw_ricker_wavelet(self.hz.GetValue(),self.size.GetValue(),self.dt.GetValue())
            
    def onapply(self,event):
        if self.mode.GetValue()=='Ricker':
            data = plg.ricker_wavelet(self.hz.GetValue(),self.size.GetValue(),self.dt.GetValue())
            frame.object_manager.add_data_object(None,name='Ricker_wavelet',vname=['X','Y'],data=data,dtype=['float32','float32'],vtype=['continuous','continuous'])
            frame.update_last_object_list()
            #print frame.object_manager.call_top([frame.object_manager.last_object,'']).variable.keys()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
        
class SyntheticProductionFrame(wx.Frame):
    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,"Synthetic mesh generation frame",size=(400,565),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        #self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)

        wx.StaticBox(panel,-1,'Mesh specifics',(10,10),(380,140))
        wx.StaticText(panel,-1,
                      '              Number                   Size                         First coordinate',
                      (30,30))#.SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'X(I):',(30,60))#.SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Y(J):',(30,90))#.SetFont(frame.regular_font)
        wx.StaticText(panel,-1,'Z(K):',(30,120))#.SetFont(frame.regular_font)
        
        self.blocks_in_x = wx.SpinCtrl(panel,-1,'',(70,57),(90,-1),min=1,max=100000000,initial=100)
        self.blocks_in_y = wx.SpinCtrl(panel,-1,'',(70,87),(90,-1),min=1,max=100000000,initial=100)
        self.blocks_in_z = wx.SpinCtrl(panel,-1,'',(70,117),(90,-1),min=1,max=100000000,initial=30)
        
        self.size_in_x    = FS.FloatSpin(panel, -1,(170, 57),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_y    = FS.FloatSpin(panel, -1,(170, 87),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
        self.size_in_z    = FS.FloatSpin(panel, -1,(170, 117),(90,-1),min_val=1,max_val=100000000,value = 1,digits=3)
                
        self.first_in_x   = FS.FloatSpin(panel, -1,(270, 57),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_y   = FS.FloatSpin(panel, -1,(270, 87),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        self.first_in_z   = FS.FloatSpin(panel, -1,(270, 117),(90,-1),min_val=-100000000,max_val=100000000,value = 0,digits=3)
        
        
        wx.StaticText(panel,-1,'Type of synthetic:',(30,170))
        self.stype = wx.ComboBox(panel,-1,'channels',(150,167),(100,-1),choices=['channels','layers','sin_fold','cos_fold','delta','intrusion','stromatolites'],style=wx.CB_READONLY)
        self.allequal = wx.CheckBox(panel,-1,'  all equal?',(260,167))
        
        wx.StaticText(panel,-1,'Number:',(30,200))
        self.number = wx.SpinCtrl(panel,-1,'',(150,197),(100,-1),min=1,max=100,initial=10)
        wx.StaticText(panel,-1,'Tickness(min|max):',(30,230))
        self.thick1 = wx.SpinCtrl(panel,-1,'',(150,227),(70,-1),min=1,max=100,initial=5)
        self.thick2 = wx.SpinCtrl(panel,-1,'',(230,227),(70,-1),min=1,max=100,initial=15)
        wx.StaticText(panel,-1,'Step|noise:',(30,260))
        self.step = wx.SpinCtrl(panel,-1,'',(150,257),(100,-1),min=1,max=100,initial=10)
        wx.StaticText(panel,-1,'Delta(hor|ver):',(30,290))
        self.delta1 = wx.SpinCtrl(panel,-1,'',(150,287),(70,-1),min=1,max=100,initial=7)
        self.delta2 = wx.SpinCtrl(panel,-1,'',(230,287),(70,-1),min=1,max=100,initial=3)
        wx.StaticText(panel,-1,'Start in:',(30,320))
        self.startin = wx.ComboBox(panel,-1,'x',(150,317),(100,-1),choices=['x','y'],style=wx.CB_READONLY)
        wx.StaticText(panel,-1,'Seed:',(30,350))
        self.seed = wx.SpinCtrl(panel,-1,'',(150,347),(100,-1),min=100000,max=999999,initial=123456)
        wx.StaticText(panel,-1,'Fraction:',(30,380))
        self.fraction = wx.SpinCtrl(panel,-1,'',(150,377),(100,-1),min=1,max=100,initial=50)
        self.reflective = wx.CheckBox(panel,-1,'  reflective',(260,377))
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(60,460),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(240,460),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
            
    def onapply(self,event):
        blocks = (self.blocks_in_x.GetValue(),self.blocks_in_y.GetValue(),self.blocks_in_z.GetValue())
        size   = (self.size_in_x.GetValue(),self.size_in_y.GetValue(),self.size_in_z.GetValue())
        first  = (self.first_in_x.GetValue(),self.first_in_y.GetValue(),self.first_in_z.GetValue())
        stype = self.stype.GetValue()
        number = self.number.GetValue()
        step   = self.step.GetValue()
        thick  = (self.thick1.GetValue(),self.thick2.GetValue())
        delta  = (self.delta1.GetValue(),self.delta2.GetValue())
        startin = self.startin.GetValue()
        seed   = self.seed.GetValue()
        fraction = self.fraction.GetValue()
        reflective = self.reflective.GetValue()
        mesh_data = plg.build_synthetic_mesh(blocks,size,first,stype,number,step,thick,delta,startin,seed,fraction,reflective,self.allequal.GetValue())
        frame.object_manager.add_mesh_object((mesh_data.shape[0],mesh_data.shape[1],mesh_data.shape[2]),size,first,-999,'Synthetic_'+stype,stype,mesh_data)
        frame.update_last_object_list()
        wx.MessageBox("Operation is finished.","Information")
        self.Destroy()
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXaddTriangleVariableFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Choose variable to add",size=(350,225),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        if len(self.pieces)==1:
            self.pieces.append(frame.object_manager.object_list[self.pieces[0]].get_numeric_variable_names()[0])
        
        wx.StaticText(panel,-1,'Object:',(30,30))
        self.sobject = wx.ComboBox(panel,-1,self.check_what_goes2()[0],(130,27),(90,-1),choices=self.check_what_goes2(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onsobject,id=self.sobject.GetId())
        self.svariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0],(230,27),(90,-1),choices=frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,90),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,90),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onsobject(self,event):
        self.svariable.Clear()
        self.svariable.AppendItems(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names())
        self.svariable.SetValue(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0])
        
    def check_what_goes2(self):
        inside = ['mesh','point','data','surface']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onapply(self,event):
        if frame.object_manager.object_type[self.sobject.GetValue()] in ['mesh','surface']:
            csize = np.prod(frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data.shape)
        elif frame.object_manager.object_type[self.sobject.GetValue()] in ['point','data']:
            csize = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data.shape[0]
        #print csize,frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data.shape[0]
        if csize == frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data.shape[0]:
            if frame.object_manager.object_type[self.sobject.GetValue()] in ['mesh','surface']:
                data = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data.flatten().copy()
            else:
                data = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data.copy()
                if self.svariable.GetValue() in frame.object_manager.object_list[self.pieces[0]].get_variable_names():
                    name = frame.object_manager.object_list[self.pieces[0]].get_newname_from_name(self.svariable.GetValue())
                else:
                    name = self.svariable.GetValue()
            frame.object_manager.object_list[self.pieces[0]].add_variable(name,data)
            frame.object_manager.last_object = self.pieces[0]
            frame.object_manager.last_variable = name
            frame.update_last_variable_list()
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Variables are not comparable in size. Choose another object.","Information")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class CTXreplaceTriangleVariableFrame(wx.Frame):
    def __init__(self,parent,id,pieces):
        wx.Frame.__init__(self,parent,id,"Choose variable to replace",size=(350,225),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.pieces = pieces
        if len(self.pieces)==1:
            self.pieces.append(frame.object_manager.object_list[self.pieces[0]].get_numeric_variable_names()[0])
        
        wx.StaticText(panel,-1,'Object:',(30,30))
        self.sobject = wx.ComboBox(panel,-1,self.check_what_goes2()[0],(130,27),(90,-1),choices=self.check_what_goes2(),style=wx.CB_READONLY)
        self.Bind(wx.EVT_COMBOBOX,self.onsobject,id=self.sobject.GetId())
        self.svariable = wx.ComboBox(panel,-1,frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0],(230,27),(90,-1),choices=frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names(),style=wx.CB_READONLY)
        
        self.btn_apply = wx.Button(panel,-1,'Apply',(30,90),(100,40))
        self.Bind(wx.EVT_BUTTON,self.onapply,id = self.btn_apply.GetId())
        self.btn_cancel = wx.Button(panel,-1,'Cancel',(210,90),(100,40))
        self.Bind(wx.EVT_BUTTON,self.oncancel,id = self.btn_cancel.GetId())
        
    def onsobject(self,event):
        self.svariable.Clear()
        self.svariable.AppendItems(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names())
        self.svariable.SetValue(frame.object_manager.object_list[self.sobject.GetValue()].get_numeric_variable_names()[0])
        
    def check_what_goes2(self):
        inside = ['mesh','point','data','surface']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
        
    def onapply(self,event):
        if frame.object_manager.object_type[self.sobject.GetValue()] in ['mesh','surface']:
            csize = np.prod(frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data.shape)
        elif frame.object_manager.object_type[self.sobject.GetValue()] in ['point','data']:
            csize = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data.shape[0]
        if csize == frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data.shape[0]:
            if frame.object_manager.object_type[self.sobject.GetValue()] in ['mesh','surface']:
                data = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data.flatten().copy()
            else:
                data = frame.object_manager.object_list[self.sobject.GetValue()].variable[self.svariable.GetValue()].data.copy()
            frame.object_manager.object_list[self.pieces[0]].variable[self.pieces[1]].data[:] = data[:]
            frame.onreview_object(self.pieces)
            wx.MessageBox("Operation is finished.","Information")
            self.Destroy()
        else:
            wx.MessageBox("Variables are not comparable in size. Choose another object.","Information")
            
    def oncancel(self,event):
        '''
        oncancel(...)
            oncancel(event)
            
            Destroys the frame.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
        
        See also
        --------
        None
        '''
        self.Destroy()
        
class FileDropMenuFrame(wx.Frame):
    def __init__(self,parent,id,path):
        wx.Frame.__init__(self,parent,id,"Type of object to drop",size=(350,225),style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.STAY_ON_TOP)
        self.SetIcon(wx.Icon(frame.art.parent_frame_icon, wx.BITMAP_TYPE_ICO))
        panel=self.panel=wx.Panel(self)
        
        self.path = path
        
        bit0 = wx.Bitmap(frame.art.toolbar_point_import_button)
        self.btn_importpoint = wx.BitmapButton(bitmap=bit0,id=-1, name=u'bmpPoint',parent=self.panel, pos=wx.Point(20, 30),size=wx.Size(64, 64))#, style=wx.NO_3D|wx.NO_BORDER)
        self.Bind(wx.EVT_BUTTON, self.onimportpoint,id=self.btn_importpoint.GetId())
        
        bit1 = wx.Bitmap(frame.art.toolbar_grid_import_button)
        self.btn_importgrid = wx.BitmapButton(bitmap=bit1,id=-1, name=u'bmpMesh',parent=self.panel, pos=wx.Point(100, 30),size=wx.Size(64, 64))#, style=wx.NO_3D|wx.NO_BORDER)
        self.Bind(wx.EVT_BUTTON, self.onimportgrid,id=self.btn_importgrid.GetId())
        
        bit2 = wx.Bitmap(frame.art.toolbar_surface_import_button)
        self.btn_importsurf = wx.BitmapButton(bitmap=bit2,id=-1, name=u'bmpSurf',parent=self.panel, pos=wx.Point(180, 30),size=wx.Size(64, 64))#, style=wx.NO_3D|wx.NO_BORDER)
        self.Bind(wx.EVT_BUTTON, self.onimportsurf,id=self.btn_importsurf.GetId())
        
        bit3 = wx.Bitmap(frame.art.toolbar_data_import_button)
        self.btn_importdata = wx.BitmapButton(bitmap=bit3,id=-1, name=u'bmpData',parent=self.panel, pos=wx.Point(260, 30),size=wx.Size(64, 64))#, style=wx.NO_3D|wx.NO_BORDER)
        self.Bind(wx.EVT_BUTTON, self.onimportdata,id=self.btn_importdata.GetId())
        
        wx.StaticText(panel,-1,'Point',(40,100))
        wx.StaticText(panel,-1,'Grid',(120,100))
        wx.StaticText(panel,-1,'Surface',(190,100))
        wx.StaticText(panel,-1,'nsData',(280,100))
        
        if len(self.path)>50: tmppath = '...'+self.path[-50:]
        else: tmppath = self.path
        wx.StaticText(panel,-1,tmppath,(20,140))
        
    def onimportpoint(self,event):
        pointframe=PointImportFrame(parent=frame,id=998,path=self.path)
        pointframe.Centre()
        pointframe.Show()
        self.Destroy()
        
    def onimportgrid(self,event):
        gridframe=MeshImportFrame(parent=frame,id=998,path=self.path)
        gridframe.Centre()
        gridframe.Show()
        self.Destroy()
        
    def onimportsurf(self,event):
        surfframe=SurfImportFrame(parent=frame,id=998,path=self.path)
        surfframe.Centre()
        surfframe.Show()
        self.Destroy()
        
    def onimportdata(self,event):
        dataframe=DataImportFrame(parent=frame,id=998,path=self.path)
        dataframe.Centre()
        dataframe.Show()
        self.Destroy()
              
class FileDrop(wx.FileDropTarget):
    def __init__(self, window):
        wx.FileDropTarget.__init__(self)
        self.window = window

    def OnDropFiles(self, x, y, filenames):
        for name in filenames:
            if name[-7:] == '.geoms2':
                frame.object_manager.load_project(name)
                frame.last_project_path = name
                frame.update_object_list()
                #print frame.tree_items()
            else:
                filedropframe = FileDropMenuFrame(parent=frame,id=998,path=name)
                filedropframe.Centre()
                filedropframe.Show()

class ParentFrame(wx.Frame):
    def __init__(self,parent,id,name):
        wx.Frame.__init__(self,parent,id,name,size=(1033,733))#,style=wx.CAPTION|wx.CLOSE_BOX|wx.SYSTEM_MENU|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX)
        #-----------------------------------------------------------------------
        # This is the main frame class. 
        
        #-----------------------------------------------------------------------
        # This loads some default settings for the software such as images
        # used, fonts, icons, etc.
        self.name = name
        self.art = ART() # LOADING ALL THE ART ASSETS
        self.regular_font = wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD) # SETTING A SPECIAL FONT FOR SOME TEXT
        
        self.last_project_path = 'none'        
        
        self.SetIcon(wx.Icon(self.art.parent_frame_icon, wx.BITMAP_TYPE_ICO)) # GIVING AN ICON TO THE PARENT FRAME.
        
        #-----------------------------------------------------------------------
        # This loads the object manager class which manages all information
        # related to data on the software.
        self.object_manager = cobj.object_manager()
        self.object_item    = {}
        #print self.object_manager.build_distribution('Gaussian',0,100,50,20,100,'Stochastic')
        self.general_cmap = 'jet'
        
        #-----------------------------------------------------------------------
        # The status bar is the empty row that appears at the bottom of the
        # software. The last string put on each menu item is what appears
        # in the statusbar when the user puts the mouse over that menu item.
        self.CreateStatusBar()
        mbar=wx.MenuBar()
        self.SetMenuBar(mbar)
        
        #-----------------------------------------------------------------------
        # This section defines the  top menu (label menu) in the
        # the software. Since its based on labels it can have much more
        # options than the toolbar (buttons menu) the follows it. Notice
        # that at least some of the options in the top menu have a bitmap
        # attached. If exists that same option exists in the toolbar it
        # will have the same figure at a lower scale.
        # NOTE: the images used (with different scales) are organized in the
        # ICO directory of this software.
        # MENU IDs are numbered from 101 to 199
        filemenu=wx.Menu()
        
        ImportPOINT = wx.MenuItem(filemenu, 101, '&Import POINT data\tCtrl+P','Import POINT data from file... (keyboard shortcut is Ctrl+P)')
        ImportPOINT.SetBitmap(wx.Bitmap(self.art.topmenu_point_import_button))
        filemenu.AppendItem(ImportPOINT)
        self.Bind(wx.EVT_MENU,self.onimportpoint,id=101)
        
        ImportGRID = wx.MenuItem(filemenu, 102, '&Import GRID data\tCtrl+G','Import GRID data from file... (keyboard shortcut is Ctrl+G)')
        ImportGRID.SetBitmap(wx.Bitmap(self.art.topmenu_grid_import_button))
        filemenu.AppendItem(ImportGRID)
        self.Bind(wx.EVT_MENU,self.onimportgrid,id=102)
        
        ImportSURF = wx.MenuItem(filemenu, 103, '&Import SURFACE data\tCtrl+H','Import SURFACE data from file... (keyboard shortcut is Ctrl+H)')
        ImportSURF.SetBitmap(wx.Bitmap(self.art.topmenu_surface_import_button))
        filemenu.AppendItem(ImportSURF)
        self.Bind(wx.EVT_MENU,self.onimportsurf,id=103)
        
        ImportDATA = wx.MenuItem(filemenu, 105, '&Import NON-SPATIAL data\tCtrl+D','Import NON-SPATIAL data from file... (keyboard shortcut is Ctrl+D)')
        ImportDATA.SetBitmap(wx.Bitmap(self.art.topmenu_data_import_button))
        filemenu.AppendItem(ImportDATA)
        self.Bind(wx.EVT_MENU,self.onimportdata,id=105)
        
        ImportPROJECT = wx.MenuItem(filemenu, 106, '&Import Project\tCtrl+R','Import Project from project folder... (keyboard shortcut is Ctrl+R)')
        ImportPROJECT.SetBitmap(wx.Bitmap(self.art.topmenu_project_import_button))
        filemenu.AppendItem(ImportPROJECT)
        self.Bind(wx.EVT_MENU,self.onimportproject,id=106)
        
        filemenu.AppendSeparator()
        ExportPROJECT = wx.MenuItem(filemenu, 107, '&Export Project\tCtrl+E','Export Project to project folder... (keyboard shortcut is Ctrl+E)')
        ExportPROJECT.SetBitmap(wx.Bitmap(self.art.topmenu_project_export_button))
        filemenu.AppendItem(ExportPROJECT)
        self.Bind(wx.EVT_MENU,self.onexportproject,id=107)
        
        SavePROJECT = wx.MenuItem(filemenu, 108, '&Save Project\tCtrl+S','Save Project to project folder previously used... (keyboard shortcut is Ctrl+S)')
        SavePROJECT.SetBitmap(wx.Bitmap(self.art.topmenu_project_save_button))
        filemenu.AppendItem(SavePROJECT)
        self.Bind(wx.EVT_MENU,self.onsaveproject,id=108)
        
        #filemenu.AppendSeparator()
        
        #Export = wx.MenuItem(filemenu, 103, '&Export data\tCtrl+E','Export data to file... (keyboard shortcut is Ctrl+E)')
        #Export.SetBitmap(wx.Bitmap(self.art.topmenu_general_export_button))
        #filemenu.AppendItem(Export)
        #self.Bind(wx.EVT_MENU,self.onexportdata,id=103)
        
        filemenu.AppendSeparator()
        
        Quit = wx.MenuItem(filemenu, 104, '&Quit\tCtrl+Q','Exit '+self.name+'... (keyboard shortcut is Ctrl+Q)')
        Quit.SetBitmap(wx.Bitmap(self.art.topmenu_quit_button))
        filemenu.AppendItem(Quit)
        self.Bind(wx.EVT_MENU,self.onexit,id=104)        
        
        mbar.Append(filemenu,"File")
        
        editmenu=wx.Menu()
        
        ViewerDefinitions = wx.MenuItem(editmenu, 111, '&Viewer Definitions\tCtrl+V','Personalize viewer definitions (keyboard shortcut is Ctrl+V)')
        ViewerDefinitions.SetBitmap(wx.Bitmap(self.art.topmenu_viewer_definitions_button))
        editmenu.AppendItem(ViewerDefinitions)
        self.Bind(wx.EVT_MENU,self.onviewerdefinitions,id=111)
        
        Viewersave = wx.MenuItem(editmenu, 116, 'Save scene to object','Save scene to object file (can be opened in blender, for example)')
        Viewersave.SetBitmap(wx.Bitmap(self.art.topmenu_export2object_button))
        editmenu.AppendItem(Viewersave)
        self.Bind(wx.EVT_MENU,self.onexportobject,id=116)
        
        editmenu.AppendSeparator()
        
        emptymesh = wx.MenuItem(filemenu, 112, '&Empty grid\tCtrl+M','Create a grid with a constant value... (keyboard shortcut is Ctrl+M)')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        emptymesh.SetBitmap(wx.Bitmap(self.art.topmenu_empty_mesh_button))
        editmenu.AppendItem(emptymesh)
        self.Bind(wx.EVT_MENU,self.oncreateemptymesh,id=112)
        
        emptysurf = wx.MenuItem(filemenu, 113, '&Empty surface\tCtrl+U','Create a surface with a constant value... (keyboard shortcut is Ctrl+U)')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        emptysurf.SetBitmap(wx.Bitmap(self.art.topmenu_empty_surf_button))
        editmenu.AppendItem(emptysurf)
        self.Bind(wx.EVT_MENU,self.oncreateemptysurf,id=113)
        
        editmenu.AppendSeparator()
        
        toolbox = wx.MenuItem(filemenu, 1131, '&Toolbox\tCtrl+T','Opens toolbox for external files... (keyboard shortcut is Ctrl+T)')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        toolbox.SetBitmap(wx.Bitmap(self.art.topmenu_toolbox_button))
        editmenu.AppendItem(toolbox)
        self.Bind(wx.EVT_MENU,self.ontoolbox,id=1131)
        
        mbar.Append(editmenu,"Edit")
        
        pluginmenu=wx.Menu()
        #pluginhelp = wx.MenuItem(filemenu, 114, 'Plugin help','See GEOMS2 plugins documentation (online).')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        #pluginhelp.SetBitmap(wx.Bitmap(self.art.topmenu_plugin_help_button))
        #pluginmenu.AppendItem(pluginhelp)
        #self.Bind(wx.EVT_MENU,self.onpluginhelp,id=114)
        
        imports = wx.MenuItem(filemenu,115,'Import similars')
        imports.SetBitmap(wx.Bitmap(self.art.topmenu_import_similars_button))
        imports_sub = wx.Menu()
        imports.SetSubMenu(imports_sub)
        pluginmenu.AppendItem(imports)
        
        imports_loadimage = wx.MenuItem(imports_sub, 1151, 'Load image','Loads image files by converting them into mesh.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        imports_loadimage.SetBitmap(wx.Bitmap(self.art.topmenu_loadimage_button))
        imports_sub.AppendItem(imports_loadimage)
        self.Bind(wx.EVT_MENU,self.onloadimage,id=1151)
        
        imports_loadasciistl = wx.MenuItem(imports_sub, 1152, 'Load ascii STL','Loads ASCII STL files and loads them into a special object inside GEOMS2.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        imports_loadasciistl.SetBitmap(wx.Bitmap(self.art.topmenu_loadasciistl_button))
        imports_sub.AppendItem(imports_loadasciistl)
        self.Bind(wx.EVT_MENU,self.onloadasciistl,id=1152)
        
        imports_loadbinarystl = wx.MenuItem(imports_sub, 1153, 'Load BINARY STL','Loads BINARY STL files and loads them into a special object inside GEOMS2.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        imports_loadbinarystl.SetBitmap(wx.Bitmap(self.art.topmenu_loadasciistl_button))
        imports_sub.AppendItem(imports_loadbinarystl)
        self.Bind(wx.EVT_MENU,self.onloadbinarystl,id=1153)
        
        processing = wx.MenuItem(filemenu,155,'Processing')
        processing.SetBitmap(wx.Bitmap(self.art.topmenu_processing_button))
        processing_sub = wx.Menu()
        processing.SetSubMenu(processing_sub)
        pluginmenu.AppendItem(processing)
        
        processing_wavelet = wx.MenuItem(imports_sub, 1551, 'Wavelet convolve','Convolve given mesh using given wavelet.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        processing_wavelet.SetBitmap(wx.Bitmap(self.art.topmenu_wavelet_convolve_button))
        processing_sub.AppendItem(processing_wavelet)
        self.Bind(wx.EVT_MENU,self.onwavelet_convolve,id=1551)
        
        processing_geotrans = wx.MenuItem(imports_sub, 1552, 'Geometric transform','Geometrically transform the variable on a mesh to a formulaic shape.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        processing_geotrans.SetBitmap(wx.Bitmap(self.art.topmenu_geometric_transform_button))
        processing_sub.AppendItem(processing_geotrans)
        self.Bind(wx.EVT_MENU,self.ongeometric_transform,id=1552)
        
        processing_fraccon = wx.MenuItem(imports_sub, 1553, 'Fracture connect','Select only fractures that connect with each other (removing isolated).')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        processing_fraccon.SetBitmap(wx.Bitmap(self.art.topmenu_fracture_connect_button))
        processing_sub.AppendItem(processing_fraccon)
        self.Bind(wx.EVT_MENU,self.onfracture_connect,id=1553)
        
        synths = wx.MenuItem(filemenu,142,'Synthetics')
        synths.SetBitmap(wx.Bitmap(self.art.topmenu_synthetic_button))
        synths_sub = wx.Menu()
        synths.SetSubMenu(synths_sub)
        pluginmenu.AppendItem(synths)
        synths_dmaker = wx.MenuItem(synths_sub, 1421, 'Distribution maker','Distribution maker toolbox.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        synths_dmaker.SetBitmap(wx.Bitmap(self.art.topmenu_simulated_annealing_button))
        synths_sub.AppendItem(synths_dmaker)
        self.Bind(wx.EVT_MENU,self.ondistributionmaker,id=1421)
        
        synths_wavelet = wx.MenuItem(synths_sub, 1422, 'Wavelet maker','Wavelet maker toolbox.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        synths_wavelet.SetBitmap(wx.Bitmap(self.art.topmenu_wavelet_generation_button))
        synths_sub.AppendItem(synths_wavelet)
        self.Bind(wx.EVT_MENU,self.onwaveletmaker,id=1422)
        
        synths_geomesh = wx.MenuItem(synths_sub, 1423, 'Geological mesh maker','Geological mesh maker toolbox.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        synths_geomesh.SetBitmap(wx.Bitmap(self.art.topmenu_geological_mesh_button))
        synths_sub.AppendItem(synths_geomesh)
        self.Bind(wx.EVT_MENU,self.ongeomeshmaker,id=1423)
        
        synths_property = wx.MenuItem(synths_sub, 1424, 'Continuous property maker','Build continuous variables over indicator bins on a mesh.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        synths_property.SetBitmap(wx.Bitmap(self.art.topmenu_property_maker_button))
        synths_sub.AppendItem(synths_property)
        self.Bind(wx.EVT_MENU,self.onpropertymaker,id=1424)
        
        synths_mproperty = wx.MenuItem(synths_sub, 1425, 'Multiple property maker','Build multiple variables over indicator bins on a mesh.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        synths_mproperty.SetBitmap(wx.Bitmap(self.art.topmenu_multiple_property_maker_button))
        synths_sub.AppendItem(synths_mproperty)
        self.Bind(wx.EVT_MENU,self.onmultiplepropertymaker,id=1425)
        
        #dmaker = wx.MenuItem(filemenu, 142, 'Distribution maker','Distribution maker toolbox.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        #dmaker.SetBitmap(wx.Bitmap(self.art.topmenu_distribution_maker_button))
        #pluginmenu.AppendItem(dmaker)
        #self.Bind(wx.EVT_MENU,self.ondistributionmaker,id=142)
        
        ssims = wx.MenuItem(filemenu,143,'Simulation')
        ssims.SetBitmap(wx.Bitmap(self.art.topmenu_simulation_button))
        ssims_sub = wx.Menu()
        ssims.SetSubMenu(ssims_sub)
        pluginmenu.AppendItem(ssims)
        ssims_cbis = wx.MenuItem(ssims_sub, 1431, 'CBIS','Centroid Block Indicator Simulation.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        ssims_cbis.SetBitmap(wx.Bitmap(self.art.topmenu_cbis_button))
        ssims_sub.AppendItem(ssims_cbis)
        self.Bind(wx.EVT_MENU,self.oncbis,id=1431)
        ssims_fsim = wx.MenuItem(ssims_sub, 1432, 'Fracture Simulation','Fracture generation by stochastic methods.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        ssims_fsim.SetBitmap(wx.Bitmap(self.art.topmenu_fracture_sim_button))
        ssims_sub.AppendItem(ssims_fsim)
        self.Bind(wx.EVT_MENU,self.onfsim,id=1432)
        
        sinvs = wx.MenuItem(filemenu,141,'Seismic Inversion')
        sinvs.SetBitmap(wx.Bitmap(self.art.topmenu_seismic_inversion_button))
        sinvs_sub = wx.Menu()
        sinvs.SetSubMenu(sinvs_sub)
        pluginmenu.AppendItem(sinvs)
        sinvs_rdosa = wx.MenuItem(sinvs_sub, 1411, 'R.D.O. simulated annealing','Reservoir distribution optimization by simulated annealing.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        sinvs_rdosa.SetBitmap(wx.Bitmap(self.art.topmenu_simulated_annealing_button))
        sinvs_sub.AppendItem(sinvs_rdosa)
        self.Bind(wx.EVT_MENU,self.onrdosa,id=1411)
        
        parsers = wx.MenuItem(filemenu,144,'Parsers')
        parsers.SetBitmap(wx.Bitmap(self.art.topmenu_parsers_button))
        parsers_sub = wx.Menu()
        parsers.SetSubMenu(parsers_sub)
        pluginmenu.AppendItem(parsers)
        parsers_pseudodist = wx.MenuItem(sinvs_sub, 1441, 'Pseudo distributions parser','Create a file with several distributions using a point data object.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        parsers_pseudodist.SetBitmap(wx.Bitmap(self.art.topmenu_pseudo_dist_button))
        parsers_sub.AppendItem(parsers_pseudodist)
        self.Bind(wx.EVT_MENU,self.onpseudodist,id=1441)
        sinvs_rdosa_zones = wx.MenuItem(sinvs_sub, 1412, 'R.D.O. Zones simulated annealing','Reservoir distribution optimization by simulated annealing.')#+self.name+'... (keyboard shortcut is Ctrl+Q)')
        sinvs_rdosa_zones.SetBitmap(wx.Bitmap(self.art.topmenu_simulated_annealing_button))
        sinvs_sub.AppendItem(sinvs_rdosa_zones)
        self.Bind(wx.EVT_MENU,self.onrdosazones,id=1412)
        
        bossisout = wx.MenuItem(filemenu,319,'Hard work')
        bossisout.SetBitmap(wx.Bitmap(self.art.topmenu_hardwork_button))
        bossisout_sub = wx.Menu()
        bossisout.SetSubMenu(bossisout_sub)
        pluginmenu.AppendItem(bossisout)
        bossisout_tetris = wx.MenuItem(bossisout_sub, 3191, 'pygCurse Tetris')
        bossisout_tetris.SetBitmap(wx.Bitmap(self.art.topmenu_tetris_button))
        bossisout_sub.AppendItem(bossisout_tetris)
        self.Bind(wx.EVT_MENU,self.onCTXhardwordworkTetris,id=3191)
        
        bossisout_dodger = wx.MenuItem(bossisout_sub, 3192, 'pygCurse Dodger')
        bossisout_dodger.SetBitmap(wx.Bitmap(self.art.topmenu_dodger_button))
        bossisout_sub.AppendItem(bossisout_dodger)
        self.Bind(wx.EVT_MENU,self.onCTXhardwordworkDodger,id=3192)
        
        bossisout_maze = wx.MenuItem(bossisout_sub, 3193, 'pygCurse Maze')
        bossisout_maze.SetBitmap(wx.Bitmap(self.art.topmenu_maze_button))
        bossisout_sub.AppendItem(bossisout_maze)
        self.Bind(wx.EVT_MENU,self.onCTXhardwordworkMaze,id=3193)
        
        """
        it15_bmap = wx.MenuItem(menu,315,'Related')
        it15_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_mesh_related_button))
        sub_it15 = wx.Menu()
        it15_bmap.SetSubMenu(sub_it15)
        menu.AppendItem(it15_bmap)
        sub_it15_1 = wx.MenuItem(sub_it15, 3151, 'Convert to nsData')
        sub_it15_1.SetBitmap(wx.Bitmap(self.art.contextmenu_convert_button))
        sub_it15.AppendItem(sub_it15_1)
        self.Bind(wx.EVT_MENU,self.onCTXfullconvert2datamesh,id=3151)
        """
        
        mbar.Append(pluginmenu,"Plugins")
        
        #-----------------------------------------------------------------------
        # Toolbar is a button menu with some of the main functions in the
        # software. It exist so the user can have easy access to them. The
        # images that appear on them are on the ICO directory of this software
        # and if the same functions on the top menu appear with same images
        # with lower scale.
        # TOOLBAR IDs are numbered from 201 to 299
        toolbar = self.CreateToolBar(wx.TB_HORIZONTAL)
        
        a=wx.Image(self.art.toolbar_point_import_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        a.SetMask(wx.Mask(a, wx.WHITE))
        toolbar.AddSimpleTool(201, a, 'Import POINT data', '')
        self.Bind(wx.EVT_TOOL, self.onimportpoint, id=201)
        
        b=wx.Image(self.art.toolbar_grid_import_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        b.SetMask(wx.Mask(b, wx.WHITE))
        toolbar.AddSimpleTool(202, b, 'Import GRID data', '')
        self.Bind(wx.EVT_TOOL, self.onimportgrid, id=202)
        
        d=wx.Image(self.art.toolbar_surface_import_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        d.SetMask(wx.Mask(d, wx.WHITE))
        toolbar.AddSimpleTool(204, d, 'Import SURFACE data', '')
        self.Bind(wx.EVT_TOOL, self.onimportsurf, id=204)
        
        f=wx.Image(self.art.toolbar_data_import_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        f.SetMask(wx.Mask(f, wx.WHITE))
        toolbar.AddSimpleTool(206, f, 'Import NON-SPATIAL data', '')
        self.Bind(wx.EVT_TOOL, self.onimportdata, id=206)
        
        l=wx.Image(self.art.toolbar_project_import_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        l.SetMask(wx.Mask(l, wx.WHITE))
        toolbar.AddSimpleTool(209, l, 'Import Project folder', '')
        self.Bind(wx.EVT_TOOL, self.onimportproject, id=209)
        
        m=wx.Image(self.art.toolbar_project_export_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        m.SetMask(wx.Mask(m, wx.WHITE))
        toolbar.AddSimpleTool(210, m, 'Export to Project folder', '')
        self.Bind(wx.EVT_TOOL, self.onexportproject, id=210)
        
        n=wx.Image(self.art.toolbar_project_save_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        n.SetMask(wx.Mask(n, wx.WHITE))
        toolbar.AddSimpleTool(212, n, 'Save to Project folder', '')
        self.Bind(wx.EVT_TOOL, self.onsaveproject, id=212)
        
        c=wx.Image(self.art.toolbar_viewer_definitions_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        c.SetMask(wx.Mask(c, wx.WHITE))
        toolbar.AddSimpleTool(203, c, 'Viewer definitions', '')
        self.Bind(wx.EVT_TOOL, self.onviewerdefinitions, id=203)
        
        g=wx.Image(self.art.toolbar_empty_mesh_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        g.SetMask(wx.Mask(g, wx.WHITE))
        toolbar.AddSimpleTool(207, g, 'Empty grid', '')
        self.Bind(wx.EVT_TOOL, self.oncreateemptymesh, id=207)
        
        h=wx.Image(self.art.toolbar_empty_surf_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        h.SetMask(wx.Mask(g, wx.WHITE))
        toolbar.AddSimpleTool(208, h, 'Empty surface', '')
        self.Bind(wx.EVT_TOOL, self.oncreateemptysurf, id=208)
        
        o=wx.Image(self.art.toolbar_toolbox_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        o.SetMask(wx.Mask(o, wx.WHITE))
        toolbar.AddSimpleTool(213, o, 'Toolbox', '')
        self.Bind(wx.EVT_TOOL, self.ontoolbox, id=213)
        
        r=wx.Image(self.art.toolbar_export2object_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        r.SetMask(wx.Mask(r, wx.WHITE))
        toolbar.AddSimpleTool(215, r, 'Export viewer to object', '')
        self.Bind(wx.EVT_TOOL, self.onexportobject, id=215)
        
        p=wx.Image(self.art.toolbar_clean_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        p.SetMask(wx.Mask(p, wx.WHITE))
        toolbar.AddSimpleTool(214, p, 'Clear object manager', '')
        self.Bind(wx.EVT_TOOL, self.oncleanmanager, id=214)
        
        i=wx.Image(self.art.toolbar_online_help_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        i.SetMask(wx.Mask(i, wx.WHITE))
        toolbar.AddSimpleTool(211, i, 'Online help for '+self.name, '')
        self.Bind(wx.EVT_TOOL, self.ononlinehelp, id=211)
        
        e=wx.Image(self.art.toolbar_about_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap()
        e.SetMask(wx.Mask(e, wx.WHITE))
        toolbar.AddSimpleTool(205, e, 'About '+self.name, '')
        self.Bind(wx.EVT_TOOL, self.onabout, id=205)
        
        toolbar.Realize()
        
        #-----------------------------------------------------------------------
        # This is splitter window because pyGEOMS is divided essentially
        # into two main areas: the object manager (left) and the visualizer
        # (rigth). This is why the split was vertical. The Pane size can be 
        # controlled by the user altougth its initial size was choosen for
        # best division possible (with the least occult information).
        # The object manager is based on a Panel object, the visualizer in
        # a mayavi (3D visualization engine) scene window. Specifying the
        # minimum pane size stops the user from destroying the division
        # so that only one of the sections appears.
        self.splitter = splitter = wx.SplitterWindow(self, style = wx.SP_BORDER)
        self.panel= panel = wx.ScrolledWindow(splitter,wx.ID_ANY)
        panel.SetBackgroundColour('white')
        panel.SetScrollbars(wx.VERTICAL, 1, 6, 1150)
        #self.control = wx.Panel(splitter) # Using a panel to able to work with SPyder IDE (for some reason mayavi doesnt work with spyder).
        self.mayavi_view = MayaviView()
        self.control= self.mayavi_view.edit_traits(
                        parent=splitter,
                        kind='subpanel').control
        splitter.SplitVertically(panel, self.control,350)
        splitter.SetMinimumPaneSize(350)
        
        dt = FileDrop(self.splitter)
        self.splitter.SetDropTarget(dt)
        
        #-----------------------------------------------------------------------
        # This is the specifications for the object manager which uses a
        # TreeCtrl widget. The objects on the TreeCtrl will have pictures
        # dedicated to each specific type. That is why we start by making
        # an image list.
        
        self.image_list = wx.ImageList(16, 16)
        self.gimage = self.image_list.Add(wx.Image(self.art.contextmenu_grid_import_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.pimage = self.image_list.Add(wx.Image(self.art.contextmenu_point_import_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.simage = self.image_list.Add(wx.Image(self.art.contextmenu_surface_import_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.dimage = self.image_list.Add(wx.Image(self.art.contextmenu_data_import_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        self.timage = self.image_list.Add(wx.Image(self.art.contextmenu_triangle_mesh_import_button, wx.BITMAP_TYPE_PNG).ConvertToBitmap())
        
        wx.StaticBox(panel,-1,'Object data',(10,10),(320,470))
        self.object_tree = wx.TreeCtrl(panel, -1, (30,30), (260, 430), wx.TR_HIDE_ROOT|wx.TR_HAS_BUTTONS| wx.TR_LINES_AT_ROOT|wx.TR_TWIST_BUTTONS) #wx.TR_HIDE_ROOT|
        self.object_root = self.object_tree.AddRoot('Objects')
        self.object_tree.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnObjectSelected, id=self.object_tree.GetId())
        self.object_tree.AssignImageList(self.image_list)
        self.object_tree.Bind(wx.EVT_RIGHT_DOWN,self.oncontextmenu)
        self.object_tree.Bind(wx.EVT_TREE_BEGIN_DRAG, self.OnBeginLeftDrag)
        self.object_tree.Bind(wx.EVT_TREE_END_DRAG, self.OnEndDrag)
        
        wx.StaticBox(panel,-1,'Statistics',(10,480),(320,280))
        stats_position = 480
        self.regular_font = wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD) 
        wx.StaticText(panel,-1,'Mean:    ',(30,stats_position+30)).SetFont(self.regular_font) 
        wx.StaticText(panel,-1,'Variance:',(30,stats_position+60)).SetFont(self.regular_font)
        wx.StaticText(panel,-1,'Std.dev.:',(30,stats_position+90)).SetFont(self.regular_font)
        wx.StaticText(panel,-1,'Minimum: ',(30,stats_position+120)).SetFont(self.regular_font)
        wx.StaticText(panel,-1,'Per. 25: ',(30,stats_position+150)).SetFont(self.regular_font)
        wx.StaticText(panel,-1,'Per. 50: ',(30,stats_position+180)).SetFont(self.regular_font)
        wx.StaticText(panel,-1,'Per. 75: ',(30,stats_position+210)).SetFont(self.regular_font)
        wx.StaticText(panel,-1,'Maximum: ',(30,stats_position+240)).SetFont(self.regular_font)
        
        value_space = 70
        self.obj_stats0 = wx.StaticText(panel,-1,'None',(20+value_space,stats_position+30))
        self.obj_stats1 = wx.StaticText(panel,-1,'None',(20+value_space,stats_position+60))
        self.obj_stats2 = wx.StaticText(panel,-1,'None',(20+value_space,stats_position+90))
        self.obj_stats3 = wx.StaticText(panel,-1,'None',(20+value_space,stats_position+120))
        self.obj_stats5 = wx.StaticText(panel,-1,'None',(20+value_space,stats_position+150))
        self.obj_stats6 = wx.StaticText(panel,-1,'None',(20+value_space,stats_position+180))
        self.obj_stats7 = wx.StaticText(panel,-1,'None',(20+value_space,stats_position+210))
        self.obj_stats4 = wx.StaticText(panel,-1,'None',(20+value_space,stats_position+240))
        
        object_specs_Ypos = 760
        object_specs_Xpos = 10
        wx.StaticBox(panel,-1,'Object specifics',(object_specs_Xpos,object_specs_Ypos),(320,330))
        wx.StaticText(panel,-1,'Number:',(object_specs_Xpos+20,object_specs_Ypos+30))
        self.number_of_values = wx.StaticText(panel,-1,'None',(object_specs_Xpos+20+50,object_specs_Ypos+30))
        self.x_axis_info = wx.StaticText(panel,-1,'Blocks in X:',(object_specs_Xpos+20,object_specs_Ypos+60))
        self.y_axis_info = wx.StaticText(panel,-1,'Blocks in Y:',(object_specs_Xpos+20,object_specs_Ypos+90))
        self.z_axis_info = wx.StaticText(panel,-1,'Blocks in Z:',(object_specs_Xpos+20,object_specs_Ypos+120))
        
        self.sizex = wx.StaticText(panel,-1,'Size in X:',(object_specs_Xpos+20,object_specs_Ypos+150))
        self.sizey = wx.StaticText(panel,-1,'Size in Y:',(object_specs_Xpos+20,object_specs_Ypos+180))
        self.sizez = wx.StaticText(panel,-1,'Size in Z:',(object_specs_Xpos+20,object_specs_Ypos+210))
        
        self.firstx = wx.StaticText(panel,-1,'First in X:',(object_specs_Xpos+20,object_specs_Ypos+240))
        self.firsty = wx.StaticText(panel,-1,'First in Y:',(object_specs_Xpos+20,object_specs_Ypos+270))
        self.firstz = wx.StaticText(panel,-1,'First in Z:',(object_specs_Xpos+20,object_specs_Ypos+300))
        
    def OnBeginLeftDrag(self, event):
        '''Allow drag-and-drop for leaf nodes.'''
        #self.log.WriteText("OnBeginDrag")
        event.Allow()
        self.dragType = "left button"
        self.dragItem = event.GetItem()

    def Traverse(self, func, startNode):
        """Apply 'func' to each node in a branch, beginning with 'startNode'. """
        def TraverseAux(node, depth, func):
            nc = self.object_tree.GetChildrenCount(node, 0)
            child, cookie = self.object_tree.GetFirstChild(node)
            # In wxPython 2.5.4, GetFirstChild only takes 1 argument
            for i in xrange(nc):
                func(child, depth)
                TraverseAux(child, depth + 1, func)
                child, cookie = self.object_tree.GetNextChild(node, cookie)
        func(startNode, 0)
        TraverseAux(startNode, 1, func)

    def ItemIsChildOf(self, item1, item2):
        ''' Tests if item1 is a child of item2, using the Traverse function '''
        self.object_tree.result = False
        def test_func(node, depth):
            if node == item1:
                self.result = True

        self.Traverse(test_func, item2)
        return self.result

    def SaveItemsToList(self, startnode):
        ''' Generates a python object representation of the tree (or a branch of it),
            composed of a list of dictionaries with the following key/values:
            label:      the text that the tree item had
            data:       the node's data, returned from GetItemPyData(node)
            children:   a list containing the node's children (one of these dictionaries for each)
        '''
        global list
        list = []

        def save_func(node, depth):
            tmplist = list
            for x in range(depth):
                if type(tmplist[-1]) is not dict:
                    tmplist.append({})
                tmplist = tmplist[-1].setdefault('children', [])

            item = {}
            item['label'] = self.object_tree.GetItemText(node)
            item['data'] = self.object_tree.GetItemPyData(node)
            item['icon-normal'] = self.object_tree.GetItemImage(node, wx.TreeItemIcon_Normal)
            item['icon-selected'] = self.object_tree.GetItemImage(node, wx.TreeItemIcon_Selected)
            item['icon-expanded'] = self.object_tree.GetItemImage(node, wx.TreeItemIcon_Expanded)
            item['icon-selectedexpanded'] = self.object_tree.GetItemImage(node, wx.TreeItemIcon_SelectedExpanded)

            tmplist.append(item)

        self.Traverse(save_func, startnode)
        return list

    def InsertItemsFromList(self, itemlist, parent, insertafter=None, appendafter=False):
        ''' Takes a list, 'itemslist', generated by SaveItemsToList, and inserts
            it in to the tree. The items are inserted as children of the
            treeitem given by 'parent', and if 'insertafter' is specified, they
            are inserted directly after that treeitem. Otherwise, they are put at
            the beginning.
            
            If 'appendafter' is True, each item is appended. Otherwise it is prepended.
            In the case of children, you want to append them to keep them in the same order.
            However, to put an item at the start of a branch that has children, you need to
            use prepend. (This will need modification for multiple inserts. Probably reverse
            the list.)

            Returns a list of the newly inserted treeitems, so they can be
            selected, etc..'''
        newitems = []
        for item in itemlist:
            if insertafter:
                node = self.object_tree.InsertItem(parent, insertafter, item['label'])
            elif appendafter:
                node = self.object_tree.AppendItem(parent, item['label'])
            else:
                node = self.object_tree.PrependItem(parent, item['label'])
            self.object_tree.SetItemPyData(node, item['data'])
            self.object_tree.SetItemImage(node, item['icon-normal'], wx.TreeItemIcon_Normal)
            self.object_tree.SetItemImage(node, item['icon-selected'], wx.TreeItemIcon_Selected)
            self.object_tree.SetItemImage(node, item['icon-expanded'], wx.TreeItemIcon_Expanded)
            self.object_tree.SetItemImage(node, item['icon-selectedexpanded'], wx.TreeItemIcon_SelectedExpanded)

            newitems.append(node)
            if 'children' in item:
                self.InsertItemsFromList(item['children'], node, appendafter=True)
        return newitems

    def OnCompareItems(self, item1, item2):
            t1 = self.GetItemText(item1)
            t2 = self.GetItemText(item2)
            self.log.WriteText('compare: ' + t1 + ' <> ' + t2 + '\n')
            if t1 < t2: return -1
            if t1 == t2: return 0
            return 1

    def OnEndDrag(self, event):
        if event.GetItem().IsOk():
            target = event.GetItem()
            #self.object_tree.InsertItem(self.dragItem,target,self.object_tree.GetItemText(self.dragItem))
            #print target,self.dragItem
            #print self.object_tree.GetItemText(self.dragItem),self.object_tree.GetItemText(target)
        else:
            return
        # Make sure this member exists.
        try:
            source = self.dragItem
        except:
            return
        # Prevent the user from dropping an item inside of itself
        #if self.object_tree.ItemIsChildOf(target, source):
        #    wx.MessageBox('The item cannot be move to itself.', 'Error.', wx.OK | wx.ICON_INFORMATION)
        #    self.object_tree.Unselect()
        #    return

        # Get the target's parent's ID
        #names = self.object_manager.get_object_names()
        #print self.object_tree.GetItemText(self.object_tree.GetItemParent(self.dragItem))
        #print self.object_tree.GetItemText(self.object_tree.GetItemParent(target))
        #if self.object_tree.GetItemParent(self.dragItem)!=self.object_tree.GetRootItem() and self.object_tree.GetItemParent(target)!=self.object_tree.GetRootItem(): return
        if self.object_tree.GetItemParent(self.dragItem)!=self.object_tree.GetRootItem() and self.object_tree.GetItemParent(target)==self.object_tree.GetRootItem():
            selection = self.get_object_selection_by_item(self.dragItem)
            end_selection = pieces = self.get_object_selection_by_item(target)
            flag = self.object_manager.copy(selection,end_selection)
            if flag:
                frame.update_last_variable_list()
                frame.on_delete_object(selection)
            return True
        if self.object_tree.GetItemParent(self.dragItem)!=self.object_tree.GetRootItem() and self.object_tree.GetItemParent(target)!=self.object_tree.GetRootItem():
            if self.object_tree.GetItemParent(self.dragItem)!=self.object_tree.GetItemParent(target):      
                ptarget = self.object_tree.GetItemParent(target)
                selection = self.get_object_selection_by_item(self.dragItem)
                end_selection = pieces = self.get_object_selection_by_item(ptarget)
                flag = self.object_manager.copy(selection,end_selection)
                if flag:
                    frame.update_last_variable_list()
                    frame.on_delete_object(selection)
                return True
        if self.object_tree.GetItemParent(self.dragItem)==self.object_tree.GetRootItem() and self.object_tree.GetItemParent(target)!=self.object_tree.GetRootItem(): return False
        #print 'CONTINUA'
        #item = self.object_tree.GetSelection()
        pieces = self.get_object_selection_by_item(self.dragItem)
        if pieces[0] in self.mayavi_view.view_objects_names.keys():
            pieces.append(self.mayavi_view.view_variables_names[pieces[0]])
            self.mayavi_view.remove_something(pieces)
        targetparent = self.object_tree.GetItemParent(target)
        if not targetparent.IsOk():
            targetparent = self.object_tree.GetRootItem()
            
        # One of the following methods of inserting will be called...   
        def MoveHere(event):
            # Save + delete the source
            save = self.SaveItemsToList(source)
            self.object_tree.Delete(source)
            newitems = self.InsertItemsFromList(save, targetparent, target)
            #self.tree.UnselectAll()
            for item in newitems:
                self.object_tree.SelectItem(item)

        def InsertInToThisGroup(event):
            # Save + delete the source
            save = self.SaveItemsToList(source)
            self.object_tree.Delete(source)
            newitems = self.InsertItemsFromList(save, target)
            #self.tree.UnselectAll()
            for item in newitems:
                self.object_tree.SelectItem(item)
        #---------------------------------------
        """
        if self.object_tree.GetPyData(target)["type"] == "container" and self.dragType == "right button":
            menu = wx.Menu()
            menu.Append(101, "Move to after this group", "")
            menu.Append(102, "Insert into this group", "")
            menu.UpdateUI()
            menu.Bind(wx.EVT_MENU, MoveHere, id=101)
            menu.Bind(wx.EVT_MENU, InsertInToThisGroup,id=102)
            self.PopupMenu(menu)
        else:
        """
        #if self.object_tree.IsExpanded(target):
        #   InsertInToThisGroup(None)
        #else:
        MoveHere(None)
        
    def onexportobject(self,event):
        if len(self.mayavi_view.view_objects_names.keys())!=0:
            dlg=wx.FileDialog(self,"Give name for scene object file...",style=wx.SAVE,wildcard='*.*')
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                if path[-4:]!='.wrl': path = path + '.wrl'
                self.mayavi_view.save_everything_on_scene(path)   
        else:
            wx.MessageBox('There is nothing on the viewer to be saved to object.', 'Information', wx.OK | wx.ICON_INFORMATION)
        
    def oncleanmanager(self,event):
        dlg=wx.MessageDialog(self,'Are you sure you want to clear all object from object manager?','Delete all objects?!!',wx.YES_NO|wx.ICON_EXCLAMATION)
        if dlg.ShowModal()==wx.ID_YES:
            names = self.object_manager.get_object_names()
            for i in names:
                self.on_delete_object([i])
            wx.MessageBox('Object manager cleared.', 'Information', wx.OK | wx.ICON_INFORMATION)
        
    def onloadimage(self,event):
        dlg=wx.FileDialog(self,"Input image file...",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            flag = False
            try:
                d = pil.Image.open(dlg.GetPath())
                data = np.asarray(d)
                flag = True
            except IOError:
                flag = False
                wx.MessageBox('The file doesnt seem to be an image.', 'Error.', wx.OK | wx.ICON_INFORMATION)
            if flag:
                if len(data.shape)==2: data = data.reshape((data.shape[0],data.shape[1],1))
                name = 'Image_mesh'
                vname = 'Pixel_value'
                frame.object_manager.add_mesh_object(data.shape,(1,1,1),(0,0,0),-999,name,vname,data)
                frame.update_last_object_list()
                wx.MessageBox('Check object manager for new mesh element.', 'Operation finished.', wx.OK | wx.ICON_INFORMATION)
                
    def onloadbinarystl(self,event):
        dlg=wx.FileDialog(self,"Input BINARY STL file...",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            Header,x,y,z,triangles = cfile.BinarySTL(dlg.GetPath())
            frame.object_manager.add_triangle_mesh_object(x,y,z,triangles,-999,'Triangle_mesh','color_variable')
            frame.update_last_object_list()
                
    def onloadasciistl(self,event):
        dlg=wx.FileDialog(self,"Input ASCII STL file...",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            flag = False
            STLfile=dlg.GetPath()
            f=open(STLfile,'r')
            c=0
            for line in f:
                strarray=line.split()
                if strarray[0]=='vertex':
                    c=c+1
            f.close()
            if c<3:
                wx.MessageBox('Cant have a triangle with less than 3 points.', 'Operation finished.', wx.OK | wx.ICON_INFORMATION)
            else:
                x = np.zeros(c,dtype='float32')
                y = np.zeros(c,dtype='float32')
                z = np.zeros(c,dtype='float32')
                triangles = np.zeros((int(c/3),3),dtype='int32')
                #triangles=[(i, i+1, i+2) for i in range(0, len(x),3)]
                f=open(STLfile,'r')
                c=0
                for line in f:
                    strarray=line.split()
                    if strarray[0]=='vertex':
                        x[c]=np.float(strarray[1])
                        y[c]=np.float(strarray[2])
                        z[c]=np.float(strarray[3])
                        c=c+1
                c=0
                t=0
                while c<triangles.shape[0]:
                    triangles[c,:] = np.array([t,t+1,t+2])[:]
                    t = t + 3
                    c=c+1                       
                frame.object_manager.add_triangle_mesh_object(x,y,z,triangles,-999,'Triangle_mesh','color_variable')
                frame.update_last_object_list()

    def onrdosazones(self,event):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        inside = ['data']
        what_gives2 = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if len(frame.object_manager.object_list[i].get_numeric_variable_names())!=0:
                    what_gives2.append(i)
        if len(what_gives)>=1:
            if len(what_gives2)>=1:
                rdosazonesframe=RdosaZonesFrame(parent=frame,id=996)
                rdosazonesframe.Centre()
                rdosazonesframe.Show()
            else:
                wx.MessageBox('You dont have a data object for wavelet.', 'Data missing', wx.OK | wx.ICON_INFORMATION)
        else:
            wx.MessageBox('You dont have a mesh object for initial model.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
                
    def onrdosa(self,event):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        inside = ['data']
        what_gives2 = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if len(frame.object_manager.object_list[i].get_numeric_variable_names())!=0:
                    what_gives2.append(i)
        if len(what_gives)>=1:
            if len(what_gives2)>=1:
                rdosaframe=RdosaFrame(parent=frame,id=996)
                rdosaframe.Centre()
                rdosaframe.Show()
            else:
                wx.MessageBox('You dont have a data object for wavelet.', 'Data missing', wx.OK | wx.ICON_INFORMATION)
        else:
            wx.MessageBox('You dont have a mesh object for initial model.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
            
    def ondistributionmaker(self,event):
        distmakerframe=DistributionMakerFrame(parent=frame,id=996)
        distmakerframe.Centre()
        distmakerframe.Show()
        
    def onpseudodist(self,event):
        inside = ['point']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        if len(what_gives)!=0:
            pseudodistmakerframe=PseudoDistributionMakerFrame(parent=frame,id=996)
            pseudodistmakerframe.Centre()
            pseudodistmakerframe.Show()
        else:
            wx.MessageBox('You need to have a point-data object in object manager.', 'Point missing', wx.OK | wx.ICON_INFORMATION)
        
    def onwavelet_convolve(self,event):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        inside = ['data']
        what_gives2 = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if len(frame.object_manager.object_list[i].get_numeric_variable_names())!=0:
                    what_gives2.append(i)
        if len(what_gives)>=1:
            if len(what_gives2)>=1:
                waveconvframe=WaveletConvolveFrame(parent=frame,id=996)
                waveconvframe.Centre()
                waveconvframe.Show()
            else:
                wx.MessageBox('You dont have a data object for wavelet.', 'Data missing', wx.OK | wx.ICON_INFORMATION)
        else:
            wx.MessageBox('You dont have a mesh object to convolve.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
            
    def onfracture_connect(self,event):
        fracconframe=FractureConnectFrame(parent=frame,id=996)
        fracconframe.Centre()
        fracconframe.Show()
        
    def onpropertymaker(self,event):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        if len(what_gives)!=0:
            propertymakerframe=PropertyMakerFrame(parent=frame,id=996)
            propertymakerframe.Centre()
            propertymakerframe.Show()
        else:
            wx.MessageBox('You need to have a mesh-data object in object manager.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
            
    def onmultiplepropertymaker(self,event):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        if len(what_gives)!=0:
            mpropertymakerframe=MultiplePropertyMakerFrame(parent=frame,id=996)
            mpropertymakerframe.Centre()
            mpropertymakerframe.Show()
        else:
            wx.MessageBox('You need to have a mesh-data object in object manager.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
            
    def ongeometric_transform(self,event):
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        if len(what_gives)!=0:
            geotransframe=GeometricTransformFrame(parent=frame,id=996)
            geotransframe.Centre()
            geotransframe.Show()
        else:
            wx.MessageBox('You need to have a mesh-data object in object manager.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
        
    def ongeomeshmaker(self,event):
        geomakerframe=SyntheticProductionFrame(parent=frame,id=996)
        geomakerframe.Centre()
        geomakerframe.Show()
        
    def onwaveletmaker(self,event):
        waveframe=WaveletMakerFrame(parent=frame,id=996)
        waveframe.Centre()
        waveframe.Show()
        
    def oncbis(self,event):
        inside = ['point']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        if len(what_gives)!=0:
            cbisframe=CBISFrame(parent=frame,id=996)
            cbisframe.Centre()
            cbisframe.Show()
        else:
            wx.MessageBox('You need to have a point-data object in object manager.', 'Point missing', wx.OK | wx.ICON_INFORMATION)
            
    def onfsim(self,event):
        fsimframe = FSimFrame(parent=frame,id=996)
        fsimframe.Centre()
        fsimframe.Show()
        
    def update_object_specs(self,object_names):
        if self.object_manager.object_type[object_names[0]]=='mesh':
            self.number_of_values.SetLabel(str(np.prod(self.object_manager.object_list[object_names[0]].blocks)))
            self.x_axis_info.SetLabel('Blocks in X:     '+str(self.object_manager.object_list[object_names[0]].blocks[0]))
            self.y_axis_info.SetLabel('Blocks in Y:     '+str(self.object_manager.object_list[object_names[0]].blocks[1]))
            self.z_axis_info.SetLabel('Blocks in Z:     '+str(self.object_manager.object_list[object_names[0]].blocks[2]))
            
            self.sizex.SetLabel('Size in X:       '+str(self.object_manager.object_list[object_names[0]].size[0])) 
            self.sizey.SetLabel('Size in Y:       '+str(self.object_manager.object_list[object_names[0]].size[1]))  
            self.sizez.SetLabel('Size in Z:       '+str(self.object_manager.object_list[object_names[0]].size[2])) 
            
            self.firstx.SetLabel('First in X:      '+str(self.object_manager.object_list[object_names[0]].first[0]))  
            self.firsty.SetLabel('First in Y:      '+str(self.object_manager.object_list[object_names[0]].first[1]))
            self.firstz.SetLabel('First in Z:      '+str(self.object_manager.object_list[object_names[0]].first[2]))
            
        elif self.object_manager.object_type[object_names[0]]=='point':
            
            self.number_of_values.SetLabel(str(np.prod(self.object_manager.object_list[object_names[0]].x.shape[0])))
            self.x_axis_info.SetLabel('Range in X:     '+str(self.object_manager.object_list[object_names[0]].x.max()-self.object_manager.object_list[object_names[0]].x.min()))
            self.y_axis_info.SetLabel('Range in Y:     '+str(self.object_manager.object_list[object_names[0]].y.max()-self.object_manager.object_list[object_names[0]].y.min()))
            self.z_axis_info.SetLabel('Range in Z:     '+str(self.object_manager.object_list[object_names[0]].z.max()-self.object_manager.object_list[object_names[0]].z.min()))
            
            self.sizex.SetLabel('First in X:      '+str(self.object_manager.object_list[object_names[0]].x.min())) 
            self.sizey.SetLabel('First in Y:      '+str(self.object_manager.object_list[object_names[0]].y.min())) 
            self.sizez.SetLabel('First in Z:      '+str(self.object_manager.object_list[object_names[0]].z.min())) 
            
            self.firstx.SetLabel('Last in X:      '+str(self.object_manager.object_list[object_names[0]].x.max())) 
            self.firsty.SetLabel('Last in Y:      '+str(self.object_manager.object_list[object_names[0]].y.max())) 
            self.firstz.SetLabel('Last in Z:      '+str(self.object_manager.object_list[object_names[0]].z.max()))
            
        elif self.object_manager.object_type[object_names[0]]=='surf':
            self.number_of_values.SetLabel(str(np.prod(self.object_manager.object_list[object_names[0]].blocks)))
            self.x_axis_info.SetLabel('Blocks in X:     '+str(self.object_manager.object_list[object_names[0]].blocks[0]))
            self.y_axis_info.SetLabel('Blocks in Y:     '+str(self.object_manager.object_list[object_names[0]].blocks[1]))
            self.z_axis_info.SetLabel('Blocks in Z:     '+str(self.object_manager.object_list[object_names[0]].blocks[2]))
            
            self.sizex.SetLabel('Size in X:       '+str(self.object_manager.object_list[object_names[0]].size[0])) 
            self.sizey.SetLabel('Size in Y:       '+str(self.object_manager.object_list[object_names[0]].size[1]))  
            self.sizez.SetLabel('Size in Z:       '+str(self.object_manager.object_list[object_names[0]].size[2])) 
            
            self.firstx.SetLabel('First in X:      '+str(self.object_manager.object_list[object_names[0]].first[0]))  
            self.firsty.SetLabel('First in Y:      '+str(self.object_manager.object_list[object_names[0]].first[1]))
            self.firstz.SetLabel('First in Z:      '+str(self.object_manager.object_list[object_names[0]].first[2]))
            
        elif self.object_manager.object_type[object_names[0]]=='data':
            
            self.number_of_values.SetLabel(str(np.prod(self.object_manager.object_list[object_names[0]].x.shape[0])))
            self.x_axis_info.SetLabel('non-spatial object')
            self.y_axis_info.SetLabel('non-spatial object')
            self.z_axis_info.SetLabel('non-spatial object')
            
            self.sizex.SetLabel('non-spatial object') 
            self.sizey.SetLabel('non-spatial object') 
            self.sizez.SetLabel('non-spatial object') 
            
            self.firstx.SetLabel('non-spatial object') 
            self.firsty.SetLabel('non-spatial object') 
            self.firstz.SetLabel('non-spatial object')
        elif self.object_manager.object_type[object_names[0]]=='triangle_mesh':
            
            self.number_of_values.SetLabel(str(self.object_manager.object_list[object_names[0]].triangles.shape[0])+'   ('+str(self.object_manager.object_list[object_names[0]].xcoords.shape[0])+')')
            self.x_axis_info.SetLabel('special plugin object')
            self.y_axis_info.SetLabel('special plugin object')
            self.z_axis_info.SetLabel('special plugin object')
            
            self.sizex.SetLabel('special plugin object') 
            self.sizey.SetLabel('special plugin object') 
            self.sizez.SetLabel('special plugin object') 
            
            self.firstx.SetLabel('special plugin object') 
            self.firsty.SetLabel('special plugin object') 
            self.firstz.SetLabel('special plugin object')
        
    def update_statistics_info(self,statistics):
        self.obj_stats0.SetLabel('%13f'%statistics[0])
        self.obj_stats1.SetLabel('%13f'%statistics[1])
        self.obj_stats2.SetLabel('%13f'%statistics[2])
        self.obj_stats3.SetLabel('%13f'%statistics[3])
        self.obj_stats4.SetLabel('%13f'%statistics[4])
        self.obj_stats5.SetLabel('%13f'%statistics[5])
        self.obj_stats6.SetLabel('%13f'%statistics[6])
        self.obj_stats7.SetLabel('%13f'%statistics[7])
        
    def OnObjectSelected(self, event):
        pieces = self.get_object_selection()
        if len(pieces)==1:
            self.update_object_specs(pieces)
        else: 
            self.update_statistics_info(self.object_manager.object_list[pieces[0]].variable[pieces[1]].basic_statistics)
            self.update_object_specs(pieces)
        
    def __get_item_by_label__(self, search_text):
        '''
        __get_item_by_label__(...)
            __get_item_by_label__(search_text,item)
            
            Gives an treectrl item which corresponds to the search_text
            string variable. This bit of code was adapted from the one
            gathered here:
            http://stackoverflow.com/questions/6954242/
            wxpython-treectrl-how-can-i-get-a-tree-item-by-name
            
        Parameters
        ----------
        search_text : string
            String of top object to be found.
            
        Returns
        -------
        out: treectrl item
            Item equivalente to the top object whose name is search_text.
        
        See also
        --------
        __get_item_by_list__
        '''
        # SEE:
        # http://stackoverflow.com/questions/6954242/wxpython-treectrl-how-can-i-get-a-tree-item-by-name
        # FOR THIS CODE SNIPET (ACTUALLY IT WAS MODIFIED FOR THIS SOFTWARE)
        item, cookie = self.object_tree.GetFirstChild(self.object_root)
        while item.IsOk():
            text = self.object_tree.GetItemText(item)
            if text.lower() == search_text.lower():
                return item
            #if self.object_tree.ItemHasChildren(item):
            #    match = self.__get_item_by_label__(search_text, item)
            #    if match.IsOk():
            #        return match
            item, cookie = self.object_tree.GetNextChild(self.object_root, cookie) 
        return wx.TreeItemId()
        
    def __get_item_by_list__(self,search_list):
        '''
        __get_item_by_list__(...)
            __get_item_by_list__(search_list)
            
            Gives a list of items for the treectrl (because it wont accept
            names).
            
        Parameters
        ----------
        search_list : list
            List of strings with the names of an object and its variables
            (pos. 0 and 1, respectivly). Equivalent to pieces variable in
            other funtions.
            
        Returns
        -------
        out: list
            List of items for a treectrl. The first is the top object, the
            second is its variable.
        
        See also
        --------
        __get_item_by_label__
        '''
        # IM TRYING TO GET A LIST OF ITEMS INSTEAD OF NAMES.
        pitem = self.__get_item_by_label__(search_list[0])
        citem,cookie = self.object_tree.GetFirstChild(pitem)
        text = self.object_tree.GetItemText(citem)
        while text!=search_list[1]:
            citem,cookie = self.object_tree.GetNextChild(pitem,cookie)
            text = self.object_tree.GetItemText(citem)
        return [pitem,citem]
        
    def get_object_selection_by_item(self,item):
        '''
        get_object_selection(...)
            get_object_selection(no arguments)
            
            Gives a list of the user choice from the object manager (treectrl).
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: list
            List of strings with the names of the objects selected (meaning
            top object and variable or just the object if thats the case).
        
        See also
        --------
        None
        '''
        pieces = []
        #item = self.object_tree.GetSelection()
        while self.object_tree.GetItemParent(item):
          piece = self.object_tree.GetItemText(item)
          pieces.insert(0, piece)
          item = self.object_tree.GetItemParent(item)
        return pieces
        
    def get_object_selection(self):
        '''
        get_object_selection(...)
            get_object_selection(no arguments)
            
            Gives a list of the user choice from the object manager (treectrl).
            
        Parameters
        ----------
        No parameters (it asks the main class which object was selected)
            
        Returns
        -------
        out: list
            List of strings with the names of the objects selected (meaning
            top object and variable or just the object if thats the case).
        
        See also
        --------
        None
        '''
        pieces = []
        item = self.object_tree.GetSelection()
        while self.object_tree.GetItemParent(item):
          piece = self.object_tree.GetItemText(item)
          pieces.insert(0, piece)
          item = self.object_tree.GetItemParent(item)
        return pieces
        
    def set_selection_as_bold(self,items,pieces):
        '''
        set_selection_as_bold(...)
            set_selection_as_bold(item,pieces,child_flag)
            
            Makes selection in object manager (treectrl) go bold (font) to
            warn the user the object is in the 3D viewer.
            
        Parameters
        ----------
        items : list wxTreeItem
            List of Items from a wx TreeCtrl.
            
        pieces : list
            List with the names of the objects from object manager (treectrl)
            selection.
            
        Returns
        -------
        out: None
            The result is visual on the interface. The item font goes bold.
        
        See also
        --------
        remove_bold_from_selection
        '''
        self.object_tree.SetItemBold(items[0],bold=True)
        self.object_tree.SetItemBold(items[1],bold=True)
        
    def remove_bold_from_selection(self,items,pieces):
        '''
        remove_bold_from_selection(...)
            remove_bold_from_selection(item,pieces,child_flag)
            
            Makes selection in object manager (treectrl) go bold (font) to
            warn the user the object is in the 3D viewer.
            
        Parameters
        ----------
        items : list wxTreeItem
            List of Items from a wx TreeCtrl.
            
        pieces : list
            List with the names of the objects from object manager (treectrl)
            selection.
            
        Returns
        -------
        out: None
            The result is visual on the interface. Bold font is removed from
            item.
        
        See also
        --------
        set_selection_as_bold
        ''' 
        self.object_tree.SetItemBold(items[0],bold=False)
        self.object_tree.SetItemBold(items[1],bold=False)
        
    def oncontextmenu(self,event):
        '''
        oncontextmenu(...)
            oncontextmenu(event)
            
            Brings up a context menu for the selected (interface selection)
            object.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the interface. 
        
        See also
        --------
        None
        '''
        # CONTEXT IDS GO FROM 301 TO 399
        pt = event.GetPosition();
        item, flags = self.object_tree.HitTest(pt)
        if item:
            self.object_tree.SelectItem(item)
            pieces = self.get_object_selection()
            if len(pieces)==1:
                if self.object_manager.object_type[pieces[0]] == 'mesh':
                    
                    self.CTX_view_object = wx.NewId()
                    self.CTX_export = wx.NewId()
                    self.CTX_delete = wx.NewId()
                    
                    menu = wx.Menu()
                    it1_bmap = wx.MenuItem(menu,301,'View\UnView')
                    it1_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_view_button))
                    it1 = menu.AppendItem(it1_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_view_mesh_object,id = 301)
                    
                    it2_bmap = wx.MenuItem(menu,302,'Object specifics')
                    it2_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_object_button))
                    it2 = menu.AppendItem(it2_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_object_specifics_mesh,id = 302)
                    
                    it21_bmap = wx.MenuItem(menu,3021,'Definitions')
                    it21_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_definitions_button))
                    it21 = menu.AppendItem(it21_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_definitions_mesh,id = 3021)
                    
                    it22_bmap = wx.MenuItem(menu,3022,'Z-Stretch')
                    it22_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_zscale_button))
                    it22 = menu.AppendItem(it22_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_zscale,id = 3022)
                    
                    menu.AppendSeparator()
                    
                    it5_bmap = wx.MenuItem(menu,305,'Histogram')
                    it5_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_histogram_button))
                    it5 = menu.AppendItem(it5_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXhistogram,id = 305)
                    
                    it6_bmap = wx.MenuItem(menu,306,'Scatterplot')
                    it6_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_scatterplot_button))
                    menu.AppendItem(it6_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXscatterplot,id = 306)
                    
                    it7_bmap = wx.MenuItem(menu,307,'Box-Plot')
                    it7_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_boxplot_button))
                    menu.AppendItem(it7_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXboxplot,id = 307)
                    
                    it71_bmap = wx.MenuItem(menu,3071,'LinePlot')
                    it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_lineplot_button))
                    menu.AppendItem(it71_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXlineplot,id = 3071)
                    
                    it72_bmap = wx.MenuItem(menu,3072,'Stereonet')
                    it72_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_stereonet_button))
                    menu.AppendItem(it72_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXstereonet,id = 3072)
                    
                    it73_bmap = wx.MenuItem(menu,3073,'Density-plot')
                    it73_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_densityplot_button))
                    menu.AppendItem(it73_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXdensityplot,id = 3073)
                    
                    menu.AppendSeparator()
                    
                    it15_bmap = wx.MenuItem(menu,315,'Related')
                    it15_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_mesh_related_button))
                    sub_it15 = wx.Menu()
                    it15_bmap.SetSubMenu(sub_it15)
                    menu.AppendItem(it15_bmap)
                    sub_it15_1 = wx.MenuItem(sub_it15, 3151, 'Convert to nsData')
                    sub_it15_1.SetBitmap(wx.Bitmap(self.art.contextmenu_convert_button))
                    sub_it15.AppendItem(sub_it15_1)
                    self.Bind(wx.EVT_MENU,self.onCTXfullconvert2datamesh,id=3151)
                    
                    #menu.AppendSeparator()
                    
                    #it8_bmap = wx.MenuItem(menu,308,'Variogram')
                    #it8_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_variogram_button))
                    #menu.AppendItem(it8_bmap)
                    #self.Bind(wx.EVT_MENU,self.onCTXvariogram,id = 308)
                    
                    menu.AppendSeparator()
                    
                    it3_bmap = wx.MenuItem(menu,303,'Export')
                    it3_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_export_button))
                    it3 = menu.AppendItem(it3_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_export_object,id = 303)
                    
                    it4_bmap = wx.MenuItem(menu,304,'Delete')
                    it4_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_delete_button))
                    it4 = menu.AppendItem(it4_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_delete_object,id = 304)
                    
                    self.PopupMenu(menu)
                    menu.Destroy()
                    
                elif self.object_manager.object_type[pieces[0]] == 'triangle_mesh':
                    self.CTX_view_object = wx.NewId()
                    self.CTX_export = wx.NewId()
                    self.CTX_delete = wx.NewId()
                    
                    menu = wx.Menu()
                    it1_bmap = wx.MenuItem(menu,301,'View\UnView')
                    it1_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_view_button))
                    it1 = menu.AppendItem(it1_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_view_triangle_mesh_object,id = 301)
                    
                    it2_bmap = wx.MenuItem(menu,302,'Object specifics')
                    it2_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_object_button))
                    it2 = menu.AppendItem(it2_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_object_specifics_triangular_mesh,id = 302)
                    
                    it21_bmap = wx.MenuItem(menu,3021,'Definitions')
                    it21_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_definitions_button))
                    it21 = menu.AppendItem(it21_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_definitions_triangular_mesh,id = 3021)
                    
                    menu.AppendSeparator()
                    
                    it5_bmap = wx.MenuItem(menu,305,'Histogram')
                    it5_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_histogram_button))
                    it5 = menu.AppendItem(it5_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXhistogram,id = 305)
                    
                    it6_bmap = wx.MenuItem(menu,306,'Scatterplot')
                    it6_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_scatterplot_button))
                    menu.AppendItem(it6_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXscatterplot,id = 306)
                    
                    it7_bmap = wx.MenuItem(menu,307,'Box-Plot')
                    it7_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_boxplot_button))
                    menu.AppendItem(it7_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXboxplot,id = 307)
                    
                    it71_bmap = wx.MenuItem(menu,3071,'LinePlot')
                    it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_lineplot_button))
                    menu.AppendItem(it71_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXlineplot,id = 3071)
                    
                    it72_bmap = wx.MenuItem(menu,3072,'Stereonet')
                    it72_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_stereonet_button))
                    menu.AppendItem(it72_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXstereonet,id = 3072)
                    
                    it73_bmap = wx.MenuItem(menu,3073,'Density-plot')
                    it73_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_densityplot_button))
                    menu.AppendItem(it73_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXdensityplot,id = 3073)
                    
                    menu.AppendSeparator()
                    
                    it15_bmap = wx.MenuItem(menu,315,'Related')
                    it15_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_triangle_related_button))
                    sub_it15 = wx.Menu()
                    it15_bmap.SetSubMenu(sub_it15)
                    menu.AppendItem(it15_bmap)
                    sub_it15_1 = wx.MenuItem(sub_it15, 3151, 'Add triangle mesh variable')
                    sub_it15_1.SetBitmap(wx.Bitmap(self.art.contextmenu_add_triangle_variable_button))
                    sub_it15.AppendItem(sub_it15_1)
                    self.Bind(wx.EVT_MENU,self.onCTXaddtrianglevariable,id=3151)
                    
                    menu.AppendSeparator()
                    
                    #it3_bmap = wx.MenuItem(menu,303,'Export')
                    #it3_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_export_button))
                    #it3 = menu.AppendItem(it3_bmap)
                    #self.Bind(wx.EVT_MENU,self.onCTX_export_object,id = 303)
                    
                    it4_bmap = wx.MenuItem(menu,304,'Delete')
                    it4_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_delete_button))
                    it4 = menu.AppendItem(it4_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_delete_object,id = 304)
                    
                    self.PopupMenu(menu)
                    menu.Destroy()
                    
                    
                elif self.object_manager.object_type[pieces[0]] == 'point':
                    
                    self.CTX_view_object = wx.NewId()
                    self.CTX_export = wx.NewId()
                    self.CTX_delete = wx.NewId()
                    
                    menu = wx.Menu()
                    it1_bmap = wx.MenuItem(menu,301,'View\UnView')
                    it1_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_view_button))
                    it1 = menu.AppendItem(it1_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_view_point_object,id = 301)
                    
                    it2_bmap = wx.MenuItem(menu,302,'Object specifics')
                    it2_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_object_button))
                    it2 = menu.AppendItem(it2_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_object_specifics_point,id = 302)
                    
                    it21_bmap = wx.MenuItem(menu,3021,'Definitions')
                    it21_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_definitions_button))
                    it21 = menu.AppendItem(it21_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_definitions_point,id = 3021)
                    
                    it22_bmap = wx.MenuItem(menu,3022,'Z-Stretch')
                    it22_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_zscale_button))
                    it22 = menu.AppendItem(it22_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_zscale,id = 3022)
                    
                    menu.AppendSeparator()
                    
                    it5_bmap = wx.MenuItem(menu,305,'Histogram')
                    it5_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_histogram_button))
                    it5 = menu.AppendItem(it5_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXhistogram,id = 305)
                    
                    it6_bmap = wx.MenuItem(menu,306,'Scatterplot')
                    it6_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_scatterplot_button))
                    menu.AppendItem(it6_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXscatterplot,id = 306)
                    
                    it7_bmap = wx.MenuItem(menu,307,'Box-Plot')
                    it7_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_boxplot_button))
                    menu.AppendItem(it7_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXboxplot,id = 307)
                    
                    it71_bmap = wx.MenuItem(menu,3071,'LinePlot')
                    it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_lineplot_button))
                    menu.AppendItem(it71_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXlineplot,id = 3071)
                    
                    it72_bmap = wx.MenuItem(menu,3072,'Stereonet')
                    it72_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_stereonet_button))
                    menu.AppendItem(it72_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXstereonet,id = 3072)
                    
                    it73_bmap = wx.MenuItem(menu,3073,'Density-plot')
                    it73_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_densityplot_button))
                    menu.AppendItem(it73_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXdensityplot,id = 3073)
                    
                    menu.AppendSeparator()
                    
                    it15_bmap = wx.MenuItem(menu,315,'Related')
                    it15_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_point_related_button))
                    sub_it15 = wx.Menu()
                    it15_bmap.SetSubMenu(sub_it15)
                    menu.AppendItem(it15_bmap)
                    sub_it15_1 = wx.MenuItem(sub_it15, 3151, 'Convert to nsData')
                    sub_it15_1.SetBitmap(wx.Bitmap(self.art.contextmenu_convert_button))
                    sub_it15.AppendItem(sub_it15_1)
                    self.Bind(wx.EVT_MENU,self.onCTXfullconvert2datapoint,id=3151)
                    sub_it15_2 = wx.MenuItem(sub_it15, 3152, 'Add from mesh')
                    sub_it15_2.SetBitmap(wx.Bitmap(self.art.contextmenu_add_from_mesh_button))
                    sub_it15.AppendItem(sub_it15_2)
                    self.Bind(wx.EVT_MENU,self.onCTXaddfrommeshpoint,id=3152)
                    
                    #menu.AppendSeparator()
                    
                    #it8_bmap = wx.MenuItem(menu,308,'Variogram')
                    #it8_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_variogram_button))
                    #menu.AppendItem(it8_bmap)
                    #self.Bind(wx.EVT_MENU,self.onCTXvariogram,id = 308)
                    
                    menu.AppendSeparator()
                    
                    it3_bmap = wx.MenuItem(menu,303,'Export')
                    it3_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_export_button))
                    it3 = menu.AppendItem(it3_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_export_object,id = 303)
                    
                    it4_bmap = wx.MenuItem(menu,304,'Delete')
                    it4_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_delete_button))
                    it4 = menu.AppendItem(it4_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_delete_object,id = 304)
                    
                    self.PopupMenu(menu)
                    menu.Destroy()
                    
                elif self.object_manager.object_type[pieces[0]] == 'surf':
                    
                    self.CTX_view_object = wx.NewId()
                    self.CTX_export = wx.NewId()
                    self.CTX_delete = wx.NewId()
                    
                    menu = wx.Menu()
                    it1_bmap = wx.MenuItem(menu,301,'View\UnView')
                    it1_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_view_button))
                    it1 = menu.AppendItem(it1_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_view_surf_object,id = 301)
                    
                    it2_bmap = wx.MenuItem(menu,302,'Object specifics')
                    it2_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_object_button))
                    it2 = menu.AppendItem(it2_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_object_specifics_surf,id = 302)
                    
                    it21_bmap = wx.MenuItem(menu,3021,'Definitions')
                    it21_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_definitions_button))
                    it21 = menu.AppendItem(it21_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_definitions_surf,id = 3021)
                    
                    #it22_bmap = wx.MenuItem(menu,3022,'Z-Stretch')
                    #it22_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_zscale_button))
                    #it22 = menu.AppendItem(it22_bmap)
                    #self.Bind(wx.EVT_MENU,self.onCTX_zscale,id = 3022)
                    
                    menu.AppendSeparator()
                    
                    it5_bmap = wx.MenuItem(menu,305,'Histogram')
                    it5_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_histogram_button))
                    it5 = menu.AppendItem(it5_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXhistogram,id = 305)
                    
                    it6_bmap = wx.MenuItem(menu,306,'Scatterplot')
                    it6_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_scatterplot_button))
                    menu.AppendItem(it6_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXscatterplot,id = 306)
                    
                    it7_bmap = wx.MenuItem(menu,307,'Box-Plot')
                    it7_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_boxplot_button))
                    menu.AppendItem(it7_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXboxplot,id = 307)
                    
                    it71_bmap = wx.MenuItem(menu,3071,'LinePlot')
                    it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_lineplot_button))
                    menu.AppendItem(it71_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXlineplot,id = 3071)
                    
                    it72_bmap = wx.MenuItem(menu,3072,'Stereonet')
                    it72_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_stereonet_button))
                    menu.AppendItem(it72_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXstereonet,id = 3072)
                    
                    it73_bmap = wx.MenuItem(menu,3073,'Density-plot')
                    it73_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_densityplot_button))
                    menu.AppendItem(it73_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXdensityplot,id = 3073)
                    
                    #menu.AppendSeparator()
                    
                    #it8_bmap = wx.MenuItem(menu,308,'Variogram')
                    #it8_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_variogram_button))
                    #menu.AppendItem(it8_bmap)
                    #self.Bind(wx.EVT_MENU,self.onCTXvariogram,id = 308)
                    
                    menu.AppendSeparator()
                    
                    it3_bmap = wx.MenuItem(menu,303,'Export')
                    it3_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_export_button))
                    it3 = menu.AppendItem(it3_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_export_object,id = 303)
                    
                    it4_bmap = wx.MenuItem(menu,304,'Delete')
                    it4_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_delete_button))
                    it4 = menu.AppendItem(it4_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_delete_object,id = 304)
                    
                    self.PopupMenu(menu)
                    menu.Destroy()
                    
                elif self.object_manager.object_type[pieces[0]] == 'data':
                    
                    self.CTX_view_object = wx.NewId()
                    self.CTX_export = wx.NewId()
                    self.CTX_delete = wx.NewId()
                    
                    menu = wx.Menu()

                    it21_bmap = wx.MenuItem(menu,3021,'Definitions')
                    it21_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_definitions_button))
                    it21 = menu.AppendItem(it21_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_definitions_data,id = 3021)

                    menu.AppendSeparator()                    
                    
                    it5_bmap = wx.MenuItem(menu,305,'Histogram')
                    it5_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_histogram_button))
                    it5 = menu.AppendItem(it5_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXhistogram,id = 305)
                    
                    it6_bmap = wx.MenuItem(menu,306,'Scatterplot')
                    it6_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_scatterplot_button))
                    menu.AppendItem(it6_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXscatterplot,id = 306)
                    
                    it7_bmap = wx.MenuItem(menu,307,'Box-Plot')
                    it7_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_boxplot_button))
                    menu.AppendItem(it7_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXboxplot,id = 307)
                    
                    it71_bmap = wx.MenuItem(menu,3071,'LinePlot')
                    it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_lineplot_button))
                    menu.AppendItem(it71_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXlineplot,id = 3071)
                    
                    it72_bmap = wx.MenuItem(menu,3072,'Stereonet')
                    it72_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_stereonet_button))
                    menu.AppendItem(it72_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXstereonet,id = 3072)
                    
                    it73_bmap = wx.MenuItem(menu,3073,'Density-plot')
                    it73_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_densityplot_button))
                    menu.AppendItem(it73_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXdensityplot,id = 3073)
                    
                    menu.AppendSeparator()
                    
                    it15_bmap = wx.MenuItem(menu,315,'Related')
                    it15_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_data_related_button))
                    sub_it15 = wx.Menu()
                    it15_bmap.SetSubMenu(sub_it15)
                    menu.AppendItem(it15_bmap)
                    sub_it15_1 = wx.MenuItem(sub_it15, 3151, 'Convert to Point')
                    sub_it15_1.SetBitmap(wx.Bitmap(self.art.contextmenu_convert_button))
                    sub_it15.AppendItem(sub_it15_1)
                    self.Bind(wx.EVT_MENU,self.onCTXfullconvert2pointdata,id=3151)
                    sub_it15_2 = wx.MenuItem(sub_it15, 3152, 'PCA')
                    sub_it15_2.SetBitmap(wx.Bitmap(self.art.contextmenu_pca_button))
                    sub_it15.AppendItem(sub_it15_2)
                    self.Bind(wx.EVT_MENU,self.onCTXpcadata,id=3152)
                    sub_it15_3 = wx.MenuItem(sub_it15, 3153, 'Classify')
                    sub_it15_3.SetBitmap(wx.Bitmap(self.art.contextmenu_classify_button))
                    sub_it15.AppendItem(sub_it15_3)
                    self.Bind(wx.EVT_MENU,self.onCTXclassifydata,id=3153)
                    #sub_it15_5 = wx.MenuItem(sub_it15, 3155, 'Discriminant analysis')
                    #sub_it15_5.SetBitmap(wx.Bitmap(self.art.contextmenu_discriminant_analysis_button))
                    #sub_it15.AppendItem(sub_it15_5)
                    #self.Bind(wx.EVT_MENU,self.onCTXdiscriminantanalysisdata,id=3155)
                    sub_it15_4 = wx.MenuItem(sub_it15, 3154, 'Cluster analysis')
                    sub_it15_4.SetBitmap(wx.Bitmap(self.art.contextmenu_cluster_analysis_button))
                    sub_it15.AppendItem(sub_it15_4)
                    self.Bind(wx.EVT_MENU,self.onCTXclusteranalysisdata,id=3154)
                    
                    menu.AppendSeparator()
                    
                    it3_bmap = wx.MenuItem(menu,303,'Export')
                    it3_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_export_button))
                    it3 = menu.AppendItem(it3_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_export_object,id = 303)
                    
                    it4_bmap = wx.MenuItem(menu,304,'Delete')
                    it4_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_delete_button))
                    it4 = menu.AppendItem(it4_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_delete_object,id = 304)
                    
                    self.PopupMenu(menu)
                    menu.Destroy()
                    
            else:
                if self.object_manager.object_type[pieces[0]] == 'mesh':
                    
                    self.CTX_view_object = wx.NewId()
                    self.CTX_export = wx.NewId()
                    self.CTX_delete = wx.NewId()
                    
                    menu = wx.Menu()
                    it1_bmap = wx.MenuItem(menu,301,'View\UnView')
                    it1_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_view_button))
                    it1 = menu.AppendItem(it1_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_view_mesh_object,id = 301)
                    
                    it2_bmap = wx.MenuItem(menu,302,'Object specifics')
                    it2_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_object_button))
                    it2 = menu.AppendItem(it2_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_object_specifics_mesh,id = 302)
                    
                    it21_bmap = wx.MenuItem(menu,3021,'Definitions')
                    it21_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_definitions_button))
                    it21 = menu.AppendItem(it21_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_definitions_mesh,id = 3021)
                    
                    it22_bmap = wx.MenuItem(menu,3022,'Label me')
                    it22_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_labelme_button))
                    it22 = menu.AppendItem(it22_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_labelme_mesh,id = 3022)
                    
                    menu.AppendSeparator()
                    
                    it5_bmap = wx.MenuItem(menu,305,'Histogram')
                    it5_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_histogram_button))
                    it5 = menu.AppendItem(it5_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXhistogram,id = 305)
                    
                    it6_bmap = wx.MenuItem(menu,306,'Scatterplot')
                    it6_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_scatterplot_button))
                    menu.AppendItem(it6_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXscatterplot,id = 306)
                    
                    it7_bmap = wx.MenuItem(menu,307,'Box-Plot')
                    it7_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_boxplot_button))
                    menu.AppendItem(it7_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXboxplot,id = 307)
                    
                    it74_bmap = wx.MenuItem(menu,3074,'LinePlot')
                    it74_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_lineplot_button))
                    menu.AppendItem(it74_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXlineplot,id = 3074)
                    
                    it72_bmap = wx.MenuItem(menu,3072,'Stereonet')
                    it72_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_stereonet_button))
                    menu.AppendItem(it72_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXstereonet,id = 3072)
                    
                    it73_bmap = wx.MenuItem(menu,3073,'Density-plot')
                    it73_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_densityplot_button))
                    menu.AppendItem(it73_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXdensityplot,id = 3073)
                    
                    it75_bmap = wx.MenuItem(menu,371,'2D plot')
                    it75_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_2dplots_button))
                    sub_it75 = wx.Menu()
                    it75_bmap.SetSubMenu(sub_it75)
                    menu.AppendItem(it75_bmap)
                    sub_it75_1 = wx.MenuItem(sub_it75, 3751, 'Bubble-plot')
                    sub_it75_1.SetBitmap(wx.Bitmap(self.art.contextmenu_bubbleplot_button))
                    sub_it75.AppendItem(sub_it75_1)
                    self.Bind(wx.EVT_MENU,self.onCTXbubbleplot,id=3751)
                    sub_it75_2 = wx.MenuItem(sub_it75, 3752, 'Bubble-net')
                    sub_it75_2.SetBitmap(wx.Bitmap(self.art.contextmenu_bubblenet_button))
                    sub_it75.AppendItem(sub_it75_2)
                    self.Bind(wx.EVT_MENU,self.onCTXbubblenet,id=3752)
                    sub_it75_3 = wx.MenuItem(sub_it75, 3753, 'Fillplot')
                    sub_it75_3.SetBitmap(wx.Bitmap(self.art.contextmenu_fillplot_button))
                    sub_it75.AppendItem(sub_it75_3)
                    self.Bind(wx.EVT_MENU,self.onCTXfillplot,id=3753)
                    sub_it75_4 = wx.MenuItem(sub_it75, 3754, 'Density-net')
                    sub_it75_4.SetBitmap(wx.Bitmap(self.art.contextmenu_densitynet_button))
                    sub_it75.AppendItem(sub_it75_4)
                    self.Bind(wx.EVT_MENU,self.onCTXdensitynet,id=3754)
                    sub_it75_5 = wx.MenuItem(sub_it75, 3755, 'Scatter4')
                    sub_it75_5.SetBitmap(wx.Bitmap(self.art.contextmenu_4wayscatter_button))
                    sub_it75.AppendItem(sub_it75_5)
                    self.Bind(wx.EVT_MENU,self.onCTX4wayscatter,id=3755)
                    
                    it71_bmap = wx.MenuItem(menu,371,'3D plot')
                    it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_3dplots_button))
                    sub_it71 = wx.Menu()
                    it71_bmap.SetSubMenu(sub_it71)
                    menu.AppendItem(it71_bmap)
                    sub_it71_1 = wx.MenuItem(sub_it71, 3711, 'Volume view')
                    sub_it71_1.SetBitmap(wx.Bitmap(self.art.contextmenu_volumeview_button))
                    sub_it71.AppendItem(sub_it71_1)
                    self.Bind(wx.EVT_MENU,self.onCTXvolumeviewmesh,id=3711)
                    sub_it71_2 = wx.MenuItem(sub_it71, 3712, 'Volume and slices view')
                    sub_it71_2.SetBitmap(wx.Bitmap(self.art.contextmenu_volumeandslicesview_button))
                    sub_it71.AppendItem(sub_it71_2)
                    self.Bind(wx.EVT_MENU,self.onCTXvolumeandslicesviewmesh,id=3712)
                    sub_it71_3 = wx.MenuItem(sub_it71, 3713, '3D Scatterplot')
                    sub_it71_3.SetBitmap(wx.Bitmap(self.art.contextmenu_3dscatter_button))
                    sub_it71.AppendItem(sub_it71_3)
                    self.Bind(wx.EVT_MENU,self.onCTX3dscatter,id=3713)
                    
                    menu.AppendSeparator()
                    
                    it15_bmap = wx.MenuItem(menu,315,'Related')
                    it15_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_mesh_related_button))
                    sub_it15 = wx.Menu()
                    it15_bmap.SetSubMenu(sub_it15)
                    menu.AppendItem(it15_bmap)
                    sub_it15_1 = wx.MenuItem(sub_it15, 3151, 'Convert to nsData')
                    sub_it15_1.SetBitmap(wx.Bitmap(self.art.contextmenu_convert_button))
                    sub_it15.AppendItem(sub_it15_1)
                    self.Bind(wx.EVT_MENU,self.onCTXconvert2datamesh,id=3151)
                    sub_it15_2 = wx.MenuItem(sub_it15, 3152, 'Attributes')
                    sub_it15_2.SetBitmap(wx.Bitmap(self.art.contextmenu_attributes_button))
                    sub_it15.AppendItem(sub_it15_2)
                    self.Bind(wx.EVT_MENU,self.onCTXattributemesh,id=3152)
                    sub_it15_3 = wx.MenuItem(sub_it15, 3153, 'Interpretation')
                    sub_it15_3.SetBitmap(wx.Bitmap(self.art.contextmenu_interpretation_button))
                    sub_it15.AppendItem(sub_it15_3)
                    self.Bind(wx.EVT_MENU,self.onCTXinterpretationmesh,id=3153)
                    sub_it15_4 = wx.MenuItem(sub_it15, 3154, 'Create point set')
                    sub_it15_4.SetBitmap(wx.Bitmap(self.art.contextmenu_create_point_set_button))
                    sub_it15.AppendItem(sub_it15_4)
                    self.Bind(wx.EVT_MENU,self.onCTXcreatepointsetmesh,id=3154)
                    sub_it15_5 = wx.MenuItem(sub_it15, 3155, 'Point section view')
                    sub_it15_5.SetBitmap(wx.Bitmap(self.art.contextmenu_point_section_view_button))
                    sub_it15.AppendItem(sub_it15_5)
                    self.Bind(wx.EVT_MENU,self.onCTXpointsectionviewmesh,id=3155)
                    sub_it15_6 = wx.MenuItem(sub_it15, 3156, 'Generate image set')
                    sub_it15_6.SetBitmap(wx.Bitmap(self.art.contextmenu_generate_image_set_button))
                    sub_it15.AppendItem(sub_it15_6)
                    self.Bind(wx.EVT_MENU,self.onCTXgenerateimagesetmesh,id=3156)
                    sub_it15_7 = wx.MenuItem(sub_it15, 3157, 'Upscale')
                    sub_it15_7.SetBitmap(wx.Bitmap(self.art.contextmenu_upscale_button))
                    sub_it15.AppendItem(sub_it15_7)
                    self.Bind(wx.EVT_MENU,self.onCTXupscalemesh,id=3157)
                    
                    menu.AppendSeparator()
                    
                    if self.object_manager.call(pieces).vtype=='continuous':
                        it8_bmap = wx.MenuItem(menu,308,'Variogram')
                        it8_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_variogram_button))
                        menu.AppendItem(it8_bmap)
                        self.Bind(wx.EVT_MENU,self.onCTXmesh_variogram,id = 308)
                    else:
                        it8b_bmap = wx.MenuItem(menu,3082,'Indicator Variogram')
                        it8b_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_variogram_button))
                        menu.AppendItem(it8b_bmap)
                        self.Bind(wx.EVT_MENU,self.onCTXmesh_Ivariogram,id = 3082)
                    
                    menu.AppendSeparator()
                    
                    it10_bmap = wx.MenuItem(menu,310,'Operations')
                    it10_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_operations_button))
                    sub_it10 = wx.Menu()
                    it10_bmap.SetSubMenu(sub_it10)
                    menu.AppendItem(it10_bmap)
                    sub_it10_1 = wx.MenuItem(sub_it10,3101, 'Mirror')
                    sub_it10_1.SetBitmap(wx.Bitmap(self.art.contextmenu_mirror_button))
                    sub_it10.AppendItem(sub_it10_1)
                    self.Bind(wx.EVT_MENU,self.onCTXmirrormesh,id=3101)
                    sub_it10_2 = wx.MenuItem(sub_it10,3102, 'Categorize')
                    sub_it10_2.SetBitmap(wx.Bitmap(self.art.contextmenu_categorize_button))
                    sub_it10.AppendItem(sub_it10_2)
                    self.Bind(wx.EVT_MENU,self.onCTXcategorizemesh,id=3102)
                    sub_it10_3 = wx.MenuItem(sub_it10,3103, 'Crop')
                    sub_it10_3.SetBitmap(wx.Bitmap(self.art.contextmenu_crop_button))
                    sub_it10.AppendItem(sub_it10_3)
                    self.Bind(wx.EVT_MENU,self.onCTXcropmesh,id=3103)
                    sub_it10_4 = wx.MenuItem(sub_it10,3104, 'Duplicate')
                    sub_it10_4.SetBitmap(wx.Bitmap(self.art.contextmenu_duplicate_button))
                    sub_it10.AppendItem(sub_it10_4)
                    self.Bind(wx.EVT_MENU,self.onCTXduplicatemesh,id=3104)
                    sub_it10_5 = wx.MenuItem(sub_it10,3105, 'Linear transform')
                    sub_it10_5.SetBitmap(wx.Bitmap(self.art.contextmenu_linear_button))
                    sub_it10.AppendItem(sub_it10_5)
                    self.Bind(wx.EVT_MENU,self.onCTXlineartransformmesh,id=3105)
                    
                    menu.AppendSeparator()
                    
                    # MANY OF THESE GEOMETRIC OPERATORS COME FROM:
                    # http://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html
                    it11_bmap = wx.MenuItem(menu,311,'Geometrics')
                    it11_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_geometric_button))
                    sub_it11 = wx.Menu()
                    it11_bmap.SetSubMenu(sub_it11)
                    menu.AppendItem(it11_bmap)                         
                    sub_it11_1 = wx.MenuItem(sub_it11,3111, 'Pickle')
                    sub_it11_1.SetBitmap(wx.Bitmap(self.art.contextmenu_pickle_button))
                    sub_it11.AppendItem(sub_it11_1)
                    self.Bind(wx.EVT_MENU,self.onCTXpicklemesh,id=3111)
                    sub_it11_2 = wx.MenuItem(sub_it11,3112, 'Repeat')
                    sub_it11_2.SetBitmap(wx.Bitmap(self.art.contextmenu_repeat_button))
                    sub_it11.AppendItem(sub_it11_2)
                    self.Bind(wx.EVT_MENU,self.onCTXrepeatmesh,id=3112)
                    sub_it11_3 = wx.MenuItem(sub_it11,3113, 'Expand')
                    sub_it11_3.SetBitmap(wx.Bitmap(self.art.contextmenu_expand_button))
                    sub_it11.AppendItem(sub_it11_3)
                    self.Bind(wx.EVT_MENU,self.onCTXexpandmesh,id=3113)
                    sub_it11_4 = wx.MenuItem(sub_it11,3114, 'Tile')
                    sub_it11_4.SetBitmap(wx.Bitmap(self.art.contextmenu_tile_button))
                    sub_it11.AppendItem(sub_it11_4)
                    self.Bind(wx.EVT_MENU,self.onCTXtilemesh,id=3114)
                    sub_it11_5 = wx.MenuItem(sub_it11,3115, 'Transpose')
                    sub_it11_5.SetBitmap(wx.Bitmap(self.art.contextmenu_transpose_button))
                    sub_it11.AppendItem(sub_it11_5)
                    self.Bind(wx.EVT_MENU,self.onCTXtransposemesh,id=3115)
                    
                    sub_it11_6 = wx.MenuItem(sub_it11,3116, 'Shift')
                    sub_it11_6.SetBitmap(wx.Bitmap(self.art.contextmenu_shift_button))
                    sub_it11.AppendItem(sub_it11_6)
                    self.Bind(wx.EVT_MENU,self.onCTXshiftmesh,id=3116)
                    
                    sub_it11_7 = wx.MenuItem(sub_it11,3117, 'Flip X')
                    sub_it11_7.SetBitmap(wx.Bitmap(self.art.contextmenu_flipx_button))
                    sub_it11.AppendItem(sub_it11_7)
                    self.Bind(wx.EVT_MENU,self.onCTXflipxmesh,id=3117)
                    
                    sub_it11_8 = wx.MenuItem(sub_it11,3118, 'Flip Y')
                    sub_it11_8.SetBitmap(wx.Bitmap(self.art.contextmenu_flipy_button))
                    sub_it11.AppendItem(sub_it11_8)
                    self.Bind(wx.EVT_MENU,self.onCTXflipymesh,id=3118)
                    
                    sub_it11_9 = wx.MenuItem(sub_it11,3119, 'Rotate 90')
                    sub_it11_9.SetBitmap(wx.Bitmap(self.art.contextmenu_rotate_button))
                    sub_it11.AppendItem(sub_it11_9)
                    self.Bind(wx.EVT_MENU,self.onCTXrotatemesh,id=3119)
                    
                    sub_it11_10 = wx.MenuItem(sub_it11,31110, 'Swap')
                    sub_it11_10.SetBitmap(wx.Bitmap(self.art.contextmenu_swap_button))
                    sub_it11.AppendItem(sub_it11_10)
                    self.Bind(wx.EVT_MENU,self.onCTXswapmesh,id=31110)
                    
                    sub_it11_11 = wx.MenuItem(sub_it11,31111, 'Split')
                    sub_it11_11.SetBitmap(wx.Bitmap(self.art.contextmenu_split_button))
                    sub_it11.AppendItem(sub_it11_11)
                    self.Bind(wx.EVT_MENU,self.onCTXsplitmesh,id=31111)
                    
                    #sub_it11_12 = wx.MenuItem(sub_it11,31112, 'Pad')
                    #sub_it11_12.SetBitmap(wx.Bitmap(self.art.contextmenu_pad_button))
                    #sub_it11.AppendItem(sub_it11_12)
                    #self.Bind(wx.EVT_MENU,self.onCTXpadmesh,id=31112)
                    
                    sub_it11_13 = wx.MenuItem(sub_it11,31113, 'Translation')
                    sub_it11_13.SetBitmap(wx.Bitmap(self.art.contextmenu_translation_button))
                    sub_it11.AppendItem(sub_it11_13)
                    self.Bind(wx.EVT_MENU,self.onCTXtranslationmesh,id=31113)
                    
                    menu.AppendSeparator()
                    
                    it13_bmap = wx.MenuItem(menu,313,'Calculator')
                    it13_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_calculator_button))
                    sub_it13 = wx.Menu()
                    it13_bmap.SetSubMenu(sub_it13)
                    menu.AppendItem(it13_bmap)                         
                    sub_it13_1 = wx.MenuItem(sub_it13,3131, 'Constant')
                    sub_it13_1.SetBitmap(wx.Bitmap(self.art.contextmenu_constant_calculator_button))
                    sub_it13.AppendItem(sub_it13_1)
                    self.Bind(wx.EVT_MENU,self.onCTXconstantcalculatormesh,id=3131)
                    sub_it13_2 = wx.MenuItem(sub_it13,3132, 'Object')
                    sub_it13_2.SetBitmap(wx.Bitmap(self.art.contextmenu_object_calculator_button))
                    sub_it13.AppendItem(sub_it13_2)
                    self.Bind(wx.EVT_MENU,self.onCTXobjectcalculatormesh,id=3132)
                    sub_it13_3 = wx.MenuItem(sub_it13,3133, 'Global')
                    sub_it13_3.SetBitmap(wx.Bitmap(self.art.contextmenu_global_calculator_button))
                    sub_it13.AppendItem(sub_it13_3)
                    self.Bind(wx.EVT_MENU,self.onCTXglobalcalculatormesh,id=3133)
                    
                    menu.AppendSeparator()
                    
                    it14_bmap = wx.MenuItem(menu,313,'Manipulate')
                    it14_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_manipulate_button))
                    sub_it14 = wx.Menu()
                    it14_bmap.SetSubMenu(sub_it14)
                    menu.AppendItem(it14_bmap)                         
                    sub_it14_1 = wx.MenuItem(sub_it14,3141, 'Join')
                    sub_it14_1.SetBitmap(wx.Bitmap(self.art.contextmenu_join_button))
                    sub_it14.AppendItem(sub_it14_1)
                    self.Bind(wx.EVT_MENU,self.onCTXjoinmesh,id=3141)
                    
                    menu.AppendSeparator()
                    
                    it12_bmap = wx.MenuItem(menu,312,'Move')
                    it12_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_move_button))
                    sub_it12 = wx.Menu()
                    it12_bmap.SetSubMenu(sub_it12)
                    menu.AppendItem(it12_bmap)                         
                    sub_it12_1 = wx.MenuItem(sub_it12,3121, 'Copy')
                    sub_it12_1.SetBitmap(wx.Bitmap(self.art.contextmenu_copy_button))
                    sub_it12.AppendItem(sub_it12_1)
                    self.Bind(wx.EVT_MENU,self.onCTXcopymesh,id=3121)
                    sub_it12_2 = wx.MenuItem(sub_it12,3122, 'Cut')
                    sub_it12_2.SetBitmap(wx.Bitmap(self.art.contextmenu_cut_button))
                    sub_it12.AppendItem(sub_it12_2)
                    self.Bind(wx.EVT_MENU,self.onCTXcutmesh,id=3122)
                    
                    it3_bmap = wx.MenuItem(menu,303,'Export')
                    it3_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_export_button))
                    it3 = menu.AppendItem(it3_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_export_object,id = 303)
                    
                    it4_bmap = wx.MenuItem(menu,304,'Delete')
                    it4_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_delete_button))
                    it4 = menu.AppendItem(it4_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_delete_object,id = 304)
                    
                    self.PopupMenu(menu)
                    menu.Destroy()   
                
                elif self.object_manager.object_type[pieces[0]] == 'triangle_mesh':
                    self.CTX_view_object = wx.NewId()
                    self.CTX_export = wx.NewId()
                    self.CTX_delete = wx.NewId()
                    
                    menu = wx.Menu()
                    it1_bmap = wx.MenuItem(menu,301,'View\UnView')
                    it1_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_view_button))
                    it1 = menu.AppendItem(it1_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_view_triangle_mesh_object,id = 301)
                    
                    it2_bmap = wx.MenuItem(menu,302,'Object specifics')
                    it2_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_object_button))
                    it2 = menu.AppendItem(it2_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_object_specifics_triangular_mesh,id = 302)
                    
                    it21_bmap = wx.MenuItem(menu,3021,'Definitions')
                    it21_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_definitions_button))
                    it21 = menu.AppendItem(it21_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_definitions_triangular_mesh,id = 3021)
                    
                    menu.AppendSeparator()
                    
                    it5_bmap = wx.MenuItem(menu,305,'Histogram')
                    it5_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_histogram_button))
                    it5 = menu.AppendItem(it5_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXhistogram,id = 305)
                    
                    it6_bmap = wx.MenuItem(menu,306,'Scatterplot')
                    it6_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_scatterplot_button))
                    menu.AppendItem(it6_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXscatterplot,id = 306)
                    
                    it7_bmap = wx.MenuItem(menu,307,'Box-Plot')
                    it7_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_boxplot_button))
                    menu.AppendItem(it7_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXboxplot,id = 307)
                    
                    it74_bmap = wx.MenuItem(menu,3074,'LinePlot')
                    it74_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_lineplot_button))
                    menu.AppendItem(it74_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXlineplot,id = 3074)
                    
                    it72_bmap = wx.MenuItem(menu,3072,'Stereonet')
                    it72_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_stereonet_button))
                    menu.AppendItem(it72_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXstereonet,id = 3072)
                    
                    it73_bmap = wx.MenuItem(menu,3073,'Density-plot')
                    it73_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_densityplot_button))
                    menu.AppendItem(it73_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXdensityplot,id = 3073)
                    
                    it75_bmap = wx.MenuItem(menu,371,'2D plot')
                    it75_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_2dplots_button))
                    sub_it75 = wx.Menu()
                    it75_bmap.SetSubMenu(sub_it75)
                    menu.AppendItem(it75_bmap)
                    sub_it75_1 = wx.MenuItem(sub_it75, 3751, 'Bubble-plot')
                    sub_it75_1.SetBitmap(wx.Bitmap(self.art.contextmenu_bubbleplot_button))
                    sub_it75.AppendItem(sub_it75_1)
                    self.Bind(wx.EVT_MENU,self.onCTXbubbleplot,id=3751)
                    sub_it75_2 = wx.MenuItem(sub_it75, 3752, 'Bubble-net')
                    sub_it75_2.SetBitmap(wx.Bitmap(self.art.contextmenu_bubblenet_button))
                    sub_it75.AppendItem(sub_it75_2)
                    self.Bind(wx.EVT_MENU,self.onCTXbubblenet,id=3752)
                    sub_it75_3 = wx.MenuItem(sub_it75, 3753, 'Fillplot')
                    sub_it75_3.SetBitmap(wx.Bitmap(self.art.contextmenu_fillplot_button))
                    sub_it75.AppendItem(sub_it75_3)
                    self.Bind(wx.EVT_MENU,self.onCTXfillplot,id=3753)
                    sub_it75_4 = wx.MenuItem(sub_it75, 3754, 'Density-net')
                    sub_it75_4.SetBitmap(wx.Bitmap(self.art.contextmenu_densitynet_button))
                    sub_it75.AppendItem(sub_it75_4)
                    self.Bind(wx.EVT_MENU,self.onCTXdensitynet,id=3754)
                    sub_it75_5 = wx.MenuItem(sub_it75, 3755, 'Scatter4')
                    sub_it75_5.SetBitmap(wx.Bitmap(self.art.contextmenu_4wayscatter_button))
                    sub_it75.AppendItem(sub_it75_5)
                    self.Bind(wx.EVT_MENU,self.onCTX4wayscatter,id=3755)
                    
                    menu.AppendSeparator()
                    
                    it15_bmap = wx.MenuItem(menu,315,'Related')
                    it15_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_triangle_related_button))
                    sub_it15 = wx.Menu()
                    it15_bmap.SetSubMenu(sub_it15)
                    menu.AppendItem(it15_bmap)
                    sub_it15_1 = wx.MenuItem(sub_it15, 3151, 'Replace triangle mesh variable')
                    sub_it15_1.SetBitmap(wx.Bitmap(self.art.contextmenu_add_triangle_variable_button))
                    sub_it15.AppendItem(sub_it15_1)
                    self.Bind(wx.EVT_MENU,self.onCTXreplacetrianglevariable,id=3151)
                    
                    menu.AppendSeparator()
                    
                    #it3_bmap = wx.MenuItem(menu,303,'Export')
                    #it3_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_export_button))
                    #it3 = menu.AppendItem(it3_bmap)
                    #self.Bind(wx.EVT_MENU,self.onCTX_export_object,id = 303)
                    
                    it4_bmap = wx.MenuItem(menu,304,'Delete')
                    it4_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_delete_button))
                    it4 = menu.AppendItem(it4_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_delete_object,id = 304)
                    
                    self.PopupMenu(menu)
                    menu.Destroy()
                    
                elif self.object_manager.object_type[pieces[0]] == 'point':
                    
                    self.CTX_view_object = wx.NewId()
                    self.CTX_export = wx.NewId()
                    self.CTX_delete = wx.NewId()
                    
                    menu = wx.Menu()
                    it1_bmap = wx.MenuItem(menu,301,'View\UnView')
                    it1_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_view_button))
                    it1 = menu.AppendItem(it1_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_view_point_object,id = 301)
                    
                    it2_bmap = wx.MenuItem(menu,302,'Object specifics')
                    it2_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_object_button))
                    it2 = menu.AppendItem(it2_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_object_specifics_point,id = 302)
                    
                    it21_bmap = wx.MenuItem(menu,3021,'Definitions')
                    it21_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_definitions_button))
                    it21 = menu.AppendItem(it21_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_definitions_mesh,id = 3021)
                    
                    it22_bmap = wx.MenuItem(menu,3022,'Label me')
                    it22_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_labelme_button))
                    it22 = menu.AppendItem(it22_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_labelme_point,id = 3022)
                    
                    menu.AppendSeparator()
                    
                    it5_bmap = wx.MenuItem(menu,305,'Histogram')
                    it5_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_histogram_button))
                    it5 = menu.AppendItem(it5_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXhistogram,id = 305)
                    
                    it6_bmap = wx.MenuItem(menu,306,'Scatterplot')
                    it6_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_scatterplot_button))
                    menu.AppendItem(it6_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXscatterplot,id = 306)
                    
                    it7_bmap = wx.MenuItem(menu,307,'Box-Plot')
                    it7_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_boxplot_button))
                    menu.AppendItem(it7_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXboxplot,id = 307)
                    
                    it71_bmap = wx.MenuItem(menu,3071,'LinePlot')
                    it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_lineplot_button))
                    menu.AppendItem(it71_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXlineplot,id = 3071)
                    
                    it72_bmap = wx.MenuItem(menu,3072,'Stereonet')
                    it72_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_stereonet_button))
                    menu.AppendItem(it72_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXstereonet,id = 3072)
                    
                    it73_bmap = wx.MenuItem(menu,3073,'Density-plot')
                    it73_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_densityplot_button))
                    menu.AppendItem(it73_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXdensityplot,id = 3073)
                    
                    it75_bmap = wx.MenuItem(menu,371,'2D plot')
                    it75_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_2dplots_button))
                    sub_it75 = wx.Menu()
                    it75_bmap.SetSubMenu(sub_it75)
                    menu.AppendItem(it75_bmap)
                    sub_it75_1 = wx.MenuItem(sub_it75, 3751, 'Bubble-plot')
                    sub_it75_1.SetBitmap(wx.Bitmap(self.art.contextmenu_bubbleplot_button))
                    sub_it75.AppendItem(sub_it75_1)
                    self.Bind(wx.EVT_MENU,self.onCTXbubbleplot,id=3751)
                    sub_it75_2 = wx.MenuItem(sub_it75, 3752, 'Bubble-net')
                    sub_it75_2.SetBitmap(wx.Bitmap(self.art.contextmenu_bubblenet_button))
                    sub_it75.AppendItem(sub_it75_2)
                    self.Bind(wx.EVT_MENU,self.onCTXbubblenet,id=3752)
                    sub_it75_3 = wx.MenuItem(sub_it75, 3753, 'Fillplot')
                    sub_it75_3.SetBitmap(wx.Bitmap(self.art.contextmenu_fillplot_button))
                    sub_it75.AppendItem(sub_it75_3)
                    self.Bind(wx.EVT_MENU,self.onCTXfillplot,id=3753)
                    sub_it75_4 = wx.MenuItem(sub_it75, 3754, 'Density-net')
                    sub_it75_4.SetBitmap(wx.Bitmap(self.art.contextmenu_densitynet_button))
                    sub_it75.AppendItem(sub_it75_4)
                    self.Bind(wx.EVT_MENU,self.onCTXdensitynet,id=3754)
                    sub_it75_5 = wx.MenuItem(sub_it75, 3755, 'Scatter4')
                    sub_it75_5.SetBitmap(wx.Bitmap(self.art.contextmenu_4wayscatter_button))
                    sub_it75.AppendItem(sub_it75_5)
                    self.Bind(wx.EVT_MENU,self.onCTX4wayscatter,id=3755)
                    
                    it71_bmap = wx.MenuItem(menu,371,'3D plot')
                    it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_3dplots_button))
                    sub_it71 = wx.Menu()
                    it71_bmap.SetSubMenu(sub_it71)
                    menu.AppendItem(it71_bmap)
                    sub_it71_3 = wx.MenuItem(sub_it71, 3713, '3D Scatterplot')
                    sub_it71_3.SetBitmap(wx.Bitmap(self.art.contextmenu_3dscatter_button))
                    sub_it71.AppendItem(sub_it71_3)
                    self.Bind(wx.EVT_MENU,self.onCTX3dscatter,id=3713)
                    
                    menu.AppendSeparator()
                    
                    if self.object_manager.call(pieces).vtype=='continuous':
                        it8_bmap = wx.MenuItem(menu,308,'Variogram')
                        it8_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_variogram_button))
                        menu.AppendItem(it8_bmap)
                        self.Bind(wx.EVT_MENU,self.onCTXvariogram,id = 308)
                    else:
                        it8b_bmap = wx.MenuItem(menu,3082,'Indicator Variogram')
                        it8b_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_variogram_button))
                        menu.AppendItem(it8b_bmap)
                        self.Bind(wx.EVT_MENU,self.onCTXivariogram,id = 3082)
                    
                    it15_bmap = wx.MenuItem(menu,315,'Related')
                    it15_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_point_related_button))
                    sub_it15 = wx.Menu()
                    it15_bmap.SetSubMenu(sub_it15)
                    menu.AppendItem(it15_bmap)
                    sub_it15_1 = wx.MenuItem(sub_it15, 3151, 'Convert to nsData')
                    sub_it15_1.SetBitmap(wx.Bitmap(self.art.contextmenu_convert_button))
                    sub_it15.AppendItem(sub_it15_1)
                    self.Bind(wx.EVT_MENU,self.onCTXconvert2datapoint,id=3151)
                    sub_it15_2 = wx.MenuItem(sub_it15, 3152, 'Add from mesh')
                    sub_it15_2.SetBitmap(wx.Bitmap(self.art.contextmenu_add_from_mesh_button))
                    sub_it15.AppendItem(sub_it15_2)
                    self.Bind(wx.EVT_MENU,self.onCTXaddfrommeshpoint,id=3152)
                    sub_it15_3 = wx.MenuItem(sub_it15, 3153, 'Map as quiver')
                    sub_it15_3.SetBitmap(wx.Bitmap(self.art.contextmenu_map2quiver_button))
                    sub_it15.AppendItem(sub_it15_3)
                    self.Bind(wx.EVT_MENU,self.onCTXmap2quiver,id=3153)
                    sub_it15_4 = wx.MenuItem(sub_it15, 3154, 'Map as streamline')
                    sub_it15_4.SetBitmap(wx.Bitmap(self.art.contextmenu_map2streamline_button))
                    sub_it15.AppendItem(sub_it15_4)
                    self.Bind(wx.EVT_MENU,self.onCTXmap2streamline,id=3154)
                    sub_it15_5 = wx.MenuItem(sub_it15, 3155, 'Map as fracture')
                    sub_it15_5.SetBitmap(wx.Bitmap(self.art.contextmenu_map2fracture_button))
                    sub_it15.AppendItem(sub_it15_5)
                    self.Bind(wx.EVT_MENU,self.onCTXmap2fracture,id=3155)
                    sub_it15_7 = wx.MenuItem(sub_it15, 3157, 'Map as graph')
                    sub_it15_7.SetBitmap(wx.Bitmap(self.art.contextmenu_map2graph_button))
                    sub_it15.AppendItem(sub_it15_7)
                    self.Bind(wx.EVT_MENU,self.onCTXmap2graph,id=3157)
                    sub_it15_6 = wx.MenuItem(sub_it15, 3156, 'Convert to world view')
                    sub_it15_6.SetBitmap(wx.Bitmap(self.art.contextmenu_convert2world_button))
                    sub_it15.AppendItem(sub_it15_6)
                    self.Bind(wx.EVT_MENU,self.onCTXconvert2world,id=3156)
                    
                    menu.AppendSeparator()
                    
                    it91_bmap = wx.MenuItem(menu,30901,'Estimation')
                    it91_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_estimation_button))
                    sub_it91 = wx.Menu()
                    it91_bmap.SetSubMenu(sub_it91)
                    menu.AppendItem(it91_bmap)
                    sub_it91_1 = wx.MenuItem(sub_it91, 30911, 'Kriging')
                    sub_it91_1.SetBitmap(wx.Bitmap(self.art.contextmenu_krig_button))
                    sub_it91.AppendItem(sub_it91_1)
                    self.Bind(wx.EVT_MENU,self.onCTXkrig,id=30911)
                    #sub_it91_2 = wx.MenuItem(sub_it91, 30921, 'Inverse weighted distance')
                    #sub_it91_2.SetBitmap(wx.Bitmap(self.art.contextmenu_iwd_button))
                    #sub_it91.AppendItem(sub_it91_2)
                    #self.Bind(wx.EVT_MENU,self.onCTXiwd,id=30921)
                    sub_it91_3 = wx.MenuItem(sub_it91, 30931, 'Grid interpolation')
                    sub_it91_3.SetBitmap(wx.Bitmap(self.art.contextmenu_grid_interpolation_button))
                    sub_it91.AppendItem(sub_it91_3)
                    self.Bind(wx.EVT_MENU,self.onCTXgridinterpolation,id=30931)
                    
                    it9_bmap = wx.MenuItem(menu,309,'Simulation')
                    it9_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_simulation_button))
                    sub_it9 = wx.Menu()
                    it9_bmap.SetSubMenu(sub_it9)
                    menu.AppendItem(it9_bmap)
                    sub_it9_1 = wx.MenuItem(sub_it9, 3091, 'GSI')
                    sub_it9_1.SetBitmap(wx.Bitmap(self.art.contextmenu_gsi_button))
                    sub_it9.AppendItem(sub_it9_1)
                    self.Bind(wx.EVT_MENU,self.onCTXgsi,id=3091)
                    sub_it9_2 = wx.MenuItem(sub_it9, 3092, 'Direct Sequential Simulation')
                    sub_it9_2.SetBitmap(wx.Bitmap(self.art.contextmenu_dss_button))
                    sub_it9.AppendItem(sub_it9_2)
                    self.Bind(wx.EVT_MENU,self.onCTXdss,id=3092)
                    sub_it9_3 = wx.MenuItem(sub_it9, 3093, 'Sequential Gaussian Simulation')
                    sub_it9_3.SetBitmap(wx.Bitmap(self.art.contextmenu_sgs_button))
                    sub_it9.AppendItem(sub_it9_3)
                    self.Bind(wx.EVT_MENU,self.onCTXsgs,id=3093)
                    if self.object_manager.call(pieces).vtype=='discrete':
                        sub_it9_4 = wx.MenuItem(sub_it9, 3094, 'Sequential Indicator Simulation')
                        sub_it9_4.SetBitmap(wx.Bitmap(self.art.contextmenu_sis_button))
                        sub_it9.AppendItem(sub_it9_4)
                        self.Bind(wx.EVT_MENU,self.onCTXsis,id=3094)
                    
                    menu.AppendSeparator()
                    
                    it10_bmap = wx.MenuItem(menu,310,'Operations')
                    it10_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_operations_button))
                    sub_it10 = wx.Menu()
                    it10_bmap.SetSubMenu(sub_it10)
                    menu.AppendItem(it10_bmap)
                    sub_it10_1 = wx.MenuItem(sub_it10,3101, 'Mirror')
                    sub_it10_1.SetBitmap(wx.Bitmap(self.art.contextmenu_mirror_button))
                    sub_it10.AppendItem(sub_it10_1)
                    self.Bind(wx.EVT_MENU,self.onCTXmirrorpoint,id=3101)
                    sub_it10_2 = wx.MenuItem(sub_it10,3102, 'Categorize')
                    sub_it10_2.SetBitmap(wx.Bitmap(self.art.contextmenu_categorize_button))
                    sub_it10.AppendItem(sub_it10_2)
                    self.Bind(wx.EVT_MENU,self.onCTXcategorizepoint,id=3102)
                    sub_it10_3 = wx.MenuItem(sub_it10,3103, 'Crop')
                    sub_it10_3.SetBitmap(wx.Bitmap(self.art.contextmenu_crop_button))
                    sub_it10.AppendItem(sub_it10_3)
                    self.Bind(wx.EVT_MENU,self.onCTXcroppoint,id=3103)
                    sub_it10_4 = wx.MenuItem(sub_it10,3104, 'Duplicate')
                    sub_it10_4.SetBitmap(wx.Bitmap(self.art.contextmenu_duplicate_button))
                    sub_it10.AppendItem(sub_it10_4)
                    self.Bind(wx.EVT_MENU,self.onCTXduplicatepoint,id=3104)
                    sub_it10_5 = wx.MenuItem(sub_it10,3105, 'Linear transform')
                    sub_it10_5.SetBitmap(wx.Bitmap(self.art.contextmenu_linear_button))
                    sub_it10.AppendItem(sub_it10_5)
                    self.Bind(wx.EVT_MENU,self.onCTXlineartransformpoint,id=3105)
                    
                    menu.AppendSeparator()
                    
                    it11_bmap = wx.MenuItem(menu,311,'Geometrics')
                    it11_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_geometric_button))
                    sub_it11 = wx.Menu()
                    it11_bmap.SetSubMenu(sub_it11)
                    menu.AppendItem(it11_bmap)                         
                    sub_it11_1 = wx.MenuItem(sub_it11,3111, 'Pickle')
                    sub_it11_1.SetBitmap(wx.Bitmap(self.art.contextmenu_pickle_button))
                    sub_it11.AppendItem(sub_it11_1)
                    self.Bind(wx.EVT_MENU,self.onCTXpicklepoint,id=3111)
                    #sub_it11_2 = wx.MenuItem(sub_it11,3112, 'Repeat')
                    #sub_it11_2.SetBitmap(wx.Bitmap(self.art.contextmenu_repeat_button))
                    #sub_it11.AppendItem(sub_it11_2)
                    #self.Bind(wx.EVT_MENU,self.onCTXrepeatpoint,id=3112)

                    #sub_it11_4 = wx.MenuItem(sub_it11,3114, 'Tile')
                    #sub_it11_4.SetBitmap(wx.Bitmap(self.art.contextmenu_tile_button))
                    #sub_it11.AppendItem(sub_it11_4)
                    #self.Bind(wx.EVT_MENU,self.onCTXtilepoint,id=3114)
                    
                    #sub_it11_6 = wx.MenuItem(sub_it11,3116, 'Shift')
                    #sub_it11_6.SetBitmap(wx.Bitmap(self.art.contextmenu_shift_button))
                    #sub_it11.AppendItem(sub_it11_6)
                    #self.Bind(wx.EVT_MENU,self.onCTXshiftpoint,id=3116)
                    
                    sub_it11_7 = wx.MenuItem(sub_it11,3117, 'Flip X')
                    sub_it11_7.SetBitmap(wx.Bitmap(self.art.contextmenu_flipx_button))
                    sub_it11.AppendItem(sub_it11_7)
                    self.Bind(wx.EVT_MENU,self.onCTXflipxpoint,id=3117)
                    
                    sub_it11_8 = wx.MenuItem(sub_it11,3118, 'Flip Y')
                    sub_it11_8.SetBitmap(wx.Bitmap(self.art.contextmenu_flipy_button))
                    sub_it11.AppendItem(sub_it11_8)
                    self.Bind(wx.EVT_MENU,self.onCTXflipypoint,id=3118)
                    
                    sub_it11_9 = wx.MenuItem(sub_it11,3119, 'Flip Z')
                    sub_it11_9.SetBitmap(wx.Bitmap(self.art.contextmenu_flipz_button))
                    sub_it11.AppendItem(sub_it11_9)
                    self.Bind(wx.EVT_MENU,self.onCTXflipzpoint,id=3119)
                    
                    sub_it11_13 = wx.MenuItem(sub_it11,31113, 'Translation')
                    sub_it11_13.SetBitmap(wx.Bitmap(self.art.contextmenu_translation_button))
                    sub_it11.AppendItem(sub_it11_13)
                    self.Bind(wx.EVT_MENU,self.onCTXtranslationpoint,id=31113)
                    
                    menu.AppendSeparator()
                    
                    it13_bmap = wx.MenuItem(menu,313,'Calculator')
                    it13_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_calculator_button))
                    sub_it13 = wx.Menu()
                    it13_bmap.SetSubMenu(sub_it13)
                    menu.AppendItem(it13_bmap)                         
                    sub_it13_1 = wx.MenuItem(sub_it13,3131, 'Constant')
                    sub_it13_1.SetBitmap(wx.Bitmap(self.art.contextmenu_constant_calculator_button))
                    sub_it13.AppendItem(sub_it13_1)
                    self.Bind(wx.EVT_MENU,self.onCTXconstantcalculatorpoint,id=3131)
                    sub_it13_2 = wx.MenuItem(sub_it13,3132, 'Object')
                    sub_it13_2.SetBitmap(wx.Bitmap(self.art.contextmenu_object_calculator_button))
                    sub_it13.AppendItem(sub_it13_2)
                    self.Bind(wx.EVT_MENU,self.onCTXobjectcalculatorpoint,id=3132)
                    sub_it13_3 = wx.MenuItem(sub_it13,3133, 'Global')
                    sub_it13_3.SetBitmap(wx.Bitmap(self.art.contextmenu_global_calculator_button))
                    sub_it13.AppendItem(sub_it13_3)
                    self.Bind(wx.EVT_MENU,self.onCTXglobalcalculatorpoint,id=3133)
                    
                    menu.AppendSeparator()
                    
                    it14_bmap = wx.MenuItem(menu,313,'Manipulate')
                    it14_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_manipulate_button))
                    sub_it14 = wx.Menu()
                    it14_bmap.SetSubMenu(sub_it14)
                    menu.AppendItem(it14_bmap)                         
                    sub_it14_1 = wx.MenuItem(sub_it14,3141, 'Join')
                    sub_it14_1.SetBitmap(wx.Bitmap(self.art.contextmenu_join_button))
                    sub_it14.AppendItem(sub_it14_1)
                    self.Bind(wx.EVT_MENU,self.onCTXjoinpoint,id=3141)
                    
                    menu.AppendSeparator()
                    
                    it12_bmap = wx.MenuItem(menu,312,'Move')
                    it12_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_move_button))
                    sub_it12 = wx.Menu()
                    it12_bmap.SetSubMenu(sub_it12)
                    menu.AppendItem(it12_bmap)                         
                    sub_it12_1 = wx.MenuItem(sub_it12,3121, 'Copy')
                    sub_it12_1.SetBitmap(wx.Bitmap(self.art.contextmenu_copy_button))
                    sub_it12.AppendItem(sub_it12_1)
                    self.Bind(wx.EVT_MENU,self.onCTXcopypoint,id=3121)
                    sub_it12_2 = wx.MenuItem(sub_it12,3122, 'Cut')
                    sub_it12_2.SetBitmap(wx.Bitmap(self.art.contextmenu_cut_button))
                    sub_it12.AppendItem(sub_it12_2)
                    self.Bind(wx.EVT_MENU,self.onCTXcutpoint,id=3122)
                    
                    it3_bmap = wx.MenuItem(menu,303,'Export')
                    it3_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_export_button))
                    it3 = menu.AppendItem(it3_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_export_object,id = 303)
                    
                    it4_bmap = wx.MenuItem(menu,304,'Delete')
                    it4_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_delete_button))
                    it4 = menu.AppendItem(it4_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_delete_object,id = 304)
                    
                    self.PopupMenu(menu)
                    menu.Destroy()
                    
                elif self.object_manager.object_type[pieces[0]] == 'surf':
                    
                    self.CTX_view_object = wx.NewId()
                    self.CTX_export = wx.NewId()
                    self.CTX_delete = wx.NewId()
                    
                    menu = wx.Menu()
                    it1_bmap = wx.MenuItem(menu,301,'View\UnView')
                    it1_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_view_button))
                    it1 = menu.AppendItem(it1_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_view_surf_object,id = 301)
                    
                    it2_bmap = wx.MenuItem(menu,302,'Object specifics')
                    it2_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_object_button))
                    it2 = menu.AppendItem(it2_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_object_specifics_surf,id = 302)
                    
                    it21_bmap = wx.MenuItem(menu,3021,'Definitions')
                    it21_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_definitions_button))
                    it21 = menu.AppendItem(it21_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_definitions_surf,id = 3021)
                    
                    it22_bmap = wx.MenuItem(menu,3022,'Label me')
                    it22_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_labelme_button))
                    it22 = menu.AppendItem(it22_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_labelme_mesh,id = 3022)
                    
                    menu.AppendSeparator()
                    
                    it5_bmap = wx.MenuItem(menu,305,'Histogram')
                    it5_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_histogram_button))
                    it5 = menu.AppendItem(it5_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXhistogram,id = 305)
                    
                    it6_bmap = wx.MenuItem(menu,306,'Scatterplot')
                    it6_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_scatterplot_button))
                    menu.AppendItem(it6_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXscatterplot,id = 306)
                    
                    it7_bmap = wx.MenuItem(menu,307,'Box-Plot')
                    it7_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_boxplot_button))
                    menu.AppendItem(it7_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXboxplot,id = 307)
                    
                    it71_bmap = wx.MenuItem(menu,3071,'LinePlot')
                    it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_lineplot_button))
                    menu.AppendItem(it71_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXlineplot,id = 3071)
                    
                    it72_bmap = wx.MenuItem(menu,3072,'Stereonet')
                    it72_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_stereonet_button))
                    menu.AppendItem(it72_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXstereonet,id = 3072)
                    
                    it73_bmap = wx.MenuItem(menu,3073,'Density-plot')
                    it73_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_densityplot_button))
                    menu.AppendItem(it73_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTXdensityplot,id = 3073)
                    
                    it75_bmap = wx.MenuItem(menu,371,'2D plot')
                    it75_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_2dplots_button))
                    sub_it75 = wx.Menu()
                    it75_bmap.SetSubMenu(sub_it75)
                    menu.AppendItem(it75_bmap)
                    sub_it75_1 = wx.MenuItem(sub_it75, 3751, 'Bubble-plot')
                    sub_it75_1.SetBitmap(wx.Bitmap(self.art.contextmenu_bubbleplot_button))
                    sub_it75.AppendItem(sub_it75_1)
                    self.Bind(wx.EVT_MENU,self.onCTXbubbleplot,id=3751)
                    sub_it75_2 = wx.MenuItem(sub_it75, 3752, 'Bubble-net')
                    sub_it75_2.SetBitmap(wx.Bitmap(self.art.contextmenu_bubblenet_button))
                    sub_it75.AppendItem(sub_it75_2)
                    self.Bind(wx.EVT_MENU,self.onCTXbubblenet,id=3752)
                    sub_it75_3 = wx.MenuItem(sub_it75, 3753, 'Fillplot')
                    sub_it75_3.SetBitmap(wx.Bitmap(self.art.contextmenu_fillplot_button))
                    sub_it75.AppendItem(sub_it75_3)
                    self.Bind(wx.EVT_MENU,self.onCTXfillplot,id=3753)
                    sub_it75_4 = wx.MenuItem(sub_it75, 3754, 'Density-net')
                    sub_it75_4.SetBitmap(wx.Bitmap(self.art.contextmenu_densitynet_button))
                    sub_it75.AppendItem(sub_it75_4)
                    self.Bind(wx.EVT_MENU,self.onCTXdensitynet,id=3754)
                    sub_it75_5 = wx.MenuItem(sub_it75, 3755, 'Scatter4')
                    sub_it75_5.SetBitmap(wx.Bitmap(self.art.contextmenu_4wayscatter_button))
                    sub_it75.AppendItem(sub_it75_5)
                    self.Bind(wx.EVT_MENU,self.onCTX4wayscatter,id=3755)
                    
                    it71_bmap = wx.MenuItem(menu,371,'3D plot')
                    it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_3dplots_button))
                    sub_it71 = wx.Menu()
                    it71_bmap.SetSubMenu(sub_it71)
                    menu.AppendItem(it71_bmap)
                    sub_it71_3 = wx.MenuItem(sub_it71, 3713, '3D Scatterplot')
                    sub_it71_3.SetBitmap(wx.Bitmap(self.art.contextmenu_3dscatter_button))
                    sub_it71.AppendItem(sub_it71_3)
                    self.Bind(wx.EVT_MENU,self.onCTX3dscatter,id=3713)
                    
                    #menu.AppendSeparator()
                    
                    #it8_bmap = wx.MenuItem(menu,308,'Variogram')
                    #it8_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_variogram_button))
                    #menu.AppendItem(it8_bmap)
                    #self.Bind(wx.EVT_MENU,self.onCTXvariogram,id = 308)
                    
                    menu.AppendSeparator()
                    
                    it9_bmap = wx.MenuItem(menu,309,'Related')
                    it9_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_surface_related_button))
                    sub_it9 = wx.Menu()
                    it9_bmap.SetSubMenu(sub_it9)
                    menu.AppendItem(it9_bmap)
                    sub_it9_1 = wx.MenuItem(sub_it9, 3091, 'Above or below')
                    sub_it9_1.SetBitmap(wx.Bitmap(self.art.contextmenu_above_or_below_button))
                    sub_it9.AppendItem(sub_it9_1)
                    self.Bind(wx.EVT_MENU,self.onCTXaboveorbelowsurf,id=3091)
                    sub_it9_10 = wx.MenuItem(sub_it9, 30910, 'In between')
                    sub_it9_10.SetBitmap(wx.Bitmap(self.art.contextmenu_between_button))
                    sub_it9.AppendItem(sub_it9_10)
                    self.Bind(wx.EVT_MENU,self.onCTXinbetweensurf,id=30910)
                    sub_it9_2 = wx.MenuItem(sub_it9, 3092, 'Flatten grid')
                    sub_it9_2.SetBitmap(wx.Bitmap(self.art.contextmenu_flatten_button))
                    sub_it9.AppendItem(sub_it9_2)
                    self.Bind(wx.EVT_MENU,self.onCTXflattensurf,id=3092)
                    sub_it9_3 = wx.MenuItem(sub_it9, 3093, 'unFlatten grid')
                    sub_it9_3.SetBitmap(wx.Bitmap(self.art.contextmenu_unflatten_button))
                    sub_it9.AppendItem(sub_it9_3)
                    self.Bind(wx.EVT_MENU,self.onCTXunflattensurf,id=3093)
                    
                    sub_it9_6 = wx.MenuItem(sub_it9, 3096, 'Flatten point')
                    sub_it9_6.SetBitmap(wx.Bitmap(self.art.contextmenu_flatten_point_button))
                    sub_it9.AppendItem(sub_it9_6)
                    self.Bind(wx.EVT_MENU,self.onCTXflattenpointsurf,id=3096)
                    sub_it9_7 = wx.MenuItem(sub_it9, 3097, 'unFlatten point')
                    sub_it9_7.SetBitmap(wx.Bitmap(self.art.contextmenu_unflatten_point_button))
                    sub_it9.AppendItem(sub_it9_7)
                    self.Bind(wx.EVT_MENU,self.onCTXunflattenpointsurf,id=3097)
                    
                    sub_it9_4 = wx.MenuItem(sub_it9, 3094, 'Create shape')
                    sub_it9_4.SetBitmap(wx.Bitmap(self.art.contextmenu_create_shape_button))
                    sub_it9.AppendItem(sub_it9_4)
                    self.Bind(wx.EVT_MENU,self.onCTXcreateshapesurf,id=3094)
                    sub_it9_5 = wx.MenuItem(sub_it9, 3095, 'Shovel')
                    sub_it9_5.SetBitmap(wx.Bitmap(self.art.contextmenu_shovel_button))
                    sub_it9.AppendItem(sub_it9_5)
                    self.Bind(wx.EVT_MENU,self.onCTXshovelsurf,id=3095)
                    sub_it9_9 = wx.MenuItem(sub_it9, 3099, 'Balanced shovel')
                    sub_it9_9.SetBitmap(wx.Bitmap(self.art.contextmenu_balanced_shovel_button))
                    sub_it9.AppendItem(sub_it9_9)
                    self.Bind(wx.EVT_MENU,self.onCTXbalancedshovelsurf,id=3099)
                    sub_it9_8 = wx.MenuItem(sub_it9, 3098, 'Slope map')
                    sub_it9_8.SetBitmap(wx.Bitmap(self.art.contextmenu_slope_map_button))
                    sub_it9.AppendItem(sub_it9_8)
                    self.Bind(wx.EVT_MENU,self.onCTXslopemapsurf,id=3098)
                    sub_it9_91 = wx.MenuItem(sub_it9, 30991, 'Map to surface')
                    sub_it9_91.SetBitmap(wx.Bitmap(self.art.contextmenu_map2surf_button))
                    sub_it9.AppendItem(sub_it9_91)
                    self.Bind(wx.EVT_MENU,self.onCTXmap2surf,id=30991)
                    
                    menu.AppendSeparator()
                    
                    it10_bmap = wx.MenuItem(menu,310,'Operations')
                    it10_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_operations_button))
                    sub_it10 = wx.Menu()
                    it10_bmap.SetSubMenu(sub_it10)
                    menu.AppendItem(it10_bmap)
                    sub_it10_1 = wx.MenuItem(sub_it10,3101, 'Mirror')
                    sub_it10_1.SetBitmap(wx.Bitmap(self.art.contextmenu_mirror_button))
                    sub_it10.AppendItem(sub_it10_1)
                    self.Bind(wx.EVT_MENU,self.onCTXmirrorsurf,id=3101)
                    sub_it10_2 = wx.MenuItem(sub_it10,3102, 'Categorize')
                    sub_it10_2.SetBitmap(wx.Bitmap(self.art.contextmenu_categorize_button))
                    sub_it10.AppendItem(sub_it10_2)
                    self.Bind(wx.EVT_MENU,self.onCTXcategorizesurf,id=3102)
                    sub_it10_3 = wx.MenuItem(sub_it10,3103, 'Crop')
                    sub_it10_3.SetBitmap(wx.Bitmap(self.art.contextmenu_crop_button))
                    sub_it10.AppendItem(sub_it10_3)
                    self.Bind(wx.EVT_MENU,self.onCTXcropsurf,id=3103)
                    sub_it10_4 = wx.MenuItem(sub_it10,3104, 'Duplicate')
                    sub_it10_4.SetBitmap(wx.Bitmap(self.art.contextmenu_duplicate_button))
                    sub_it10.AppendItem(sub_it10_4)
                    self.Bind(wx.EVT_MENU,self.onCTXduplicatesurf,id=3104)
                    sub_it10_5 = wx.MenuItem(sub_it10,3105, 'Linear transform')
                    sub_it10_5.SetBitmap(wx.Bitmap(self.art.contextmenu_linear_button))
                    sub_it10.AppendItem(sub_it10_5)
                    self.Bind(wx.EVT_MENU,self.onCTXlineartransformsurf,id=3105)
                    
                    menu.AppendSeparator()
                    
                    # MANY OF THESE GEOMETRIC OPERATORS COME FROM:
                    # http://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html
                    it11_bmap = wx.MenuItem(menu,311,'Geometrics')
                    it11_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_geometric_button))
                    sub_it11 = wx.Menu()
                    it11_bmap.SetSubMenu(sub_it11)
                    menu.AppendItem(it11_bmap)                         
                    sub_it11_1 = wx.MenuItem(sub_it11,3111, 'Pickle')
                    sub_it11_1.SetBitmap(wx.Bitmap(self.art.contextmenu_pickle_button))
                    sub_it11.AppendItem(sub_it11_1)
                    self.Bind(wx.EVT_MENU,self.onCTXpicklesurf,id=3111)
                    sub_it11_2 = wx.MenuItem(sub_it11,3112, 'Repeat')
                    sub_it11_2.SetBitmap(wx.Bitmap(self.art.contextmenu_repeat_button))
                    sub_it11.AppendItem(sub_it11_2)
                    self.Bind(wx.EVT_MENU,self.onCTXrepeatsurf,id=3112)
                    sub_it11_3 = wx.MenuItem(sub_it11,3113, 'Expand')
                    sub_it11_3.SetBitmap(wx.Bitmap(self.art.contextmenu_expand_button))
                    sub_it11.AppendItem(sub_it11_3)
                    self.Bind(wx.EVT_MENU,self.onCTXexpandsurf,id=3113)
                    sub_it11_4 = wx.MenuItem(sub_it11,3114, 'Tile')
                    sub_it11_4.SetBitmap(wx.Bitmap(self.art.contextmenu_tile_button))
                    sub_it11.AppendItem(sub_it11_4)
                    self.Bind(wx.EVT_MENU,self.onCTXtilesurf,id=3114)
                    #sub_it11_5 = wx.MenuItem(sub_it11,3115, 'Transpose')
                    #sub_it11_5.SetBitmap(wx.Bitmap(self.art.contextmenu_transpose_button))
                    #sub_it11.AppendItem(sub_it11_5)
                    #self.Bind(wx.EVT_MENU,self.onCTXtransposesurf,id=3115)
                    
                    sub_it11_6 = wx.MenuItem(sub_it11,3116, 'Shift')
                    sub_it11_6.SetBitmap(wx.Bitmap(self.art.contextmenu_shift_button))
                    sub_it11.AppendItem(sub_it11_6)
                    self.Bind(wx.EVT_MENU,self.onCTXshiftsurf,id=3116)
                    
                    sub_it11_7 = wx.MenuItem(sub_it11,3117, 'Flip X')
                    sub_it11_7.SetBitmap(wx.Bitmap(self.art.contextmenu_flipx_button))
                    sub_it11.AppendItem(sub_it11_7)
                    self.Bind(wx.EVT_MENU,self.onCTXflipxsurf,id=3117)
                    
                    sub_it11_8 = wx.MenuItem(sub_it11,3118, 'Flip Y')
                    sub_it11_8.SetBitmap(wx.Bitmap(self.art.contextmenu_flipy_button))
                    sub_it11.AppendItem(sub_it11_8)
                    self.Bind(wx.EVT_MENU,self.onCTXflipysurf,id=3118)
                    
                    sub_it11_9 = wx.MenuItem(sub_it11,3119, 'Rotate 90')
                    sub_it11_9.SetBitmap(wx.Bitmap(self.art.contextmenu_rotate_button))
                    sub_it11.AppendItem(sub_it11_9)
                    self.Bind(wx.EVT_MENU,self.onCTXrotatesurf,id=3119)
                    
                    sub_it11_10 = wx.MenuItem(sub_it11,31110, 'Swap')
                    sub_it11_10.SetBitmap(wx.Bitmap(self.art.contextmenu_swap_button))
                    sub_it11.AppendItem(sub_it11_10)
                    self.Bind(wx.EVT_MENU,self.onCTXswapsurf,id=31110)
                    
                    sub_it11_13 = wx.MenuItem(sub_it11,31113, 'Translation')
                    sub_it11_13.SetBitmap(wx.Bitmap(self.art.contextmenu_translation_button))
                    sub_it11.AppendItem(sub_it11_13)
                    self.Bind(wx.EVT_MENU,self.onCTXtranslationsurf,id=31113)
                    
                    menu.AppendSeparator()
                    
                    it13_bmap = wx.MenuItem(menu,313,'Calculator')
                    it13_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_calculator_button))
                    sub_it13 = wx.Menu()
                    it13_bmap.SetSubMenu(sub_it13)
                    menu.AppendItem(it13_bmap)                         
                    sub_it13_1 = wx.MenuItem(sub_it13,3131, 'Constant')
                    sub_it13_1.SetBitmap(wx.Bitmap(self.art.contextmenu_constant_calculator_button))
                    sub_it13.AppendItem(sub_it13_1)
                    self.Bind(wx.EVT_MENU,self.onCTXconstantcalculatorsurf,id=3131)
                    sub_it13_2 = wx.MenuItem(sub_it13,3132, 'Object')
                    sub_it13_2.SetBitmap(wx.Bitmap(self.art.contextmenu_object_calculator_button))
                    sub_it13.AppendItem(sub_it13_2)
                    self.Bind(wx.EVT_MENU,self.onCTXobjectcalculatorsurf,id=3132)
                    sub_it13_3 = wx.MenuItem(sub_it13,3133, 'Global')
                    sub_it13_3.SetBitmap(wx.Bitmap(self.art.contextmenu_global_calculator_button))
                    sub_it13.AppendItem(sub_it13_3)
                    self.Bind(wx.EVT_MENU,self.onCTXglobalcalculatorsurf,id=3133)
                    
                    menu.AppendSeparator()
                    
                    it14_bmap = wx.MenuItem(menu,313,'Manipulate')
                    it14_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_manipulate_button))
                    sub_it14 = wx.Menu()
                    it14_bmap.SetSubMenu(sub_it14)
                    menu.AppendItem(it14_bmap)                         
                    sub_it14_1 = wx.MenuItem(sub_it14,3141, 'Join')
                    sub_it14_1.SetBitmap(wx.Bitmap(self.art.contextmenu_join_button))
                    sub_it14.AppendItem(sub_it14_1)
                    self.Bind(wx.EVT_MENU,self.onCTXjoinsurf,id=3141)
                    
                    menu.AppendSeparator()
                    
                    it12_bmap = wx.MenuItem(menu,312,'Move')
                    it12_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_move_button))
                    sub_it12 = wx.Menu()
                    it12_bmap.SetSubMenu(sub_it12)
                    menu.AppendItem(it12_bmap)                         
                    sub_it12_1 = wx.MenuItem(sub_it12,3121, 'Copy')
                    sub_it12_1.SetBitmap(wx.Bitmap(self.art.contextmenu_copy_button))
                    sub_it12.AppendItem(sub_it12_1)
                    self.Bind(wx.EVT_MENU,self.onCTXcopysurf,id=3121)
                    sub_it12_2 = wx.MenuItem(sub_it12,3122, 'Cut')
                    sub_it12_2.SetBitmap(wx.Bitmap(self.art.contextmenu_cut_button))
                    sub_it12.AppendItem(sub_it12_2)
                    self.Bind(wx.EVT_MENU,self.onCTXcutsurf,id=3122)
                    
                    it3_bmap = wx.MenuItem(menu,303,'Export')
                    it3_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_export_button))
                    it3 = menu.AppendItem(it3_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_export_object,id = 303)
                    
                    it4_bmap = wx.MenuItem(menu,304,'Delete')
                    it4_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_delete_button))
                    it4 = menu.AppendItem(it4_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_delete_object,id = 304)
                    
                    self.PopupMenu(menu)
                    menu.Destroy()
                    
                elif self.object_manager.object_type[pieces[0]] == 'data':
                    
                    self.CTX_view_object = wx.NewId()
                    self.CTX_export = wx.NewId()
                    self.CTX_delete = wx.NewId()
                    
                    menu = wx.Menu()
                    
                    it21_bmap = wx.MenuItem(menu,3021,'Definitions')
                    it21_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_definitions_button))
                    it21 = menu.AppendItem(it21_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_definitions_data,id = 3021)
                    
                    menu.AppendSeparator()
                    
                    if self.object_manager.call(pieces).dtype!='string':
                        it5_bmap = wx.MenuItem(menu,305,'Histogram')
                        it5_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_histogram_button))
                        it5 = menu.AppendItem(it5_bmap)
                        self.Bind(wx.EVT_MENU,self.onCTXhistogram,id = 305)
                        
                        it6_bmap = wx.MenuItem(menu,306,'Scatterplot')
                        it6_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_scatterplot_button))
                        menu.AppendItem(it6_bmap)
                        self.Bind(wx.EVT_MENU,self.onCTXscatterplot,id = 306)
                        
                        it7_bmap = wx.MenuItem(menu,307,'Box-Plot')
                        it7_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_boxplot_button))
                        menu.AppendItem(it7_bmap)
                        self.Bind(wx.EVT_MENU,self.onCTXboxplot,id = 307)
                        
                        it71_bmap = wx.MenuItem(menu,3071,'LinePlot')
                        it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_lineplot_button))
                        menu.AppendItem(it71_bmap)
                        self.Bind(wx.EVT_MENU,self.onCTXlineplot,id = 3071)
                        
                        it72_bmap = wx.MenuItem(menu,3072,'Stereonet')
                        it72_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_stereonet_button))
                        menu.AppendItem(it72_bmap)
                        self.Bind(wx.EVT_MENU,self.onCTXstereonet,id = 3072)
                        
                        it73_bmap = wx.MenuItem(menu,3073,'Density-plot')
                        it73_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_densityplot_button))
                        menu.AppendItem(it73_bmap)
                        self.Bind(wx.EVT_MENU,self.onCTXdensityplot,id = 3073)
                        
                        it75_bmap = wx.MenuItem(menu,371,'2D plot')
                        it75_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_2dplots_button))
                        sub_it75 = wx.Menu()
                        it75_bmap.SetSubMenu(sub_it75)
                        menu.AppendItem(it75_bmap)
                        sub_it75_1 = wx.MenuItem(sub_it75, 3751, 'Bubble-plot')
                        sub_it75_1.SetBitmap(wx.Bitmap(self.art.contextmenu_bubbleplot_button))
                        sub_it75.AppendItem(sub_it75_1)
                        self.Bind(wx.EVT_MENU,self.onCTXbubbleplot,id=3751)
                        sub_it75_2 = wx.MenuItem(sub_it75, 3752, 'Bubble-net')
                        sub_it75_2.SetBitmap(wx.Bitmap(self.art.contextmenu_bubblenet_button))
                        sub_it75.AppendItem(sub_it75_2)
                        self.Bind(wx.EVT_MENU,self.onCTXbubblenet,id=3752)
                        sub_it75_3 = wx.MenuItem(sub_it75, 3753, 'Fillplot')
                        sub_it75_3.SetBitmap(wx.Bitmap(self.art.contextmenu_fillplot_button))
                        sub_it75.AppendItem(sub_it75_3)
                        self.Bind(wx.EVT_MENU,self.onCTXfillplot,id=3753)
                        sub_it75_4 = wx.MenuItem(sub_it75, 3754, 'Density-net')
                        sub_it75_4.SetBitmap(wx.Bitmap(self.art.contextmenu_densitynet_button))
                        sub_it75.AppendItem(sub_it75_4)
                        self.Bind(wx.EVT_MENU,self.onCTXdensitynet,id=3754)
                        sub_it75_5 = wx.MenuItem(sub_it75, 3755, 'Scatter4')
                        sub_it75_5.SetBitmap(wx.Bitmap(self.art.contextmenu_4wayscatter_button))
                        sub_it75.AppendItem(sub_it75_5)
                        self.Bind(wx.EVT_MENU,self.onCTX4wayscatter,id=3755)
                        
                        it71_bmap = wx.MenuItem(menu,371,'3D plot')
                        it71_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_3dplots_button))
                        sub_it71 = wx.Menu()
                        it71_bmap.SetSubMenu(sub_it71)
                        menu.AppendItem(it71_bmap)
                        sub_it71_3 = wx.MenuItem(sub_it71, 3713, '3D Scatterplot')
                        sub_it71_3.SetBitmap(wx.Bitmap(self.art.contextmenu_3dscatter_button))
                        sub_it71.AppendItem(sub_it71_3)
                        self.Bind(wx.EVT_MENU,self.onCTX3dscatter,id=3713)
                        
                        menu.AppendSeparator()
                        
                        it15_bmap = wx.MenuItem(menu,315,'Related')
                        it15_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_data_related_button))
                        sub_it15 = wx.Menu()
                        it15_bmap.SetSubMenu(sub_it15)
                        menu.AppendItem(it15_bmap)
                        sub_it15_1 = wx.MenuItem(sub_it15, 3151, 'Convert to Point')
                        sub_it15_1.SetBitmap(wx.Bitmap(self.art.contextmenu_convert_button))
                        sub_it15.AppendItem(sub_it15_1)
                        self.Bind(wx.EVT_MENU,self.onCTXconvert2pointdata,id=3151)
                        sub_it15_2 = wx.MenuItem(sub_it15, 3152, 'Classify')
                        sub_it15_2.SetBitmap(wx.Bitmap(self.art.contextmenu_classify_button))
                        sub_it15.AppendItem(sub_it15_2)
                        self.Bind(wx.EVT_MENU,self.onCTXclassifydata,id=3152)
                        #sub_it15_5 = wx.MenuItem(sub_it15, 3155, 'Discriminant analysis')
                        #sub_it15_5.SetBitmap(wx.Bitmap(self.art.contextmenu_discriminant_analysis_button))
                        #sub_it15.AppendItem(sub_it15_5)
                        #self.Bind(wx.EVT_MENU,self.onCTXdiscriminantanalysisdata,id=3155)
                        sub_it15_4 = wx.MenuItem(sub_it15, 3154, 'Cluster analysis')
                        sub_it15_4.SetBitmap(wx.Bitmap(self.art.contextmenu_cluster_analysis_button))
                        sub_it15.AppendItem(sub_it15_4)
                        self.Bind(wx.EVT_MENU,self.onCTXclusteranalysisdata,id=3154)
                        
                        menu.AppendSeparator()
                    
                        it10_bmap = wx.MenuItem(menu,310,'Operations')
                        it10_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_operations_button))
                        sub_it10 = wx.Menu()
                        it10_bmap.SetSubMenu(sub_it10)
                        menu.AppendItem(it10_bmap)
                        sub_it10_1 = wx.MenuItem(sub_it10,3101, 'Mirror')
                        sub_it10_1.SetBitmap(wx.Bitmap(self.art.contextmenu_mirror_button))
                        sub_it10.AppendItem(sub_it10_1)
                        self.Bind(wx.EVT_MENU,self.onCTXmirrordata,id=3101)
                        sub_it10_2 = wx.MenuItem(sub_it10,3102, 'Categorize')
                        sub_it10_2.SetBitmap(wx.Bitmap(self.art.contextmenu_categorize_button))
                        sub_it10.AppendItem(sub_it10_2)
                        self.Bind(wx.EVT_MENU,self.onCTXcategorizedata,id=3102)
                        sub_it10_4 = wx.MenuItem(sub_it10,3104, 'Duplicate')
                        sub_it10_4.SetBitmap(wx.Bitmap(self.art.contextmenu_duplicate_button))
                        sub_it10.AppendItem(sub_it10_4)
                        self.Bind(wx.EVT_MENU,self.onCTXduplicatedata,id=3104)
                        sub_it10_5 = wx.MenuItem(sub_it10,3105, 'Linear transform')
                        sub_it10_5.SetBitmap(wx.Bitmap(self.art.contextmenu_linear_button))
                        sub_it10.AppendItem(sub_it10_5)
                        self.Bind(wx.EVT_MENU,self.onCTXlineartransformdata,id=3105)
                        
                        menu.AppendSeparator()
                    
                        it13_bmap = wx.MenuItem(menu,313,'Calculator')
                        it13_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_calculator_button))
                        sub_it13 = wx.Menu()
                        it13_bmap.SetSubMenu(sub_it13)
                        menu.AppendItem(it13_bmap)                         
                        sub_it13_1 = wx.MenuItem(sub_it13,3131, 'Constant')
                        sub_it13_1.SetBitmap(wx.Bitmap(self.art.contextmenu_constant_calculator_button))
                        sub_it13.AppendItem(sub_it13_1)
                        self.Bind(wx.EVT_MENU,self.onCTXconstantcalculatordata,id=3131)
                        sub_it13_2 = wx.MenuItem(sub_it13,3132, 'Object')
                        sub_it13_2.SetBitmap(wx.Bitmap(self.art.contextmenu_object_calculator_button))
                        sub_it13.AppendItem(sub_it13_2)
                        self.Bind(wx.EVT_MENU,self.onCTXobjectcalculatordata,id=3132)
                        sub_it13_3 = wx.MenuItem(sub_it13,3133, 'Global')
                        sub_it13_3.SetBitmap(wx.Bitmap(self.art.contextmenu_global_calculator_button))
                        sub_it13.AppendItem(sub_it13_3)
                        self.Bind(wx.EVT_MENU,self.onCTXglobalcalculatordata,id=3133)
                    
                        menu.AppendSeparator()
                        
                    it14_bmap = wx.MenuItem(menu,313,'Manipulate')
                    it14_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_manipulate_button))
                    sub_it14 = wx.Menu()
                    it14_bmap.SetSubMenu(sub_it14)
                    menu.AppendItem(it14_bmap)                         
                    sub_it14_1 = wx.MenuItem(sub_it14,3141, 'Join')
                    sub_it14_1.SetBitmap(wx.Bitmap(self.art.contextmenu_join_button))
                    sub_it14.AppendItem(sub_it14_1)
                    self.Bind(wx.EVT_MENU,self.onCTXjoindata,id=3141)
                    
                    menu.AppendSeparator()
                    
                    it12_bmap = wx.MenuItem(menu,312,'Move')
                    it12_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_move_button))
                    sub_it12 = wx.Menu()
                    it12_bmap.SetSubMenu(sub_it12)
                    menu.AppendItem(it12_bmap)                         
                    sub_it12_1 = wx.MenuItem(sub_it12,3121, 'Copy')
                    sub_it12_1.SetBitmap(wx.Bitmap(self.art.contextmenu_copy_button))
                    sub_it12.AppendItem(sub_it12_1)
                    self.Bind(wx.EVT_MENU,self.onCTXcopydata,id=3121)
                    sub_it12_2 = wx.MenuItem(sub_it12,3122, 'Cut')
                    sub_it12_2.SetBitmap(wx.Bitmap(self.art.contextmenu_cut_button))
                    sub_it12.AppendItem(sub_it12_2)
                    self.Bind(wx.EVT_MENU,self.onCTXcutdata,id=3122)
                    
                    it3_bmap = wx.MenuItem(menu,303,'Export')
                    it3_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_export_button))
                    it3 = menu.AppendItem(it3_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_export_object,id = 303)
                    
                    it4_bmap = wx.MenuItem(menu,304,'Delete')
                    it4_bmap.SetBitmap(wx.Bitmap(self.art.contextmenu_delete_button))
                    it4 = menu.AppendItem(it4_bmap)
                    self.Bind(wx.EVT_MENU,self.onCTX_delete_object,id = 304)
                    
                    self.PopupMenu(menu)
                    menu.Destroy()
                    
    def update_last_variable_list(self):
        '''
        update_last_variable_list(...)
            update_last_variable_list(No arguments)
            
            Calss the last object in object manager and adss the last variable
            in the object manager on the interface treectrl.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            Its self-management.
        
        See also
        --------
        None
        '''
        self.object_tree.AppendItem(self.object_item[self.object_manager.last_object],self.object_manager.last_variable)
        
    def update_last_object_list(self):
        '''
        update_last_object_list(...)
            update_last_object_list(No arguments)
            
            Brings the last object in object manager to appear in the interface
            widgets such as treectrl.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            Its self-management.
        
        See also
        --------
        None
        '''
        self.object_item[self.object_manager.last_object] = self.object_tree.AppendItem(self.object_root,self.object_manager.last_object)
        if self.object_manager.object_type[self.object_manager.last_object] == 'mesh': 
            self.object_tree.SetItemImage(self.object_item[self.object_manager.last_object], self.gimage, wx.TreeItemIcon_Normal)
        elif self.object_manager.object_type[self.object_manager.last_object] == 'point': 
            self.object_tree.SetItemImage(self.object_item[self.object_manager.last_object], self.pimage, wx.TreeItemIcon_Normal)
        elif self.object_manager.object_type[self.object_manager.last_object] == 'surf': 
            self.object_tree.SetItemImage(self.object_item[self.object_manager.last_object], self.simage, wx.TreeItemIcon_Normal)
        elif self.object_manager.object_type[self.object_manager.last_object] == 'data': 
            self.object_tree.SetItemImage(self.object_item[self.object_manager.last_object], self.dimage, wx.TreeItemIcon_Normal)
        elif self.object_manager.object_type[self.object_manager.last_object] == 'triangle_mesh': 
            self.object_tree.SetItemImage(self.object_item[self.object_manager.last_object], self.timage, wx.TreeItemIcon_Normal)
        variables = self.object_manager.object_list[self.object_manager.last_object].get_variable_names()        
        for i in variables:
            self.object_tree.AppendItem(self.object_item[self.object_manager.last_object],i)
            
    def update_object_list(self):
        for i in frame.object_manager.update_objects:
            frame.object_manager.last_object = i
            self.update_last_object_list()
        frame.object_manager.update_objects = []
            
    def onimportsurf(self,event):
        '''
        onimportsurf(...)
            onimportsurf(event)
            
            Brings up a new frame made for importing grid objects. The first
            step is a file dialog (in OPEN mode).
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the interface. 
        
        See also
        --------
        None
        '''
        dlg=wx.FileDialog(self,"Input surface file...",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            surfframe=SurfImportFrame(parent=frame,id=999,path=dlg.GetPath())
            surfframe.Centre()
            surfframe.Show()
        
    def onimportgrid(self,event):
        '''
        onimportgrid(...)
            onimportgrid(event)
            
            Brings up a new frame made for importing grid objects. The first
            step is a file dialog (in OPEN mode).
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the interface. 
        
        See also
        --------
        None
        '''
        dlg=wx.FileDialog(self,"Input mesh file...",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            meshframe=MeshImportFrame(parent=frame,id=999,path=dlg.GetPath())
            meshframe.Centre()
            meshframe.Show()
            
    def onimportpoint(self,event):
        '''
        onimportpoint(...)
            onimportpoint(event)
            
            Brings up a new frame made for importing point objects. The first
            step is a file dialog (in OPEN mode).
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the interface. 
        
        See also
        --------
        None
        '''
        dlg=wx.FileDialog(self,"Input point file...",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            pointframe=PointImportFrame(parent=frame,id=998,path=dlg.GetPath())
            pointframe.Centre()
            pointframe.Show()
            
    def onimportdata(self,event):
        '''
        onimportdata(...)
            onimportdata(event)
            
            Brings up a new frame made for importing data objects. The first
            step is a file dialog (in OPEN mode).
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the interface. 
        
        See also
        --------
        None
        '''
        dlg=wx.FileDialog(self,"Input data file...",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            dataframe=DataImportFrame(parent=frame,id=998,path=dlg.GetPath())
            dataframe.Centre()
            dataframe.Show()
            
    def onimportproject(self,event):
        '''
        onimportproject(...)
            onimportproject(event)
            
            Import project from project folder. The first
            step is a file dialog (in OPEN mode).
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the interface. 
        
        See also
        --------
        None
        '''
        #dlg=wx.FileDialog(self,"Input project folder...",style=wx.OPEN,wildcard="GEOMS2 project folder (*.geoms2)|*.geoms2")
        dlg = wx.DirDialog(self,"Input project folder...",style=wx.DD_DEFAULT_STYLE)        
        if dlg.ShowModal() == wx.ID_OK:
            if dlg.GetPath()[-7:]=='.geoms2':
                frame.object_manager.load_project(dlg.GetPath())
                frame.last_project_path = dlg.GetPath()
                frame.update_object_list()
                wx.MessageBox('Project was imported.', 'Information', wx.OK | wx.ICON_INFORMATION)
            else:
                wx.MessageBox('This path does not seem to be from a geoms2 project folder.', 'Error', wx.OK | wx.ICON_INFORMATION)
            
    def onexportproject(self,event):
        '''
        onexportproject(...)
            onexportproject(event)
            
            Export project to project folder. The first
            step is a file dialog (in SAVE mode).
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the interface. 
        
        See also
        --------
        None
        '''
        if len(self.object_manager.object_list.keys())!=0:
            dlg=wx.FileDialog(self,"Give project folder...",style=wx.SAVE,wildcard="GEOMS2 project folder (*.geoms2)|*.geoms2")
            if dlg.ShowModal() == wx.ID_OK:
                frame.last_project_path = dlg.GetPath()
                l = self.tree_items()
                frame.object_manager.save_project(dlg.GetPath(),l)
                wx.MessageBox('Project was exported.', 'Information', wx.OK | wx.ICON_INFORMATION)
        else:
            wx.MessageBox('There are no objects in object manager to be saved to project.', 'Error', wx.OK | wx.ICON_INFORMATION)
            
    def onsaveproject(self,event):
        '''
        onsaveproject(...)
            onsaveproject(event)
            
            Save project to project folder. The first
            step is a file dialog (in SAVE mode).
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the interface. 
        
        See also
        --------
        None
        '''
        if frame.last_project_path!='none':
            if len(self.object_manager.object_list.keys())!=0:
                #dlg=wx.FileDialog(self,"Give project folder...",style=wx.SAVE,wildcard="GEOMS2 project folder (*.geoms2)|*.geoms2")
                #if dlg.ShowModal() == wx.ID_OK:
                l = self.tree_items()
                frame.object_manager.save_project(frame.last_project_path,l)
                wx.MessageBox('Project was saved on %s.'%frame.last_project_path, 'Information', wx.OK | wx.ICON_INFORMATION)
            else:
                wx.MessageBox('There are no objects in object manager to be saved to project.', 'Error', wx.OK | wx.ICON_INFORMATION)
        else:
            wx.MessageBox('There is no project path on system. You need to export a project first.', 'Error', wx.OK | wx.ICON_INFORMATION)
    
    def tree_items(self):
        #self.object_tree = wx.TreeCtrl(panel, -1, (30,30), (260, 430), wx.TR_HIDE_ROOT|wx.TR_HAS_BUTTONS| wx.TR_LINES_AT_ROOT) #wx.TR_HIDE_ROOT|
        #self.object_root = self.object_tree.AddRoot('Objects')
        l=[]
        item, cookie = self.object_tree.GetFirstChild(self.object_root)
        while item.IsOk():
            l.append(self.object_tree.GetItemText(item))
            item, cookie = self.object_tree.GetNextChild(self.object_root, cookie)
        return l
    
    def ontoolbox(self,event):
        toolboxframe = ToolboxFrame(parent=frame,id=997)
        toolboxframe.Centre()
        toolboxframe.Show()
    
    def onviewerdefinitions(self,event):
        '''
        onviewerdefinitions(...)
            onviewerdefinitions(event)
            
            Brings up a new frame made for managing the 3D viewer definitions.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the interface. 
        
        See also
        --------
        None
        '''
        viewerdefinitionsframe = ViewerDefinitionsFrame(parent=frame,id=997)
        viewerdefinitionsframe.Centre()
        viewerdefinitionsframe.Show()
        
    def oncreateemptymesh(self,event):
        emptymeshframe = EmptyMeshFrame(parent=frame,id=997)
        emptymeshframe.Centre()
        emptymeshframe.Show()
        
    def oncreateemptysurf(self,event):
        emptysurfframe = EmptySurfFrame(parent=frame,id=997)
        emptysurfframe.Centre()
        emptysurfframe.Show()
        
    def onreview_single_object(self,pieces):
        '''
        onreview_object(...)
            onreview_object(pieces)
            
            Deletes previous view of object and views it again (suposedly
            updated).
            
        Parameters
        ----------
        pieces : List
            List of strings with the name of top object (pos 1) and variable
            (pos 2, python is 0 and 1 in list).
            
        Returns
        -------
        out: None
            The result is visual on the interface. 
        
        See also
        --------
        None
        '''
        if pieces[0] in self.mayavi_view.view_objects_names.keys():
            pieces.append(self.mayavi_view.view_variables_names[pieces[0]])
            if self.object_manager.object_type[pieces[0]]=='mesh':
                self.mayavi_view.remove_something(pieces)
                self.mayavi_view.view_mesh(self.object_manager.call(pieces).data,
                                  self.object_manager.call_top(pieces).xcoords,
                                  self.object_manager.call_top(pieces).ycoords
                                  ,self.object_manager.call_top(pieces).zcoords
                                  ,pieces
                                  ,self.object_manager.call(pieces).mycolormap
                                  ,self.object_manager.call(pieces).variable_range
                                  ,self.object_manager.call(pieces).colorbar_preferences)
            elif self.object_manager.object_type[pieces[0]]=='triangle_mesh':
                self.mayavi_view.remove_something(pieces)
                self.mayavi_view.view_triangle_mesh(self.object_manager.call_top(pieces).xcoords,
                                      self.object_manager.call_top(pieces).ycoords,
                                      self.object_manager.call_top(pieces).zcoords
                                      ,self.object_manager.call_top(pieces).triangles
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,False
                                      ,self.object_manager.call_top(pieces).colorbar_preferences)
            elif self.object_manager.object_type[pieces[0]]=='point':
                self.mayavi_view.remove_something(pieces)
                self.mayavi_view.view_point(self.object_manager.call(pieces).data,
                                  self.object_manager.call_top(pieces).x,
                                  self.object_manager.call_top(pieces).y
                                  ,self.object_manager.call_top(pieces).z
                                  ,pieces
                                  ,self.object_manager.call(pieces).mycolormap
                                  ,self.object_manager.call(pieces).variable_range
                                  ,self.object_manager.call(pieces).glyph
                                  ,self.object_manager.call(pieces).glyph_size
                                  ,self.object_manager.call(pieces).colorbar_preferences)
            elif self.object_manager.object_type[pieces[0]]=='surf':
                self.mayavi_view.remove_something(pieces)
                self.mayavi_view.view_surf(self.object_manager.call(pieces).data,
                                  self.object_manager.call_top(pieces).xcoords,
                                  self.object_manager.call_top(pieces).ycoords
                                  ,pieces
                                  ,self.object_manager.call(pieces).mycolormap
                                  ,self.object_manager.call(pieces).variable_range
                                  ,self.object_manager.call(pieces).myopacity
                                  ,self.object_manager.call(pieces).colorbar_preferences)
        
    def onreview_object(self,pieces):
        '''
        onreview_object(...)
            onreview_object(pieces)
            
            Deletes previous view of object and views it again (suposedly
            updated).
            
        Parameters
        ----------
        pieces : List
            List of strings with the name of top object (pos 1) and variable
            (pos 2, python is 0 and 1 in list).
            
        Returns
        -------
        out: None
            The result is visual on the interface. 
        
        See also
        --------
        None
        '''
        if pieces[0] in self.mayavi_view.view_objects_names.keys():
            if pieces[1] == self.mayavi_view.view_variables_names[pieces[0]]:
                if self.object_manager.object_type[pieces[0]]=='mesh':
                    self.mayavi_view.remove_something(pieces)
                    self.mayavi_view.view_mesh(self.object_manager.call(pieces).data,
                                      self.object_manager.call_top(pieces).xcoords,
                                      self.object_manager.call_top(pieces).ycoords
                                      ,self.object_manager.call_top(pieces).zcoords
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,self.object_manager.call(pieces).variable_range
                                      ,self.object_manager.call(pieces).colorbar_preferences)
                elif self.object_manager.object_type[pieces[0]]=='triangle_mesh':
                    self.mayavi_view.remove_something(pieces)
                    self.mayavi_view.view_triangle_mesh(self.object_manager.call_top(pieces).xcoords,
                                      self.object_manager.call_top(pieces).ycoords,
                                      self.object_manager.call_top(pieces).zcoords
                                      ,self.object_manager.call_top(pieces).triangles
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,False
                                      ,self.object_manager.call_top(pieces).colorbar_preferences)
                elif self.object_manager.object_type[pieces[0]]=='point':
                    self.mayavi_view.remove_something(pieces)
                    self.mayavi_view.view_point(self.object_manager.call(pieces).data,
                                      self.object_manager.call_top(pieces).x,
                                      self.object_manager.call_top(pieces).y
                                      ,self.object_manager.call_top(pieces).z
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,self.object_manager.call(pieces).variable_range
                                      ,self.object_manager.call(pieces).glyph
                                      ,self.object_manager.call(pieces).glyph_size
                                      ,self.object_manager.call(pieces).colorbar_preferences)
                elif self.object_manager.object_type[pieces[0]]=='surf':
                    self.mayavi_view.remove_something(pieces)
                    self.mayavi_view.view_surf(self.object_manager.call(pieces).data,
                                      self.object_manager.call_top(pieces).xcoords,
                                      self.object_manager.call_top(pieces).ycoords
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,self.object_manager.call(pieces).variable_range
                                      ,self.object_manager.call(pieces).myopacity
                                      ,self.object_manager.call(pieces).colorbar_preferences)
                                      
    def onCTX_view_surf_object(self,event):
        '''
        onCTX_view_surf_object(...)
            onCTX_view_surf_object(event)
            
            Brings the selected surface object (from context menu) to appear in the
            3D viewer. Or to disappear (since its the same call).
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the 3D viewer. 
        
        See also
        --------
        None
        '''
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1:
            if pieces[0] in self.mayavi_view.view_objects_names.keys():
                pieces.append(self.mayavi_view.view_variables_names[pieces[0]])
            else:
                pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
        if pieces[0] not in self.mayavi_view.view_objects_names.keys():
            self.mayavi_view.view_surf(self.object_manager.call(pieces).data,
                                      self.object_manager.call_top(pieces).xcoords,
                                      self.object_manager.call_top(pieces).ycoords
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,self.object_manager.call(pieces).variable_range
                                      ,self.object_manager.call(pieces).myopacity
                                      ,self.object_manager.call(pieces).colorbar_preferences)
            items = self.__get_item_by_list__(pieces)
            self.set_selection_as_bold(items,pieces)
        elif pieces[0] in self.mayavi_view.view_objects_names.keys():
            if pieces[1] != self.mayavi_view.view_variables_names[pieces[0]]:
                items = self.__get_item_by_list__([pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.remove_bold_from_selection(items,[pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.mayavi_view.remove_something(pieces)
                self.mayavi_view.view_surf(self.object_manager.call(pieces).data,
                                      self.object_manager.call_top(pieces).xcoords,
                                      self.object_manager.call_top(pieces).ycoords
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,self.object_manager.call(pieces).variable_range
                                      ,self.object_manager.call(pieces).myopacity
                                      ,self.object_manager.call(pieces).colorbar_preferences)
                items = self.__get_item_by_list__(pieces)
                self.set_selection_as_bold(items,pieces)
            else:
                items = self.__get_item_by_list__([pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.remove_bold_from_selection(items,[pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.mayavi_view.remove_something(pieces)
            
    def onCTX_view_mesh_object(self,event):
        '''
        onCTX_view_mesh_object(...)
            onCTX_view_mesh_object(event)
            
            Brings the selected mesh object (from context menu) to appear in the
            3D viewer. Or to disappear (since its the same call).
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the 3D viewer. 
        
        See also
        --------
        None
        '''
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1:
            if pieces[0] in self.mayavi_view.view_objects_names.keys():
                pieces.append(self.mayavi_view.view_variables_names[pieces[0]])
            else:
                pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
        if pieces[0] not in self.mayavi_view.view_objects_names.keys():
            self.mayavi_view.view_mesh(self.object_manager.call(pieces).data,
                                      self.object_manager.call_top(pieces).xcoords,
                                      self.object_manager.call_top(pieces).ycoords
                                      ,self.object_manager.call_top(pieces).zcoords
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,self.object_manager.call(pieces).variable_range
                                      ,self.object_manager.call(pieces).colorbar_preferences)
            items = self.__get_item_by_list__(pieces)
            self.set_selection_as_bold(items,pieces)
        elif pieces[0] in self.mayavi_view.view_objects_names.keys():
            if pieces[1] != self.mayavi_view.view_variables_names[pieces[0]]:
                items = self.__get_item_by_list__([pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.remove_bold_from_selection(items,[pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.mayavi_view.remove_something(pieces)
                self.mayavi_view.view_mesh(self.object_manager.call(pieces).data,
                                      self.object_manager.call_top(pieces).xcoords,
                                      self.object_manager.call_top(pieces).ycoords
                                      ,self.object_manager.call_top(pieces).zcoords
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,self.object_manager.call(pieces).variable_range
                                      ,self.object_manager.call(pieces).colorbar_preferences)
                items = self.__get_item_by_list__(pieces)
                self.set_selection_as_bold(items,pieces)
            else:
                items = self.__get_item_by_list__([pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.remove_bold_from_selection(items,[pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.mayavi_view.remove_something(pieces)
                
    def onCTX_view_triangle_mesh_object(self,event):
        '''
        onCTX_view_triangle_mesh_object(...)
            onCTX_view_triangle_mesh_object(event)
            
            Brings the selected triangle_mesh object (from context menu) to appear in the
            3D viewer. Or to disappear (since its the same call).
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the 3D viewer. 
        
        See also
        --------
        None
        '''
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1:
            if pieces[0] in self.mayavi_view.view_objects_names.keys():
                pieces.append(self.mayavi_view.view_variables_names[pieces[0]])
            else:
                pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
        if pieces[0] not in self.mayavi_view.view_objects_names.keys():
            self.mayavi_view.view_triangle_mesh(self.object_manager.call_top(pieces).xcoords,
                                      self.object_manager.call_top(pieces).ycoords,
                                      self.object_manager.call_top(pieces).zcoords
                                      ,self.object_manager.call_top(pieces).triangles
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,False
                                      ,self.object_manager.call_top(pieces).colorbar_preferences)
            items = self.__get_item_by_list__(pieces)
            self.set_selection_as_bold(items,pieces)
        elif pieces[0] in self.mayavi_view.view_objects_names.keys():
            if pieces[1] != self.mayavi_view.view_variables_names[pieces[0]]:
                items = self.__get_item_by_list__([pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.remove_bold_from_selection(items,[pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.mayavi_view.remove_something(pieces)
                self.mayavi_view.view_triangle_mesh(self.object_manager.call_top(pieces).xcoords,
                                      self.object_manager.call_top(pieces).ycoords,
                                      self.object_manager.call_top(pieces).zcoords
                                      ,self.object_manager.call_top(pieces).triangles
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,False
                                      ,self.object_manager.call_top(pieces).colorbar_preferences)
                items = self.__get_item_by_list__(pieces)
                self.set_selection_as_bold(items,pieces)
            else:
                items = self.__get_item_by_list__([pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.remove_bold_from_selection(items,[pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.mayavi_view.remove_something(pieces)            
                
                
    def onCTX_view_point_object(self,event):
        '''
        onCTX_view_point_object(...)
            onCTX_view_point_object(event)
            
            Brings the selected point object (from context menu) to appear in the
            3D viewer. Or to disappear (since its the same call).
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is visual on the 3D viewer. 
        
        See also
        --------
        None
        '''
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1:
            if pieces[0] in self.mayavi_view.view_objects_names.keys():
                pieces.append(self.mayavi_view.view_variables_names[pieces[0]])
            else:
                pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
        if pieces[0] not in self.mayavi_view.view_objects_names.keys():
            self.mayavi_view.view_point(self.object_manager.call(pieces).data,
                                      self.object_manager.call_top(pieces).x,
                                      self.object_manager.call_top(pieces).y
                                      ,self.object_manager.call_top(pieces).z
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,self.object_manager.call(pieces).variable_range
                                      ,self.object_manager.call(pieces).glyph
                                      ,self.object_manager.call(pieces).glyph_size
                                      ,self.object_manager.call(pieces).colorbar_preferences)
            items = self.__get_item_by_list__(pieces)
            self.set_selection_as_bold(items,pieces)
        elif pieces[0] in self.mayavi_view.view_objects_names.keys():
            if pieces[1] != self.mayavi_view.view_variables_names[pieces[0]]:  
                items = self.__get_item_by_list__([pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.remove_bold_from_selection(items,[pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.mayavi_view.remove_something(pieces)
                self.mayavi_view.view_point(self.object_manager.call(pieces).data,
                                      self.object_manager.call_top(pieces).x,
                                      self.object_manager.call_top(pieces).y
                                      ,self.object_manager.call_top(pieces).z
                                      ,pieces
                                      ,self.object_manager.call(pieces).mycolormap
                                      ,self.object_manager.call(pieces).variable_range
                                      ,self.object_manager.call(pieces).glyph
                                      ,self.object_manager.call(pieces).glyph_size
                                      ,self.object_manager.call(pieces).colorbar_preferences)
                items = self.__get_item_by_list__(pieces)
                self.set_selection_as_bold(items,pieces)
            else:
                items = self.__get_item_by_list__([pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.remove_bold_from_selection(items,[pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.mayavi_view.remove_something(pieces)
                
    def onCTX_object_specifics_point(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1: pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
        objectpointspecsframe=ObjectPointSpecificsFrame(parent=frame,id=996,pieces=pieces)
        objectpointspecsframe.Centre()
        objectpointspecsframe.Show()

    def onCTX_object_specifics_mesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1: pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
        objectmeshspecsframe=ObjectMeshSpecificsFrame(parent=frame,id=996,pieces=pieces)
        objectmeshspecsframe.Centre()
        objectmeshspecsframe.Show()
        
    def onCTX_object_specifics_triangular_mesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1: pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
        objecttrianglemeshspecsframe=ObjectTriangleMeshSpecificsFrame(parent=frame,id=996,pieces=pieces)
        objecttrianglemeshspecsframe.Centre()
        objecttrianglemeshspecsframe.Show()

    def onCTX_object_specifics_surf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1: pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
        objectsurfspecsframe=ObjectSurfSpecificsFrame(parent=frame,id=996,pieces=pieces)
        objectsurfspecsframe.Centre()
        objectsurfspecsframe.Show()
        
    def onCTX_definitions_point(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1: 
            pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
            t = 'object'
        else: t = 'variable'
        definitionspointframe=definitionsFrame(parent=frame,id=996,pieces=pieces,t=t,item=item)
        definitionspointframe.Centre()
        definitionspointframe.Show()
        
    def onCTX_labelme_point(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        compatible = self.see_compatible_objects(pieces)
        labelpointframe = CTXLabelPointFrame(parent=frame,id=996,pieces=pieces,compatible=compatible)
        labelpointframe.Centre()
        labelpointframe.Show()
        
    def onCTX_labelme_mesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        #compatible = self.see_compatible_objects(pieces)
        labelmeshframe = CTXLabelMeshFrame(parent=frame,id=996,pieces=pieces)#,compatible=compatible)
        labelmeshframe.Centre()
        labelmeshframe.Show()
        
    def onCTX_zscale(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        zscaleframe = CTXZscaleFrame(parent=frame,id=996,pieces=pieces)
        zscaleframe.Centre()
        zscaleframe.Show()
        
    def onCTX_definitions_mesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1: 
            pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
            t = 'object'
        else: t = 'variable'
        definitionsmeshframe=definitionsFrame(parent=frame,id=996,pieces=pieces,t=t,item=item)
        definitionsmeshframe.Centre()
        definitionsmeshframe.Show()
        
    def onCTX_definitions_triangular_mesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1: 
            pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
            t = 'object'
        else: t = 'variable'
        definitionstrianglemeshframe=definitionsFrame(parent=frame,id=996,pieces=pieces,t=t,item=item)
        definitionstrianglemeshframe.Centre()
        definitionstrianglemeshframe.Show()
        
    def onCTX_definitions_surf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1: 
            pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
            t = 'object'
        else: t = 'variable'
        definitionssurfframe=definitionsFrame(parent=frame,id=996,pieces=pieces,t=t,item=item)
        definitionssurfframe.Centre()
        definitionssurfframe.Show()
        
    def onCTX_definitions_data(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==1: 
            pieces.append(frame.object_manager.object_list[pieces[0]].get_variable_names()[0])
            t = 'object'
        else: t = 'variable'
        definitionsdataframe=definitionsFrame(parent=frame,id=996,pieces=pieces,t=t,item=item)
        definitionsdataframe.Centre()
        definitionsdataframe.Show()

    def on_delete_object(self,pieces):
        if len(pieces)==1:
            item = self.__get_item_by_label__(pieces[0])
            self.object_manager.remove_selection(pieces)
            if pieces[0] in self.mayavi_view.view_objects_names.keys():
                self.mayavi_view.remove_something([pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
            self.object_tree.Delete(item)
        else:
            #print 'ENTROU AQUI'
            items = self.__get_item_by_list__(pieces)
            if pieces[0] in self.mayavi_view.view_objects_names.keys():
                if self.mayavi_view.view_variables_names[pieces[0]] == pieces[1]:
                    self.remove_bold_from_selection(items,[pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                    self.mayavi_view.remove_something(pieces)
            if len(self.object_manager.object_list[pieces[0]].variable.keys())==1:
                self.object_tree.Delete(items[1])
                self.object_tree.Delete(items[0])
            else:
                self.object_tree.Delete(items[1])
            self.object_manager.remove_selection(pieces)
            
    def onCTX_delete_object(self,event):
        '''
        onCTX_delete_object(...)
            onCTX_delete_object(event)
            
            Removes the object from object manager and the software altogheter.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is in both interface (treectrl) and internal variables
            from object manager.
        
        See also
        --------
        None
        '''
        dlg=wx.MessageDialog(self,"Are you sure you want delete this object?","Permanently delete object...",wx.YES_NO|wx.ICON_EXCLAMATION)
        if dlg.ShowModal()==wx.ID_YES:
            item = self.object_tree.GetSelection()
            pieces = self.get_object_selection()
            if len(pieces)==1:
                self.object_manager.remove_selection(pieces)
                if pieces[0] in self.mayavi_view.view_objects_names.keys():
                    self.mayavi_view.remove_something([pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                self.object_tree.Delete(item)
            else:
                items = self.__get_item_by_list__(pieces)
                if pieces[0] in self.mayavi_view.view_objects_names.keys():
                    if self.mayavi_view.view_variables_names[pieces[0]] == pieces[1]:
                        self.remove_bold_from_selection(items,[pieces[0],self.mayavi_view.view_variables_names[pieces[0]]])
                        self.mayavi_view.remove_something(pieces)
                if len(self.object_manager.object_list[pieces[0]].variable.keys())==1:
                    self.object_tree.Delete(items[1])
                    self.object_tree.Delete(items[0])
                else:
                    self.object_tree.Delete(items[1])
                self.object_manager.remove_selection(pieces)
            
    def onCTX_export_object(self,event):
        '''
        onCTX_export_object(...)
            onCTX_export_object(event)
            
            Brings new frame made for exporting objects to file.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is in the visual interface.
        
        See also
        --------
        None
        '''
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        dlg=wx.FileDialog(self,"Export object to file (.npy to save as binary)...",style=wx.SAVE,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            exportobjectframe = ExportObjectFrame(parent=frame,id=996,pieces=pieces,name=dlg.GetPath())
            exportobjectframe.Centre()
            exportobjectframe.Show()
            
    def onCTXhistogram(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTXhistFrame = CTXhistogramFrame(parent = frame,id = 701,pieces=pieces)
            CTXhistFrame.Centre()
            CTXhistFrame.Show()
            
    def onCTXscatterplot(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTXscatterFrame = CTXScatterplotFrame(parent = frame,id = 702,pieces=pieces)
            CTXscatterFrame.Centre()
            CTXscatterFrame.Show()
            
    def onCTXstereonet(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTXstereonetFrame = CTXStereonetFrame(parent = frame,id = 702,pieces=pieces)
            CTXstereonetFrame.Centre()
            CTXstereonetFrame.Show()
            
    def onCTXboxplot(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTXboxFrame = CTXboxplotFrame(parent = frame,id = 703,pieces=pieces)
            CTXboxFrame.Centre()
            CTXboxFrame.Show()
            
    def onCTXlineplot(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTXlineFrame = CTXLineplotFrame(parent = frame,id = 702,pieces=pieces)
            CTXlineFrame.Centre()
            CTXlineFrame.Show()
            
    def onCTXdensityplot(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTXdensityFrame = CTXDensityplotFrame(parent = frame,id = 702,pieces=pieces)
            CTXdensityFrame.Centre()
            CTXdensityFrame.Show()
            
    def onCTXbubbleplot(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTXbubbleFrame = CTXBubbleplotFrame(parent = frame,id = 702,pieces=pieces)
            CTXbubbleFrame.Centre()
            CTXbubbleFrame.Show()
            
    def onCTXbubblenet(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTXbubblenetFrame = CTXBubblenetFrame(parent = frame,id = 702,pieces=pieces)
            CTXbubblenetFrame.Centre()
            CTXbubblenetFrame.Show()
            
    def onCTXfillplot(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTXfillFrame = CTXFillplotFrame(parent = frame,id = 702,pieces=pieces)
            CTXfillFrame.Centre()
            CTXfillFrame.Show()
            
    def onCTXdensitynet(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTXdensitynetFrame = CTXDensitynetFrame(parent = frame,id = 702,pieces=pieces)
            CTXdensitynetFrame.Centre()
            CTXdensitynetFrame.Show()
            
    def onCTX4wayscatter(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTX4wayscatterframe = CTX4wayscatterFrame(parent = frame,id = 702,pieces=pieces)
            CTX4wayscatterframe.Centre()
            CTX4wayscatterframe.Show()
            
    def onCTX3dscatter(self,event):
        if self.object_tree.GetSelection():
            pieces = self.get_object_selection()
            CTX3dscatterFrame = CTX3DscatterFrame(parent = frame,id = 702,pieces=pieces)
            CTX3dscatterFrame.Centre()
            CTX3dscatterFrame.Show()
            
    def onCTXvolumeviewmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if frame.mayavi_view.texture_interpolator == 'nearest_neighbour': txt_interp = 'nearest'
            else: txt_interp = 'linear'
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                pymaya.mesh_volume(frame.object_manager.call(pieces).data,frame.mayavi_view.general_opacity,txt_interp)
                
    def onCTXvolumeandslicesviewmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                if frame.mayavi_view.texture_interpolator == 'nearest_neighbour': txt_interp = 'nearest'
                else: txt_interp = 'linear'
                pymaya.mesh_volume_and_slices(frame.object_manager.call(pieces).data,frame.object_manager.call(pieces).mycolormap,frame.mayavi_view.general_opacity,txt_interp)
    
    def onCTXmesh_Ivariogram(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXmeshIvariogramframe = CTXmeshIvariogramFrame(parent = frame,id = 704,pieces=pieces)
                CTXmeshIvariogramframe.Centre()
                CTXmeshIvariogramframe.Show()    
    
    def onCTXmesh_variogram(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXmeshvariogramframe = CTXmeshvariogramFrame(parent = frame,id = 704,pieces=pieces)
                CTXmeshvariogramframe.Centre()
                CTXmeshvariogramframe.Show()
    
    def onCTXvariogram(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                if self.object_manager.object_list[pieces[0]].variable[pieces[1]].variogram_flag == False:
                    self.object_manager.object_list[pieces[0]].calculate_variogram(pieces[1])
                CTXpointvariogramFrame = CTXpointVariogramFrame(parent = frame,id = 704,pieces=pieces)
                CTXpointvariogramFrame.Centre()
                CTXpointvariogramFrame.Show()
                
    def onCTXivariogram(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                if self.object_manager.object_list[pieces[0]].variable[pieces[1]].ivariogram_flag == False:
                    self.object_manager.object_list[pieces[0]].calculate_ivariogram(pieces[1])
                CTXpointivariogramFrame = CTXpointIVariogramFrame(parent = frame,id = 704,pieces=pieces)
                CTXpointivariogramFrame.Centre()
                CTXpointivariogramFrame.Show()
                
    def onCTXgsi(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        inside = ['data']
        what_gives2 = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if len(frame.object_manager.object_list[i].get_numeric_variable_names())!=0:
                    what_gives2.append(i)
        if len(what_gives)>=1:
            if len(what_gives2)>=1:
                if len(pieces)==2:
                    if self.object_manager.object_type[pieces[0]] == 'point':
                        CTXgsiFrame = CTXGSIFrame(parent = frame,id = 705,pieces=pieces)
                        CTXgsiFrame.Centre()
                        CTXgsiFrame.Show()
            else:
                wx.MessageBox('You dont have a data object for wavelet.', 'Data missing', wx.OK | wx.ICON_INFORMATION)
        else:
            wx.MessageBox('You dont have a mesh object for seismic.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
    
    def onCTXkrig(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXkrigeFrame = CTXKrigingFrame(parent = frame,id = 706,pieces=pieces)
                CTXkrigeFrame.Centre()
                CTXkrigeFrame.Show()
    
    def onCTXdss(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXdssFrame = CTXDSSFrame(parent = frame,id = 706,pieces=pieces)
                CTXdssFrame.Centre()
                CTXdssFrame.Show()
                
    def onCTXsgs(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXsgsFrame = CTXSGSFrame(parent = frame,id = 706,pieces=pieces)
                CTXsgsFrame.Centre()
                CTXsgsFrame.Show()
                
    def onCTXgridinterpolation(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXgridinterpolationframe = CTXgridinterpolationFrame(parent = frame,id = 706,pieces=pieces)
                CTXgridinterpolationframe.Centre()
                CTXgridinterpolationframe.Show()
                
    def onCTXsis(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXsisFrame = CTXSISFrame(parent = frame,id = 706,pieces=pieces)
                CTXsisFrame.Centre()
                CTXsisFrame.Show()
                
    def onCTXmirrormesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXmirrormeshFrame = CTXmirrorMeshFrame(parent = frame,id = 707,pieces=pieces)
                CTXmirrormeshFrame.Centre()
                CTXmirrormeshFrame.Show()
                
    def onCTXcategorizemesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXcategorizemeshFrame = CTXcategorizeMeshFrame(parent = frame,id = 708,pieces=pieces)
                CTXcategorizemeshFrame.Centre()
                CTXcategorizemeshFrame.Show()
                
    def onCTXcropmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXcropmeshFrame = CTXcropMeshFrame(parent = frame,id = 709,pieces=pieces)
                CTXcropmeshFrame.Centre()
                CTXcropmeshFrame.Show()
                
    def onCTXduplicatemesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXduplicatemeshFrame = CTXduplicateMeshFrame(parent = frame,id = 710,pieces=pieces)
                CTXduplicatemeshFrame.Centre()
                CTXduplicatemeshFrame.Show()
                
    def onCTXlineartransformmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXlineartransformmeshFrame = CTXlineartransformMeshFrame(parent = frame,id = 711,pieces=pieces)
                CTXlineartransformmeshFrame.Centre()
                CTXlineartransformmeshFrame.Show()
                
    def onCTXmirrorpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXmirrorpointFrame = CTXmirrorPointFrame(parent = frame,id = 707,pieces=pieces)
                CTXmirrorpointFrame.Centre()
                CTXmirrorpointFrame.Show()
                
    def onCTXcategorizepoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXcategorizepointFrame = CTXcategorizePointFrame(parent = frame,id = 708,pieces=pieces)
                CTXcategorizepointFrame.Centre()
                CTXcategorizepointFrame.Show()
                
    def onCTXcroppoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXcroppointFrame = CTXcropPointFrame(parent = frame,id = 709,pieces=pieces)
                CTXcroppointFrame.Centre()
                CTXcroppointFrame.Show()
                
    def onCTXduplicatepoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXduplicatepointFrame = CTXduplicatePointFrame(parent = frame,id = 710,pieces=pieces)
                CTXduplicatepointFrame.Centre()
                CTXduplicatepointFrame.Show()
                
    def onCTXlineartransformpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXlineartransformpointFrame = CTXlineartransformPointFrame(parent = frame,id = 711,pieces=pieces)
                CTXlineartransformpointFrame.Centre()
                CTXlineartransformpointFrame.Show()
                
    def onCTXmirrorsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXmirrorsurfFrame = CTXmirrorSurfFrame(parent = frame,id = 707,pieces=pieces)
                CTXmirrorsurfFrame.Centre()
                CTXmirrorsurfFrame.Show()
                
    def onCTXcategorizesurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXcategorizesurfFrame = CTXcategorizeSurfFrame(parent = frame,id = 708,pieces=pieces)
                CTXcategorizesurfFrame.Centre()
                CTXcategorizesurfFrame.Show()
                
    def onCTXcropsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXcropsurfFrame = CTXcropSurfFrame(parent = frame,id = 709,pieces=pieces)
                CTXcropsurfFrame.Centre()
                CTXcropsurfFrame.Show()
                
    def onCTXduplicatesurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXduplicatesurfFrame = CTXduplicateSurfFrame(parent = frame,id = 710,pieces=pieces)
                CTXduplicatesurfFrame.Centre()
                CTXduplicatesurfFrame.Show()
                
    def onCTXlineartransformsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXlineartransformsurfFrame = CTXlineartransformSurfFrame(parent = frame,id = 711,pieces=pieces)
                CTXlineartransformsurfFrame.Centre()
                CTXlineartransformsurfFrame.Show()
                
    #######
    def onCTXmirrordata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'data':
                CTXmirrordataFrame = CTXmirrorDataFrame(parent = frame,id = 707,pieces=pieces)
                CTXmirrordataFrame.Centre()
                CTXmirrordataFrame.Show()
                
    def onCTXcategorizedata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'data':
                CTXcategorizedataFrame = CTXcategorizeDataFrame(parent = frame,id = 708,pieces=pieces)
                CTXcategorizedataFrame.Centre()
                CTXcategorizedataFrame.Show()
                
    def onCTXduplicatedata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'data':
                CTXduplicatedataFrame = CTXduplicateDataFrame(parent = frame,id = 710,pieces=pieces)
                CTXduplicatedataFrame.Centre()
                CTXduplicatedataFrame.Show()
                
    def onCTXlineartransformdata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'data':
                CTXlineartransformdataFrame = CTXlineartransformDataFrame(parent = frame,id = 711,pieces=pieces)
                CTXlineartransformdataFrame.Centre()
                CTXlineartransformdataFrame.Show()
                
    ########
                
    def onCTXpicklemesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXpicklemeshFrame = CTXpickleMeshFrame(parent = frame,id = 712,pieces=pieces)
                CTXpicklemeshFrame.Centre()
                CTXpicklemeshFrame.Show()
                
    def onCTXrepeatmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXrepeatmeshFrame = CTXrepeatMeshFrame(parent = frame,id = 712,pieces=pieces)
                CTXrepeatmeshFrame.Centre()
                CTXrepeatmeshFrame.Show()
                
    def onCTXexpandmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXexpandmeshFrame = CTXexpandMeshFrame(parent = frame,id = 713,pieces=pieces)
                CTXexpandmeshFrame.Centre()
                CTXexpandmeshFrame.Show()
                
    def onCTXtilemesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXtilemeshFrame = CTXtileMeshFrame(parent = frame,id = 714,pieces=pieces)
                CTXtilemeshFrame.Centre()
                CTXtilemeshFrame.Show()
                
    def onCTXtransposemesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXtransposemeshFrame = CTXtransposeMeshFrame(parent = frame,id = 715,pieces=pieces)
                CTXtransposemeshFrame.Centre()
                CTXtransposemeshFrame.Show()
                
    def onCTXshiftmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXshiftmeshFrame = CTXshiftMeshFrame(parent = frame,id = 716,pieces=pieces)
                CTXshiftmeshFrame.Centre()
                CTXshiftmeshFrame.Show()
                
    def onCTXflipxmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXflipxmeshFrame = CTXflipxMeshFrame(parent = frame,id = 717,pieces=pieces)
                CTXflipxmeshFrame.Centre()
                CTXflipxmeshFrame.Show()
                
    def onCTXflipymesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXflipymeshFrame = CTXflipyMeshFrame(parent = frame,id = 718,pieces=pieces)
                CTXflipymeshFrame.Centre()
                CTXflipymeshFrame.Show()

    def onCTXrotatemesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXrotatemeshFrame = CTXrotateMeshFrame(parent = frame,id = 718,pieces=pieces)
                CTXrotatemeshFrame.Centre()
                CTXrotatemeshFrame.Show()
                
    def onCTXswapmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXswapmeshFrame = CTXswapMeshFrame(parent = frame,id = 719,pieces=pieces)
                CTXswapmeshFrame.Centre()
                CTXswapmeshFrame.Show()
                
    def onCTXsplitmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXsplitmeshFrame = CTXsplitMeshFrame(parent = frame,id = 719,pieces=pieces)
                CTXsplitmeshFrame.Centre()
                CTXsplitmeshFrame.Show()
                
    def onCTXpadmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXpadmeshFrame = CTXpadMeshFrame(parent = frame,id = 719,pieces=pieces)
                CTXpadmeshFrame.Centre()
                CTXpadmeshFrame.Show()
                
    def onCTXtranslationmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXtranslationmeshFrame = CTXtranslationMeshFrame(parent = frame,id = 719,pieces=pieces)
                CTXtranslationmeshFrame.Centre()
                CTXtranslationmeshFrame.Show()
                
    def onCTXpicklepoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXpicklepointFrame = CTXpicklePointFrame(parent = frame,id = 712,pieces=pieces)
                CTXpicklepointFrame.Centre()
                CTXpicklepointFrame.Show()
                
    def onCTXrepeatpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXrepeatpointFrame = CTXrepeatPointFrame(parent = frame,id = 712,pieces=pieces)
                CTXrepeatpointFrame.Centre()
                CTXrepeatpointFrame.Show()
                
    #def onCTXtilepoint(self,event):
    #    item = self.object_tree.GetSelection()
    #    pieces = self.get_object_selection()
    #    if len(pieces)==2:
    #        if self.object_manager.object_type[pieces[0]] == 'point':
    #            CTXtilepointFrame = CTXtilePointFrame(parent = frame,id = 714,pieces=pieces)
    #            CTXtilepointFrame.Centre()
    #            CTXtilepointFrame.Show()
                
    #def onCTXshiftpoint(self,event):
    #    item = self.object_tree.GetSelection()
    #    pieces = self.get_object_selection()
    #    if len(pieces)==2:
    #        if self.object_manager.object_type[pieces[0]] == 'point':
    #            CTXshiftpointFrame = CTXshiftPointFrame(parent = frame,id = 716,pieces=pieces)
    #            CTXshiftpointFrame.Centre()
    #            CTXshiftpointFrame.Show()
                
    def onCTXflipxpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXflipxpointFrame = CTXflipxPointFrame(parent = frame,id = 717,pieces=pieces)
                CTXflipxpointFrame.Centre()
                CTXflipxpointFrame.Show()
                
    def onCTXflipypoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXflipypointFrame = CTXflipyPointFrame(parent = frame,id = 718,pieces=pieces)
                CTXflipypointFrame.Centre()
                CTXflipypointFrame.Show()
                
    def onCTXflipzpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXflipzpointFrame = CTXflipzPointFrame(parent = frame,id = 718,pieces=pieces)
                CTXflipzpointFrame.Centre()
                CTXflipzpointFrame.Show()
                
    def onCTXtranslationpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXtranslationpointFrame = CTXtranslationPointFrame(parent = frame,id = 719,pieces=pieces)
                CTXtranslationpointFrame.Centre()
                CTXtranslationpointFrame.Show()
                
    def onCTXpicklesurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXpicklesurfFrame = CTXpickleSurfFrame(parent = frame,id = 712,pieces=pieces)
                CTXpicklesurfFrame.Centre()
                CTXpicklesurfFrame.Show()
                
    def onCTXrepeatsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXrepeatsurfFrame = CTXrepeatSurfFrame(parent = frame,id = 712,pieces=pieces)
                CTXrepeatsurfFrame.Centre()
                CTXrepeatsurfFrame.Show()
                
    def onCTXexpandsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXexpandsurfFrame = CTXexpandSurfFrame(parent = frame,id = 713,pieces=pieces)
                CTXexpandsurfFrame.Centre()
                CTXexpandsurfFrame.Show()
                
    def onCTXtilesurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXtilesurfFrame = CTXtileSurfFrame(parent = frame,id = 714,pieces=pieces)
                CTXtilesurfFrame.Centre()
                CTXtilesurfFrame.Show()
                
    def onCTXtransposesurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXtransposesurfFrame = CTXtransposeSurfFrame(parent = frame,id = 715,pieces=pieces)
                CTXtransposesurfFrame.Centre()
                CTXtransposesurfFrame.Show()
                
    def onCTXshiftsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXshiftsurfFrame = CTXshiftSurfFrame(parent = frame,id = 716,pieces=pieces)
                CTXshiftsurfFrame.Centre()
                CTXshiftsurfFrame.Show()
                
    def onCTXflipxsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXflipxsurfFrame = CTXflipxSurfFrame(parent = frame,id = 717,pieces=pieces)
                CTXflipxsurfFrame.Centre()
                CTXflipxsurfFrame.Show()
                
    def onCTXflipysurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXflipysurfFrame = CTXflipySurfFrame(parent = frame,id = 718,pieces=pieces)
                CTXflipysurfFrame.Centre()
                CTXflipysurfFrame.Show()

    def onCTXrotatesurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXrotatesurfFrame = CTXrotateSurfFrame(parent = frame,id = 718,pieces=pieces)
                CTXrotatesurfFrame.Centre()
                CTXrotatesurfFrame.Show()
                
    def onCTXswapsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXswapsurfFrame = CTXswapSurfFrame(parent = frame,id = 719,pieces=pieces)
                CTXswapsurfFrame.Centre()
                CTXswapsurfFrame.Show()
                
    def onCTXtranslationsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXtranslationsurfFrame = CTXtranslationSurfFrame(parent = frame,id = 719,pieces=pieces)
                CTXtranslationsurfFrame.Centre()
                CTXtranslationsurfFrame.Show()            
                
    def check_what_goes(self,inside):
        #inside = ['point','mesh','data','surf']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        return what_gives
                
    def see_compatible_objects(self,pieces):
        what_goes = []
        if self.object_manager.object_type[pieces[0]]=='mesh':
            what_gives = self.check_what_goes(['mesh'])
            for i in xrange(len(what_gives)):
                if not np.any(np.array(self.object_manager.call_top(pieces).blocks)-np.array(self.object_manager.call_top([what_gives[i]]).blocks)):
                    #print np.all(np.array(self.object_manager.call_top(pieces).blocks)-np.array(self.object_manager.call_top([what_gives[i]]).blocks))                    
                    what_goes.append(what_gives[i])
        elif self.object_manager.object_type[pieces[0]]=='surf':
            what_gives = self.check_what_goes(['surf'])
            for i in xrange(len(what_gives)):
                if not np.any(np.array(self.object_manager.call_top(pieces).blocks)-np.array(self.object_manager.call_top([what_gives[i]]).blocks)):
                    what_goes.append(what_gives[i])
        elif self.object_manager.object_type[pieces[0]]=='point':
            what_gives = self.check_what_goes(['point','data'])
            for i in xrange(len(what_gives)):
                if (self.object_manager.call_top(pieces).x.shape[0]-self.object_manager.call_top([what_gives[i]]).x.shape[0])==0:
                    what_goes.append(what_gives[i])
        elif self.object_manager.object_type[pieces[0]]=='data':
            what_gives = self.check_what_goes(['point','data'])
            for i in xrange(len(what_gives)):
                if (self.object_manager.call_top(pieces).x.shape[0]-self.object_manager.call_top([what_gives[i]]).x.shape[0])==0:
                    what_goes.append(what_gives[i])
        return what_goes
                
    def onCTXconstantcalculatormesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXconstantcalculatormeshFrame = CTXconstantcalculatorMeshFrame(parent = frame,id = 719,pieces=pieces)
                CTXconstantcalculatormeshFrame.Centre()
                CTXconstantcalculatormeshFrame.Show()
                
    def onCTXobjectcalculatormesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXobjectcalculatormeshFrame = CTXobjectcalculatorMeshFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXobjectcalculatormeshFrame.Centre()
                    CTXobjectcalculatormeshFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to calculate from.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
    
    def onCTXglobalcalculatormesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXglobalcalculatormeshFrame = CTXglobalcalculatorMeshFrame(parent = frame,id = 719,pieces=pieces)
                CTXglobalcalculatormeshFrame.Centre()
                CTXglobalcalculatormeshFrame.Show()
            
    def onCTXconstantcalculatorsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXconstantcalculatorsurfFrame = CTXconstantcalculatorSurfFrame(parent = frame,id = 719,pieces=pieces)
                CTXconstantcalculatorsurfFrame.Centre()
                CTXconstantcalculatorsurfFrame.Show()
                
    def onCTXobjectcalculatorsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXobjectcalculatorsurfFrame = CTXobjectcalculatorSurfFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXobjectcalculatorsurfFrame.Centre()
                    CTXobjectcalculatorsurfFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to calculate from.', 'Surface missing', wx.OK | wx.ICON_INFORMATION)
                    
    def onCTXglobalcalculatorsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXglobalcalculatorsurfFrame = CTXglobalcalculatorSurfFrame(parent = frame,id = 719,pieces=pieces)
                CTXglobalcalculatorsurfFrame.Centre()
                CTXglobalcalculatorsurfFrame.Show()
    
    def onCTXconstantcalculatorpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXconstantcalculatorpointFrame = CTXconstantcalculatorPointFrame(parent = frame,id = 719,pieces=pieces)
                CTXconstantcalculatorpointFrame.Centre()
                CTXconstantcalculatorpointFrame.Show()
                
    def onCTXobjectcalculatorpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXobjectcalculatorpointFrame = CTXobjectcalculatorPointFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXobjectcalculatorpointFrame.Centre()
                    CTXobjectcalculatorpointFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to calculate from.', 'Point missing', wx.OK | wx.ICON_INFORMATION)
    
    def onCTXglobalcalculatorpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXglobalcalculatorpointFrame = CTXglobalcalculatorPointFrame(parent = frame,id = 719,pieces=pieces)
                CTXglobalcalculatorpointFrame.Centre()
                CTXglobalcalculatorpointFrame.Show()
                
    def onCTXconstantcalculatordata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'data':
                CTXconstantcalculatordataFrame = CTXconstantcalculatorDataFrame(parent = frame,id = 719,pieces=pieces)
                CTXconstantcalculatordataFrame.Centre()
                CTXconstantcalculatordataFrame.Show()
                
    def onCTXobjectcalculatordata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'data':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXobjectcalculatordataFrame = CTXobjectcalculatorDataFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXobjectcalculatordataFrame.Centre()
                    CTXobjectcalculatordataFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to calculate from.', 'Point missing', wx.OK | wx.ICON_INFORMATION)
    
    def onCTXglobalcalculatordata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'data':
                CTXglobalcalculatordataFrame = CTXglobalcalculatorDataFrame(parent = frame,id = 719,pieces=pieces)
                CTXglobalcalculatordataFrame.Centre()
                CTXglobalcalculatordataFrame.Show()
                
    def onCTXjoinmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXjoinmeshFrame = CTXjoinMeshFrame(parent = frame,id = 719,pieces=pieces)
                CTXjoinmeshFrame.Centre()
                CTXjoinmeshFrame.Show()
                
    def onCTXjoinsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXjoinsurfFrame = CTXjoinSurfFrame(parent = frame,id = 719,pieces=pieces)
                CTXjoinsurfFrame.Centre()
                CTXjoinsurfFrame.Show()
                
    def onCTXjoinpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXjoinpointFrame = CTXjoinPointFrame(parent = frame,id = 719,pieces=pieces)
                CTXjoinpointFrame.Centre()
                CTXjoinpointFrame.Show()
                
    def onCTXjoindata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'data':
                CTXjoindataFrame = CTXjoinDataFrame(parent = frame,id = 719,pieces=pieces)
                CTXjoindataFrame.Centre()
                CTXjoindataFrame.Show()
        
    def onCTXcopymesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXcopymeshFrame = CTXcopyMeshFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXcopymeshFrame.Centre()
                    CTXcopymeshFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to copy to.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
                    
    def onCTXcutmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXcutmeshFrame = CTXcutMeshFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXcutmeshFrame.Centre()
                    CTXcutmeshFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to cut to.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
                    
    def onCTXcopysurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXcopysurfFrame = CTXcopySurfFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXcopysurfFrame.Centre()
                    CTXcopysurfFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to copy to.', 'Surface missing', wx.OK | wx.ICON_INFORMATION)
                    
    def onCTXcutsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXcutsurfFrame = CTXcutSurfFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXcutsurfFrame.Centre()
                    CTXcutsurfFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to cut to.', 'Surface missing', wx.OK | wx.ICON_INFORMATION)
   
    def onCTXcopypoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXcopypointFrame = CTXcopyPointFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXcopypointFrame.Centre()
                    CTXcopypointFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to copy to.', 'Point missing', wx.OK | wx.ICON_INFORMATION)
                    
    def onCTXcutpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXcutpointFrame = CTXcutPointFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXcutpointFrame.Centre()
                    CTXcutpointFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to cut to.', 'Point missing', wx.OK | wx.ICON_INFORMATION)
                    
    def onCTXcopydata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'data':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXcopydataFrame = CTXcopyDataFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXcopydataFrame.Centre()
                    CTXcopydataFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to copy to.', 'Data missing', wx.OK | wx.ICON_INFORMATION)
                    
    def onCTXcutdata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'data':
                compatible = self.see_compatible_objects(pieces)
                if len(compatible)>0:
                    CTXcutdataFrame = CTXcutDataFrame(parent = frame,id = 719,pieces=pieces,compatible=compatible)
                    CTXcutdataFrame.Centre()
                    CTXcutdataFrame.Show()
                else:
                    wx.MessageBox('There does not seem to exist compatible objects to cut to.', 'Point missing', wx.OK | wx.ICON_INFORMATION)
                    
    def onCTXaboveorbelowsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[pieces[0]].blocks[0]-frame.object_manager.object_list[i].blocks[0]==0 and frame.object_manager.object_list[pieces[0]].blocks[1]-frame.object_manager.object_list[i].blocks[1]==0:
                    what_gives.append(i)
        if len(what_gives)!=0:
            if len(pieces)==2:
                if self.object_manager.object_type[pieces[0]] == 'surf':
                    CTXaboveorbelowsurfFrame = CTXaboveorbelowSurfFrame(parent = frame,id = 719,pieces=pieces)
                    CTXaboveorbelowsurfFrame.Centre()
                    CTXaboveorbelowsurfFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible mesh objects to procced with this operation.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
            
    def onCTXinbetweensurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[pieces[0]].blocks[0]-frame.object_manager.object_list[i].blocks[0]==0 and frame.object_manager.object_list[pieces[0]].blocks[1]-frame.object_manager.object_list[i].blocks[1]==0:
                    what_gives.append(i)
        if len(what_gives)!=0:
            if len(pieces)==2:
                if self.object_manager.object_type[pieces[0]] == 'surf':
                    CTXinbetweensurfFrame = CTXinbetweenSurfFrame(parent = frame,id = 719,pieces=pieces)
                    CTXinbetweensurfFrame.Centre()
                    CTXinbetweensurfFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible mesh objects to procced with this operation.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
            
    def onCTXflattensurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[pieces[0]].blocks[0]-frame.object_manager.object_list[i].blocks[0]==0 and frame.object_manager.object_list[pieces[0]].blocks[1]-frame.object_manager.object_list[i].blocks[1]==0:
                    what_gives.append(i)
        if len(what_gives)!=0:
            if len(pieces)==2:
                if self.object_manager.object_type[pieces[0]] == 'surf':
                    CTXflattensurfFrame = CTXflattenSurfFrame(parent = frame,id = 719,pieces=pieces)
                    CTXflattensurfFrame.Centre()
                    CTXflattensurfFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible mesh objects to procced with this operation.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
    
    def onCTXmap2surf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[pieces[0]].blocks[0]-frame.object_manager.object_list[i].blocks[0]==0 and frame.object_manager.object_list[pieces[0]].blocks[1]-frame.object_manager.object_list[i].blocks[1]==0 and frame.object_manager.object_list[pieces[0]].blocks[2]==1:
                    what_gives.append(i)
        if len(what_gives)!=0:
            if len(pieces)==2:
                if self.object_manager.object_type[pieces[0]] == 'surf':
                    CTXmap2surfFrame = CTXmap2SurfFrame(parent = frame,id = 719,pieces=pieces)
                    CTXmap2surfFrame.Centre()
                    CTXmap2surfFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible mesh objects to procced with this operation.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
    
    def onCTXflattenpointsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['point']
        what_gives = []
        selection = pieces
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                selection2 = [i,'any']
                x = self.object_manager.call_top(selection2).x
                y = self.object_manager.call_top(selection2).y
                z = self.object_manager.call_top(selection2).z
                ind = np.where((x>=self.object_manager.call_top(selection).first[0]) & (x<=self.object_manager.call_top(selection).first[0]+self.object_manager.call_top(selection).size[0]*self.object_manager.call_top(selection).blocks[0]) & (y>=self.object_manager.call_top(selection).first[1]) & (y<=self.object_manager.call_top(selection).first[1]+self.object_manager.call_top(selection).size[1]*self.object_manager.call_top(selection).blocks[1]))
                if len(ind[0])>0:                
                    what_gives.append(i)
        if len(what_gives)!=0:
            if len(pieces)==2:
                if self.object_manager.object_type[pieces[0]] == 'surf':
                    CTXflattenpointsurfFrame = CTXflattenpointSurfFrame(parent = frame,id = 719,pieces=pieces)
                    CTXflattenpointsurfFrame.Centre()
                    CTXflattenpointsurfFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible point objects to procced with this operation.', 'Point missing', wx.OK | wx.ICON_INFORMATION)
            
    def onCTXunflattenpointsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['point']
        what_gives = []
        selection = pieces
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                selection2 = [i,'any']
                x = self.object_manager.call_top(selection2).x
                y = self.object_manager.call_top(selection2).y
                z = self.object_manager.call_top(selection2).z
                ind = np.where((x>=self.object_manager.call_top(selection).first[0]) & (x<=self.object_manager.call_top(selection).first[0]+self.object_manager.call_top(selection).size[0]*self.object_manager.call_top(selection).blocks[0]) & (y>=self.object_manager.call_top(selection).first[1]) & (y<=self.object_manager.call_top(selection).first[1]+self.object_manager.call_top(selection).size[1]*self.object_manager.call_top(selection).blocks[1]))
                if len(ind[0])>0:                
                    what_gives.append(i)
        if len(what_gives)!=0:
            if len(pieces)==2:
                if self.object_manager.object_type[pieces[0]] == 'surf':
                    CTXunflattenpointsurfFrame = CTXunflattenpointSurfFrame(parent = frame,id = 719,pieces=pieces)
                    CTXunflattenpointsurfFrame.Centre()
                    CTXunflattenpointsurfFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible point objects to procced with this operation.', 'Point missing', wx.OK | wx.ICON_INFORMATION)
            
    def onCTXunflattensurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[pieces[0]].blocks[0]-frame.object_manager.object_list[i].blocks[0]==0 and frame.object_manager.object_list[pieces[0]].blocks[1]-frame.object_manager.object_list[i].blocks[1]==0:
                    what_gives.append(i)
        if len(what_gives)!=0:
            if len(pieces)==2:
                if self.object_manager.object_type[pieces[0]] == 'surf':
                    CTXunflattensurfFrame = CTXunflattenSurfFrame(parent = frame,id = 719,pieces=pieces)
                    CTXunflattensurfFrame.Centre()
                    CTXunflattensurfFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible mesh objects to procced with this operation.', 'Mesh missing', wx.OK | wx.ICON_INFORMATION)
    
    def onCTXcreateshapesurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                #CTXcreateshapesurfFrame = CTXcreateshapeSurfFrame(parent = frame,id = 719,pieces=pieces)
                #CTXcreateshapesurfFrame.Centre()
                #CTXcreateshapesurfFrame.Show()
                shapes_list = pympl.create_shape_on_surface(self.object_manager.call(pieces).data,self.general_cmap)
                dtype = ['float32','float32','float32']
                vtype = ['continuous','continuous','continuous']
                for i in xrange(len(shapes_list)):
                    a = shapes_list[i].astype('float32')
                    a[:,0] = a[:,0]*self.object_manager.call_top(pieces).size[0]+self.object_manager.call_top(pieces).first[0]
                    a[:,1] = a[:,1]*self.object_manager.call_top(pieces).size[1]+self.object_manager.call_top(pieces).first[1]
                    local_data = np.hstack((a,self.object_manager.call(pieces).data[shapes_list[i][:,0],shapes_list[i][:,1],0].reshape((shapes_list[i].shape[0],1)).astype('float32')))
                    name = 'Shape_'+str(i)+'_for_'+pieces[1]
                    if name in self.object_manager.object_name:
                        name = self.object_manager.do_newname_from_name(name)                    
                    self.object_manager.add_data_object(None,name,['X','Y','Z'],local_data,dtype,vtype)   
                    frame.update_last_object_list()
    
    def onCTXshovelsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if (frame.object_manager.object_list[i].get_numeric_variable_names())>=2:
                    what_gives.append(i)
        if len(what_gives)!=0:
            if len(pieces)==2:
                if self.object_manager.object_type[pieces[0]] == 'surf':
                    CTXshovelsurfFrame = CTXshovelSurfFrame(parent = frame,id = 719,pieces=pieces)
                    CTXshovelsurfFrame.Centre()
                    CTXshovelsurfFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible data objects to procced with this operation.', 'Data missing', wx.OK | wx.ICON_INFORMATION)
            
    def onCTXbalancedshovelsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['data']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if (frame.object_manager.object_list[i].get_numeric_variable_names())>=2:
                    what_gives.append(i)
        if len(what_gives)!=0:
            if len(pieces)==2:
                if self.object_manager.object_type[pieces[0]] == 'surf':
                    CTXbalancedshovelsurfFrame = CTXbalancedshovelSurfFrame(parent = frame,id = 719,pieces=pieces)
                    CTXbalancedshovelsurfFrame.Centre()
                    CTXbalancedshovelsurfFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible data objects to procced with this operation.', 'Data missing', wx.OK | wx.ICON_INFORMATION)
            
    def onCTXslopemapsurf(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'surf':
                CTXslopemapsurfFrame = CTXslopemapSurfFrame(parent = frame,id = 719,pieces=pieces)
                CTXslopemapsurfFrame.Centre()
                CTXslopemapsurfFrame.Show()
                
    def onCTXattributemesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXattributemeshFrame = CTXattributeMeshFrame(parent = frame,id = 711,pieces=pieces)
                CTXattributemeshFrame.Centre()
                CTXattributemeshFrame.Show()
                
    def onCTXinterpretationmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXinterpretationmeshFrame = CTXinterpretationMeshFrame(parent = frame,id = 711,pieces=pieces)
                CTXinterpretationmeshFrame.Centre()
                CTXinterpretationmeshFrame.Show()
                
    def onCTXcreatepointsetmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            slice_positions = self.mayavi_view.get_slice_positions(pieces)
            #print slice_positions
            shapes_list = pympl.create_samples_on_mesh(self.object_manager.call(pieces).data,self.general_cmap,int(slice_positions[2]))
            if len(shapes_list)>0:
                frame.object_manager.related_create_point_set_mesh(pieces,shapes_list)
                frame.update_last_object_list()
                
    def onCTXpointsectionviewmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            slice_positions = self.mayavi_view.get_slice_positions(pieces)
            shapes_list = pympl.create_section_on_mesh(self.object_manager.call(pieces).data,self.general_cmap,int(slice_positions[2]))
            #if len(shapes_list)>2:
            #    frame.object_manager.related_create_point_set_mesh(pieces,shapes_list)
            #    frame.update_last_object_list()
            
    def onCTXgenerateimagesetmesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            CTXimagesetmeshFrame = CTXimagesetMeshFrame(parent = frame,id = 711,pieces=pieces)
            CTXimagesetmeshFrame.Centre()
            CTXimagesetmeshFrame.Show()
            
    def onCTXupscalemesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            CTXupscalemeshFrame = CTXupscaleMeshFrame(parent = frame,id = 711,pieces=pieces)
            CTXupscalemeshFrame.Centre()
            CTXupscalemeshFrame.Show()
            
    def onCTXconvert2world(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                if frame.object_manager.object_list[i].sphere_flag:
                    what_gives.append(i)
        if len(what_gives)!=0:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXconvert2worldframe = CTXconvert2worldFrame(parent = frame,id = 719,pieces=pieces,compatible=what_gives)
                CTXconvert2worldframe.Centre()
                CTXconvert2worldframe.Show()
        else:
            wx.MessageBox('There does not seem to exist mesh objects with a world referential calculated to procced with this operation.', 'Point and data missing', wx.OK | wx.ICON_INFORMATION)
            
    def onCTXmap2quiver(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['point','data']
        what_gives = self.see_compatible_objects(pieces)
        if len(what_gives)!=0:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXmap2quiverFrame = CTXmap2QuiverFrame(parent = frame,id = 719,pieces=pieces,compatible=what_gives)
                CTXmap2quiverFrame.Centre()
                CTXmap2quiverFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible data or point objects to procced with this operation.', 'Point and data missing', wx.OK | wx.ICON_INFORMATION)
            
    def onCTXmap2graph(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        #inside = ['point','data']
        """
        dlg=wx.FileDialog(self,"Input surface file...",style=wx.OPEN,wildcard='*.*')
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            if path[-4:]=='.npy':
                gdata = np.load(path).astype('int32')
            else:
                gdata = np.loadtxt(path,dtype='int32')
            flag = frame.object_manager.call(pieces).include_graph_data(gdata)
            if flag == True:
                frame.object_manager.call(pieces).stream_flag = False
                frame.object_manager.call(pieces).quiver_flag = False
                frame.object_manager.call(pieces).fracture_flag = False
                frame.object_manager.call(pieces).graph_flag  = True
            else:
        """
        if self.object_manager.object_type[pieces[0]] == 'point':
            CTXmap2graphFrame = CTXmap2GraphFrame(parent = frame,id = 719,pieces=pieces)
            CTXmap2graphFrame.Centre()
            CTXmap2graphFrame.Show()           
            #wx.MessageBox('There does not seem to exist compatible data or point objects to procced with this operation.', 'Point and data missing', wx.OK | wx.ICON_INFORMATION)
            
    def onCTXmap2fracture(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['point','data']
        what_gives = self.see_compatible_objects(pieces)
        if len(what_gives)!=0:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXmap2fractureFrame = CTXmap2FractureFrame(parent = frame,id = 719,pieces=pieces,compatible=what_gives)
                CTXmap2fractureFrame.Centre()
                CTXmap2fractureFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible data or point objects to procced with this operation.', 'Point and data missing', wx.OK | wx.ICON_INFORMATION)
    
    def onCTXmap2streamline(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if self.object_manager.object_type[pieces[0]] == 'point':
            if frame.object_manager.call(pieces).stream_flag:
                frame.object_manager.call(pieces).stream_flag = False
                frame.onreview_object(pieces)
            else:
                frame.object_manager.call(pieces).stream_flag = True
                frame.object_manager.call(pieces).quiver_flag = False
                frame.object_manager.call(pieces).fracture_flag = False
                frame.object_manager.call(pieces).graph_flag  = False
                frame.onreview_object(pieces)
                
    def onCTXaddfrommeshpoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['mesh']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        if len(what_gives)!=0:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXaddfrommeshpointFrame = CTXaddfrommeshPointFrame(parent = frame,id = 719,pieces=pieces,compatible=what_gives)
                CTXaddfrommeshpointFrame.Centre()
                CTXaddfrommeshpointFrame.Show()
        
    def onCTXconvert2datapoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'point':
                CTXconvert2datapointFrame = CTXconvert2dataPointFrame(parent = frame,id = 719,pieces=pieces)
                CTXconvert2datapointFrame.Centre()
                CTXconvert2datapointFrame.Show()
                
    def onCTXfullconvert2datapoint(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if self.object_manager.object_type[pieces[0]] == 'point':
            CTXfullconvert2datapointFrame = CTXfullconvert2dataPointFrame(parent = frame,id = 719,pieces=pieces)
            CTXfullconvert2datapointFrame.Centre()
            CTXfullconvert2datapointFrame.Show()
            
    def onCTXconvert2pointdata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'data':
                CTXconvert2pointdataFrame = CTXconvert2pointDataFrame(parent = frame,id = 719,pieces=pieces)
                CTXconvert2pointdataFrame.Centre()
                CTXconvert2pointdataFrame.Show()
                
    def onCTXfullconvert2pointdata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if self.object_manager.object_type[pieces[0]] == 'data':
            CTXfullconvert2pointdataFrame = CTXfullconvert2pointDataFrame(parent = frame,id = 719,pieces=pieces)
            CTXfullconvert2pointdataFrame.Centre()
            CTXfullconvert2pointdataFrame.Show()
            
    def onCTXconvert2datamesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if len(pieces)==2:
            if self.object_manager.object_type[pieces[0]] == 'mesh':
                CTXconvert2datameshFrame = CTXconvert2dataMeshFrame(parent = frame,id = 719,pieces=pieces)
                CTXconvert2datameshFrame.Centre()
                CTXconvert2datameshFrame.Show()
                
    def onCTXfullconvert2datamesh(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if self.object_manager.object_type[pieces[0]] == 'mesh':
            CTXfullconvert2datameshFrame = CTXfullconvert2dataMeshFrame(parent = frame,id = 719,pieces=pieces)
            CTXfullconvert2datameshFrame.Centre()
            CTXfullconvert2datameshFrame.Show()
            
    def onCTXpcadata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if self.object_manager.object_type[pieces[0]] == 'data':
            CTXpcadataFrame = CTXpcaDataFrame(parent = frame,id = 719,pieces=pieces)
            CTXpcadataFrame.Centre()
            CTXpcadataFrame.Show()
    
    def onCTXclassifydata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if self.object_manager.object_type[pieces[0]] == 'data':
            CTXclassifydataFrame = CTXclassifyDataFrame(parent = frame,id = 719,pieces=pieces)
            CTXclassifydataFrame.Centre()
            CTXclassifydataFrame.Show()
            
    def onCTXclusteranalysisdata(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        if self.object_manager.object_type[pieces[0]] == 'data':
            CTXclusteranalysisdataFrame = CTXclusteranalysisDataFrame(parent = frame,id = 719,pieces=pieces)
            CTXclusteranalysisdataFrame.Centre()
            CTXclusteranalysisdataFrame.Show()
            
    def onCTXaddtrianglevariable(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['mesh','point','data','surf']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        if len(what_gives)!=0:
            if self.object_manager.object_type[pieces[0]] == 'triangle_mesh':
                CTXaddtrianglevariableFrame = CTXaddTriangleVariableFrame(parent = frame,id = 719,pieces=pieces)
                CTXaddtrianglevariableFrame.Centre()
                CTXaddtrianglevariableFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible object to procced with this operation.', 'Object missing', wx.OK | wx.ICON_INFORMATION)
            
    def onCTXreplacetrianglevariable(self,event):
        item = self.object_tree.GetSelection()
        pieces = self.get_object_selection()
        inside = ['mesh','point','data','surf']
        what_gives = []
        for i in frame.object_manager.get_object_names():
            if frame.object_manager.object_type[i] in inside:
                what_gives.append(i)
        if len(what_gives)!=0:
            if self.object_manager.object_type[pieces[0]] == 'triangle_mesh':
                CTXreplacetrianglevariableFrame = CTXreplaceTriangleVariableFrame(parent = frame,id = 719,pieces=pieces)
                CTXreplacetrianglevariableFrame.Centre()
                CTXreplacetrianglevariableFrame.Show()
        else:
            wx.MessageBox('There does not seem to exist compatible object to procced with this operation.', 'Object missing', wx.OK | wx.ICON_INFORMATION)
            
    def ononlinehelp(self, event):
        webbrowser.open(u'http://sourceforge.net/p/geoms2/wiki/Home/')
         
    def onabout(self, event):
        #description = """Software for reservoir modeling.""" # THIS IS FOR MATAHARI DISTRIBUTION
        description = """Software for modeling in geosciences."""
        
        licence = """This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
        
        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.
        
        You should have received a copy of the GNU General Public License
        along with this program.  If not, see <http://www.gnu.org/licenses/>."""
    

        info = wx.AboutDialogInfo()

        info.SetIcon(wx.Icon(self.art.parent_frame_about, wx.BITMAP_TYPE_PNG))
        info.SetName(self.name)
        info.SetVersion('0.5')
        info.SetDescription(description)
        info.SetCopyright('(C) 2013 CERENA - IST')
        info.SetWebSite('https://sites.google.com/site/cmrpsoftware/')
        info.SetLicence(licence)
        info.AddDeveloper('CMRP Team')
        info.AddDocWriter('CMRP Team')

        wx.AboutBox(info)
        
    def onexit(self,event):
        '''
        onexit(...)
            onexit(event)
            
            Brings a dialog (of YES or NO) to ask the user it wants to exit
            the software. if YES the whole process is destroied.
            
        Parameters
        ----------
        None
            
        Returns
        -------
        out: None
            The result is either none (NO) or the whole process being terminated
            (YES).
        
        See also
        --------
        None
        '''
        dlg=wx.MessageDialog(self,'Are you sure you want to exit '+self.name+'?','Exit '+self.name+'...',wx.YES_NO|wx.ICON_EXCLAMATION)
        if dlg.ShowModal()==wx.ID_YES:
            #os._exit()
            #self.Destroy()            
            self.Close()
            #os.kill(os.getpid())
            
    def onCTXhardwordworkTetris(self,event):
        hardwork.launch_pygcurses_textris()
        
    def onCTXhardwordworkDodger(self,event):
        hardwork.launch_pygcurse_dodger()
        
    def onCTXhardwordworkMaze(self,event):
        hardwork.launch_pygcurse_maze()

if __name__=='__main__':
    # Notice that I'm using this bit of code to make some default choices
    # such as name, log file path (this should go to TEMP directive of OS),
    # centering the object and maximizing it.
    app=wx.App() #filename='log.txt') #filename = tempfile.gettempdir()+'\\log.txt')
    do_splash()
    #frame=ParentFrame(parent=None,id=1000,name='MataHari - Oil Reservoir Student Sandbox') # THIS IS FOR MATAHARI DISTRIBUTION
    frame=ParentFrame(parent=None,id=1000,name='GEOMS2 beta 64bits')
    frame.Centre() # CENTERING FRAME
    #frame.Maximize() # MAXIMIZING FRAME
    frame.Show() # SHOWING FRAME (UNTIL NOW IS INVISIBLE)
    app.MainLoop()